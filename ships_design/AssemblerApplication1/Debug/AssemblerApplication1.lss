
AVRASM ver. 2.2.8  C:\Users\Slash\Documents\SME\ships_design\AssemblerApplication1\main.asm Thu May 05 11:14:54 2022

[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.6.364\avrasm\inc\m328Pdef.inc'
C:\Users\Slash\Documents\SME\ships_design\AssemblerApplication1\main.asm(10): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.6.364\avrasm\inc\m328pdef.inc'
[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.6.364\avrasm\inc\m328Pdef.inc'
C:\Users\Slash\Documents\SME\ships_design\AssemblerApplication1\main.asm(10): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.6.364\avrasm\inc\m328pdef.inc'
                                 
                                 ;
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega328P.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m328Pdef.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega328P
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega328P
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M328PDEF_INC_
                                 #define _M328PDEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega328P
                                 #pragma AVRPART ADMIN PART_NAME ATmega328P
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x95
                                 .equ	SIGNATURE_002	= 0x0f
                                 
                                 #pragma AVRPART CORE CORE_VERSION V2E
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	UDR0	= 0xc6	; MEMORY MAPPED
                                 .equ	UBRR0L	= 0xc4	; MEMORY MAPPED
                                 .equ	UBRR0H	= 0xc5	; MEMORY MAPPED
                                 .equ	UCSR0C	= 0xc2	; MEMORY MAPPED
                                 .equ	UCSR0B	= 0xc1	; MEMORY MAPPED
                                 .equ	UCSR0A	= 0xc0	; MEMORY MAPPED
                                 .equ	TWAMR	= 0xbd	; MEMORY MAPPED
                                 .equ	TWCR	= 0xbc	; MEMORY MAPPED
                                 .equ	TWDR	= 0xbb	; MEMORY MAPPED
                                 .equ	TWAR	= 0xba	; MEMORY MAPPED
                                 .equ	TWSR	= 0xb9	; MEMORY MAPPED
                                 .equ	TWBR	= 0xb8	; MEMORY MAPPED
                                 .equ	ASSR	= 0xb6	; MEMORY MAPPED
                                 .equ	OCR2B	= 0xb4	; MEMORY MAPPED
                                 .equ	OCR2A	= 0xb3	; MEMORY MAPPED
                                 .equ	TCNT2	= 0xb2	; MEMORY MAPPED
                                 .equ	TCCR2B	= 0xb1	; MEMORY MAPPED
                                 .equ	TCCR2A	= 0xb0	; MEMORY MAPPED
                                 .equ	OCR1BL	= 0x8a	; MEMORY MAPPED
                                 .equ	OCR1BH	= 0x8b	; MEMORY MAPPED
                                 .equ	OCR1AL	= 0x88	; MEMORY MAPPED
                                 .equ	OCR1AH	= 0x89	; MEMORY MAPPED
                                 .equ	ICR1L	= 0x86	; MEMORY MAPPED
                                 .equ	ICR1H	= 0x87	; MEMORY MAPPED
                                 .equ	TCNT1L	= 0x84	; MEMORY MAPPED
                                 .equ	TCNT1H	= 0x85	; MEMORY MAPPED
                                 .equ	TCCR1C	= 0x82	; MEMORY MAPPED
                                 .equ	TCCR1B	= 0x81	; MEMORY MAPPED
                                 .equ	TCCR1A	= 0x80	; MEMORY MAPPED
                                 .equ	DIDR1	= 0x7f	; MEMORY MAPPED
                                 .equ	DIDR0	= 0x7e	; MEMORY MAPPED
                                 .equ	ADMUX	= 0x7c	; MEMORY MAPPED
                                 .equ	ADCSRB	= 0x7b	; MEMORY MAPPED
                                 .equ	ADCSRA	= 0x7a	; MEMORY MAPPED
                                 .equ	ADCH	= 0x79	; MEMORY MAPPED
                                 .equ	ADCL	= 0x78	; MEMORY MAPPED
                                 .equ	TIMSK2	= 0x70	; MEMORY MAPPED
                                 .equ	TIMSK1	= 0x6f	; MEMORY MAPPED
                                 .equ	TIMSK0	= 0x6e	; MEMORY MAPPED
                                 .equ	PCMSK1	= 0x6c	; MEMORY MAPPED
                                 .equ	PCMSK2	= 0x6d	; MEMORY MAPPED
                                 .equ	PCMSK0	= 0x6b	; MEMORY MAPPED
                                 .equ	EICRA	= 0x69	; MEMORY MAPPED
                                 .equ	PCICR	= 0x68	; MEMORY MAPPED
                                 .equ	OSCCAL	= 0x66	; MEMORY MAPPED
                                 .equ	PRR	= 0x64	; MEMORY MAPPED
                                 .equ	CLKPR	= 0x61	; MEMORY MAPPED
                                 .equ	WDTCSR	= 0x60	; MEMORY MAPPED
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	SPMCSR	= 0x37
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUSR	= 0x34
                                 .equ	SMCR	= 0x33
                                 .equ	ACSR	= 0x30
                                 .equ	SPDR	= 0x2e
                                 .equ	SPSR	= 0x2d
                                 .equ	SPCR	= 0x2c
                                 .equ	GPIOR2	= 0x2b
                                 .equ	GPIOR1	= 0x2a
                                 .equ	OCR0B	= 0x28
                                 .equ	OCR0A	= 0x27
                                 .equ	TCNT0	= 0x26
                                 .equ	TCCR0B	= 0x25
                                 .equ	TCCR0A	= 0x24
                                 .equ	GTCCR	= 0x23
                                 .equ	EEARH	= 0x22
                                 .equ	EEARL	= 0x21
                                 .equ	EEDR	= 0x20
                                 .equ	EECR	= 0x1f
                                 .equ	GPIOR0	= 0x1e
                                 .equ	EIMSK	= 0x1d
                                 .equ	EIFR	= 0x1c
                                 .equ	PCIFR	= 0x1b
                                 .equ	TIFR2	= 0x17
                                 .equ	TIFR1	= 0x16
                                 .equ	TIFR0	= 0x15
                                 .equ	PORTD	= 0x0b
                                 .equ	DDRD	= 0x0a
                                 .equ	PIND	= 0x09
                                 .equ	PORTC	= 0x08
                                 .equ	DDRC	= 0x07
                                 .equ	PINC	= 0x06
                                 .equ	PORTB	= 0x05
                                 .equ	DDRB	= 0x04
                                 .equ	PINB	= 0x03
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** USART0 ***********************
                                 ; UDR0 - USART I/O Data Register
                                 .equ	UDR0_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR0_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR0_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR0_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR0_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR0_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR0_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR0_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR0A - USART Control and Status Register A
                                 .equ	MPCM0	= 0	; Multi-processor Communication Mode
                                 .equ	U2X0	= 1	; Double the USART transmission speed
                                 .equ	UPE0	= 2	; Parity Error
                                 .equ	DOR0	= 3	; Data overRun
                                 .equ	FE0	= 4	; Framing Error
                                 .equ	UDRE0	= 5	; USART Data Register Empty
                                 .equ	TXC0	= 6	; USART Transmitt Complete
                                 .equ	RXC0	= 7	; USART Receive Complete
                                 
                                 ; UCSR0B - USART Control and Status Register B
                                 .equ	TXB80	= 0	; Transmit Data Bit 8
                                 .equ	RXB80	= 1	; Receive Data Bit 8
                                 .equ	UCSZ02	= 2	; Character Size
                                 .equ	TXEN0	= 3	; Transmitter Enable
                                 .equ	RXEN0	= 4	; Receiver Enable
                                 .equ	UDRIE0	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE0	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE0	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR0C - USART Control and Status Register C
                                 .equ	UCPOL0	= 0	; Clock Polarity
                                 .equ	UCSZ00	= 1	; Character Size
                                 .equ	UCPHA0	= UCSZ00	; For compatibility
                                 .equ	UCSZ01	= 2	; Character Size
                                 .equ	UDORD0	= UCSZ01	; For compatibility
                                 .equ	USBS0	= 3	; Stop Bit Select
                                 .equ	UPM00	= 4	; Parity Mode Bit 0
                                 .equ	UPM01	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL00	= 6	; USART Mode Select
                                 .equ	UMSEL0	= UMSEL00	; For compatibility
                                 .equ	UMSEL01	= 7	; USART Mode Select
                                 .equ	UMSEL1	= UMSEL01	; For compatibility
                                 
                                 ; UBRR0H - USART Baud Rate Register High Byte
                                 .equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR0L - USART Baud Rate Register Low Byte
                                 .equ	_UBRR0	= 0	; USART Baud Rate Register bit 0
                                 .equ	_UBRR1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** TWI **************************
                                 ; TWAMR - TWI (Slave) Address Mask Register
                                 .equ	TWAM0	= 1	; 
                                 .equ	TWAMR0	= TWAM0	; For compatibility
                                 .equ	TWAM1	= 2	; 
                                 .equ	TWAMR1	= TWAM1	; For compatibility
                                 .equ	TWAM2	= 3	; 
                                 .equ	TWAMR2	= TWAM2	; For compatibility
                                 .equ	TWAM3	= 4	; 
                                 .equ	TWAMR3	= TWAM3	; For compatibility
                                 .equ	TWAM4	= 5	; 
                                 .equ	TWAMR4	= TWAM4	; For compatibility
                                 .equ	TWAM5	= 6	; 
                                 .equ	TWAMR5	= TWAM5	; For compatibility
                                 .equ	TWAM6	= 7	; 
                                 .equ	TWAMR6	= TWAM6	; For compatibility
                                 
                                 ; TWBR - TWI Bit Rate register
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	TWPS0	= 0	; TWI Prescaler
                                 .equ	TWPS1	= 1	; TWI Prescaler
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	TWS7	= 7	; TWI Status
                                 
                                 ; TWDR - TWI Data register
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK1 - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE1	= 0	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1A	= 1	; Timer/Counter1 Output CompareA Match Interrupt Enable
                                 .equ	OCIE1B	= 2	; Timer/Counter1 Output CompareB Match Interrupt Enable
                                 .equ	ICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR1 - Timer/Counter Interrupt Flag register
                                 .equ	TOV1	= 0	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1A	= 1	; Output Compare Flag 1A
                                 .equ	OCF1B	= 2	; Output Compare Flag 1B
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode
                                 .equ	WGM11	= 1	; Waveform Generation Mode
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Comparet Ouput Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 ; TCCR1C - Timer/Counter1 Control Register C
                                 .equ	FOC1B	= 6	; 
                                 .equ	FOC1A	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 .equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TIMSK2 - Timer/Counter Interrupt Mask register
                                 .equ	TOIE2	= 0	; Timer/Counter2 Overflow Interrupt Enable
                                 .equ	TOIE2A	= TOIE2	; For compatibility
                                 .equ	OCIE2A	= 1	; Timer/Counter2 Output Compare Match A Interrupt Enable
                                 .equ	OCIE2B	= 2	; Timer/Counter2 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR2 - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 0	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2A	= 1	; Output Compare Flag 2A
                                 .equ	OCF2B	= 2	; Output Compare Flag 2B
                                 
                                 ; TCCR2A - Timer/Counter2 Control Register A
                                 .equ	WGM20	= 0	; Waveform Genration Mode
                                 .equ	WGM21	= 1	; Waveform Genration Mode
                                 .equ	COM2B0	= 4	; Compare Output Mode bit 0
                                 .equ	COM2B1	= 5	; Compare Output Mode bit 1
                                 .equ	COM2A0	= 6	; Compare Output Mode bit 1
                                 .equ	COM2A1	= 7	; Compare Output Mode bit 1
                                 
                                 ; TCCR2B - Timer/Counter2 Control Register B
                                 .equ	CS20	= 0	; Clock Select bit 0
                                 .equ	CS21	= 1	; Clock Select bit 1
                                 .equ	CS22	= 2	; Clock Select bit 2
                                 .equ	WGM22	= 3	; Waveform Generation Mode
                                 .equ	FOC2B	= 6	; Force Output Compare B
                                 .equ	FOC2A	= 7	; Force Output Compare A
                                 
                                 ; TCNT2 - Timer/Counter2
                                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                                 
                                 ; OCR2A - Timer/Counter2 Output Compare Register A
                                 .equ	OCR2A_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2A_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2A_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2A_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2A_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2A_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2A_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2A_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; OCR2B - Timer/Counter2 Output Compare Register B
                                 .equ	OCR2B_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2B_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2B_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2B_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2B_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2B_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2B_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2B_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; ASSR - Asynchronous Status Register
                                 .equ	TCR2BUB	= 0	; Timer/Counter Control Register2 Update Busy
                                 .equ	TCR2AUB	= 1	; Timer/Counter Control Register2 Update Busy
                                 .equ	OCR2BUB	= 2	; Output Compare Register 2 Update Busy
                                 .equ	OCR2AUB	= 3	; Output Compare Register2 Update Busy
                                 .equ	TCN2UB	= 4	; Timer/Counter2 Update Busy
                                 .equ	AS2	= 5	; Asynchronous Timer/Counter2
                                 .equ	EXCLK	= 6	; Enable External Clock Input
                                 
                                 ; GTCCR - General Timer Counter Control register
                                 .equ	PSRASY	= 1	; Prescaler Reset Timer/Counter2
                                 .equ	PSR2	= PSRASY	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register A
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADATE	= 5	; ADC  Auto Trigger Enable
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCSRB - The ADC Control and Status register B
                                 .equ	ADTS0	= 0	; ADC Auto Trigger Source bit 0
                                 .equ	ADTS1	= 1	; ADC Auto Trigger Source bit 1
                                 .equ	ADTS2	= 2	; ADC Auto Trigger Source bit 2
                                 .equ	ACME	= 6	; 
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 ; DIDR0 - Digital Input Disable Register
                                 .equ	ADC0D	= 0	; 
                                 .equ	ADC1D	= 1	; 
                                 .equ	ADC2D	= 2	; 
                                 .equ	ADC3D	= 3	; 
                                 .equ	ADC4D	= 4	; 
                                 .equ	ADC5D	= 5	; 
                                 
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 ; DIDR1 - Digital Input Disable Register 1
                                 .equ	AIN0D	= 0	; AIN0 Digital Input Disable
                                 .equ	AIN1D	= 1	; AIN1 Digital Input Disable
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TIMSK0 - Timer/Counter0 Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0A	= 1	; Timer/Counter0 Output Compare Match A Interrupt Enable
                                 .equ	OCIE0B	= 2	; Timer/Counter0 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR0 - Timer/Counter0 Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0A	= 1	; Timer/Counter0 Output Compare Flag 0A
                                 .equ	OCF0B	= 2	; Timer/Counter0 Output Compare Flag 0B
                                 
                                 ; TCCR0A - Timer/Counter  Control Register A
                                 .equ	WGM00	= 0	; Waveform Generation Mode
                                 .equ	WGM01	= 1	; Waveform Generation Mode
                                 .equ	COM0B0	= 4	; Compare Output Mode, Fast PWm
                                 .equ	COM0B1	= 5	; Compare Output Mode, Fast PWm
                                 .equ	COM0A0	= 6	; Compare Output Mode, Phase Correct PWM Mode
                                 .equ	COM0A1	= 7	; Compare Output Mode, Phase Correct PWM Mode
                                 
                                 ; TCCR0B - Timer/Counter Control Register B
                                 .equ	CS00	= 0	; Clock Select
                                 .equ	CS01	= 1	; Clock Select
                                 .equ	CS02	= 2	; Clock Select
                                 .equ	WGM02	= 3	; 
                                 .equ	FOC0B	= 6	; Force Output Compare B
                                 .equ	FOC0A	= 7	; Force Output Compare A
                                 
                                 ; TCNT0 - Timer/Counter0
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0A - Timer/Counter0 Output Compare Register
                                 .equ	OCR0A_0	= 0	; 
                                 .equ	OCR0A_1	= 1	; 
                                 .equ	OCR0A_2	= 2	; 
                                 .equ	OCR0A_3	= 3	; 
                                 .equ	OCR0A_4	= 4	; 
                                 .equ	OCR0A_5	= 5	; 
                                 .equ	OCR0A_6	= 6	; 
                                 .equ	OCR0A_7	= 7	; 
                                 
                                 ; OCR0B - Timer/Counter0 Output Compare Register
                                 .equ	OCR0B_0	= 0	; 
                                 .equ	OCR0B_1	= 1	; 
                                 .equ	OCR0B_2	= 2	; 
                                 .equ	OCR0B_3	= 3	; 
                                 .equ	OCR0B_4	= 4	; 
                                 .equ	OCR0B_5	= 5	; 
                                 .equ	OCR0B_6	= 6	; 
                                 .equ	OCR0B_7	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 ;.equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	PSR10	= PSRSYNC	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; EICRA - External Interrupt Control Register
                                 .equ	ISC00	= 0	; External Interrupt Sense Control 0 Bit 0
                                 .equ	ISC01	= 1	; External Interrupt Sense Control 0 Bit 1
                                 .equ	ISC10	= 2	; External Interrupt Sense Control 1 Bit 0
                                 .equ	ISC11	= 3	; External Interrupt Sense Control 1 Bit 1
                                 
                                 ; EIMSK - External Interrupt Mask Register
                                 .equ	INT0	= 0	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 1	; External Interrupt Request 1 Enable
                                 
                                 ; EIFR - External Interrupt Flag Register
                                 .equ	INTF0	= 0	; External Interrupt Flag 0
                                 .equ	INTF1	= 1	; External Interrupt Flag 1
                                 
                                 ; PCICR - Pin Change Interrupt Control Register
                                 .equ	PCIE0	= 0	; Pin Change Interrupt Enable 0
                                 .equ	PCIE1	= 1	; Pin Change Interrupt Enable 1
                                 .equ	PCIE2	= 2	; Pin Change Interrupt Enable 2
                                 
                                 ; PCMSK2 - Pin Change Mask Register 2
                                 .equ	PCINT16	= 0	; Pin Change Enable Mask 16
                                 .equ	PCINT17	= 1	; Pin Change Enable Mask 17
                                 .equ	PCINT18	= 2	; Pin Change Enable Mask 18
                                 .equ	PCINT19	= 3	; Pin Change Enable Mask 19
                                 .equ	PCINT20	= 4	; Pin Change Enable Mask 20
                                 .equ	PCINT21	= 5	; Pin Change Enable Mask 21
                                 .equ	PCINT22	= 6	; Pin Change Enable Mask 22
                                 .equ	PCINT23	= 7	; Pin Change Enable Mask 23
                                 
                                 ; PCMSK1 - Pin Change Mask Register 1
                                 .equ	PCINT8	= 0	; Pin Change Enable Mask 8
                                 .equ	PCINT9	= 1	; Pin Change Enable Mask 9
                                 .equ	PCINT10	= 2	; Pin Change Enable Mask 10
                                 .equ	PCINT11	= 3	; Pin Change Enable Mask 11
                                 .equ	PCINT12	= 4	; Pin Change Enable Mask 12
                                 .equ	PCINT13	= 5	; Pin Change Enable Mask 13
                                 .equ	PCINT14	= 6	; Pin Change Enable Mask 14
                                 
                                 ; PCMSK0 - Pin Change Mask Register 0
                                 .equ	PCINT0	= 0	; Pin Change Enable Mask 0
                                 .equ	PCINT1	= 1	; Pin Change Enable Mask 1
                                 .equ	PCINT2	= 2	; Pin Change Enable Mask 2
                                 .equ	PCINT3	= 3	; Pin Change Enable Mask 3
                                 .equ	PCINT4	= 4	; Pin Change Enable Mask 4
                                 .equ	PCINT5	= 5	; Pin Change Enable Mask 5
                                 .equ	PCINT6	= 6	; Pin Change Enable Mask 6
                                 .equ	PCINT7	= 7	; Pin Change Enable Mask 7
                                 
                                 ; PCIFR - Pin Change Interrupt Flag Register
                                 .equ	PCIF0	= 0	; Pin Change Interrupt Flag 0
                                 .equ	PCIF1	= 1	; Pin Change Interrupt Flag 1
                                 .equ	PCIF2	= 2	; Pin Change Interrupt Flag 2
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCSR - Watchdog Timer Control Register
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDCE	= 4	; Watchdog Change Enable
                                 .equ	WDP3	= 5	; Watchdog Timer Prescaler Bit 3
                                 .equ	WDIE	= 6	; Watchdog Timeout Interrupt Enable
                                 .equ	WDIF	= 7	; Watchdog Timeout Interrupt Flag
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; CLKPR - Clock Prescale Register
                                 .equ	CLKPS0	= 0	; Clock Prescaler Select Bit 0
                                 .equ	CLKPS1	= 1	; Clock Prescaler Select Bit 1
                                 .equ	CLKPS2	= 2	; Clock Prescaler Select Bit 2
                                 .equ	CLKPS3	= 3	; Clock Prescaler Select Bit 3
                                 .equ	CLKPCE	= 7	; Clock Prescaler Change Enable
                                 
                                 ; SPMCSR - Store Program Memory Control and Status Register
                                 .equ    SELFPRGEN = 0; Added for backwards compatibility
                                 .equ	SPMEN	= 0	; Store Program Memory
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read-While-Write section read enable
                                 .equ    SIGRD   = 5 ; Signature Row Read
                                 .equ	RWWSB	= 6	; Read-While-Write Section Busy
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	IVCE	= 0	; 
                                 .equ	IVSEL	= 1	; 
                                 .equ	PUD	= 4	; 
                                 .equ	BODSE	= 5	; BOD Sleep Enable
                                 .equ	BODS	= 6	; BOD Sleep
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	EXTREF	= EXTRF	; For compatibility
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 
                                 ; SMCR - Sleep Mode Control Register
                                 .equ	SE	= 0	; Sleep Enable
                                 .equ	SM0	= 1	; Sleep Mode Select Bit 0
                                 .equ	SM1	= 2	; Sleep Mode Select Bit 1
                                 .equ	SM2	= 3	; Sleep Mode Select Bit 2
                                 
                                 ; GPIOR2 - General Purpose I/O Register 2
                                 .equ	GPIOR20	= 0	; 
                                 .equ	GPIOR21	= 1	; 
                                 .equ	GPIOR22	= 2	; 
                                 .equ	GPIOR23	= 3	; 
                                 .equ	GPIOR24	= 4	; 
                                 .equ	GPIOR25	= 5	; 
                                 .equ	GPIOR26	= 6	; 
                                 .equ	GPIOR27	= 7	; 
                                 
                                 ; GPIOR1 - General Purpose I/O Register 1
                                 .equ	GPIOR10	= 0	; 
                                 .equ	GPIOR11	= 1	; 
                                 .equ	GPIOR12	= 2	; 
                                 .equ	GPIOR13	= 3	; 
                                 .equ	GPIOR14	= 4	; 
                                 .equ	GPIOR15	= 5	; 
                                 .equ	GPIOR16	= 6	; 
                                 .equ	GPIOR17	= 7	; 
                                 
                                 ; GPIOR0 - General Purpose I/O Register 0
                                 .equ	GPIOR00	= 0	; 
                                 .equ	GPIOR01	= 1	; 
                                 .equ	GPIOR02	= 2	; 
                                 .equ	GPIOR03	= 3	; 
                                 .equ	GPIOR04	= 4	; 
                                 .equ	GPIOR05	= 5	; 
                                 .equ	GPIOR06	= 6	; 
                                 .equ	GPIOR07	= 7	; 
                                 
                                 ; PRR - Power Reduction Register
                                 .equ	PRADC	= 0	; Power Reduction ADC
                                 .equ	PRUSART0	= 1	; Power Reduction USART
                                 .equ	PRSPI	= 2	; Power Reduction Serial Peripheral Interface
                                 .equ	PRTIM1	= 3	; Power Reduction Timer/Counter1
                                 .equ	PRTIM0	= 5	; Power Reduction Timer/Counter0
                                 .equ	PRTIM2	= 6	; Power Reduction Timer/Counter2
                                 .equ	PRTWI	= 7	; Power Reduction TWI
                                 
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEARL - EEPROM Address Register Low Byte
                                 .equ	EEAR0	= 0	; EEPROM Read/Write Access Bit 0
                                 .equ	EEAR1	= 1	; EEPROM Read/Write Access Bit 1
                                 .equ	EEAR2	= 2	; EEPROM Read/Write Access Bit 2
                                 .equ	EEAR3	= 3	; EEPROM Read/Write Access Bit 3
                                 .equ	EEAR4	= 4	; EEPROM Read/Write Access Bit 4
                                 .equ	EEAR5	= 5	; EEPROM Read/Write Access Bit 5
                                 .equ	EEAR6	= 6	; EEPROM Read/Write Access Bit 6
                                 .equ	EEAR7	= 7	; EEPROM Read/Write Access Bit 7
                                 
                                 ; EEARH - EEPROM Address Register High Byte
                                 .equ	EEAR8	= 0	; EEPROM Read/Write Access Bit 8
                                 .equ	EEAR9	= 1	; EEPROM Read/Write Access Bit 9
                                 
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEPE	= 1	; EEPROM Write Enable
                                 .equ	EEMPE	= 2	; EEPROM Master Write Enable
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 .equ	EEPM0	= 4	; EEPROM Programming Mode Bit 0
                                 .equ	EEPM1	= 5	; EEPROM Programming Mode Bit 1
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	SUT0	= 4	; Select start-up time
                                 .equ	SUT1	= 5	; Select start-up time
                                 .equ	CKOUT	= 6	; Clock output
                                 .equ	CKDIV8	= 7	; Divide clock by 8
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select reset vector
                                 .equ	BOOTSZ0	= 1	; Select boot size
                                 .equ	BOOTSZ1	= 2	; Select boot size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	WDTON	= 4	; Watchdog Timer Always On
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	DWEN	= 6	; debugWIRE Enable
                                 .equ	RSTDISBL	= 7	; External reset disable
                                 
                                 ; EXTENDED fuse bits
                                 .equ	BODLEVEL0	= 0	; Brown-out Detector trigger level
                                 .equ	BODLEVEL1	= 1	; Brown-out Detector trigger level
                                 .equ	BODLEVEL2	= 2	; Brown-out Detector trigger level
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x3fff	; Note: Word address
                                 .equ	IOEND	= 0x00ff
                                 .equ	SRAM_START	= 0x0100
                                 .equ	SRAM_SIZE	= 2048
                                 .equ	RAMEND	= 0x08ff
                                 .equ	XRAMEND	= 0x0000
                                 .equ	E2END	= 0x03ff
                                 .equ	EEPROMEND	= 0x03ff
                                 .equ	EEADRBITS	= 10
                                 #pragma AVRPART MEMORY PROG_FLASH 32768
                                 #pragma AVRPART MEMORY EEPROM 1024
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 2048
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0x3800
                                 .equ	NRWW_STOP_ADDR	= 0x3fff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0x37ff
                                 .equ	PAGESIZE	= 64
                                 .equ	FIRSTBOOTSTART	= 0x3f00
                                 .equ	SECONDBOOTSTART	= 0x3e00
                                 .equ	THIRDBOOTSTART	= 0x3c00
                                 .equ	FOURTHBOOTSTART	= 0x3800
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	PCI0addr	= 0x0006	; Pin Change Interrupt Request 0
                                 .equ	PCI1addr	= 0x0008	; Pin Change Interrupt Request 0
                                 .equ	PCI2addr	= 0x000a	; Pin Change Interrupt Request 1
                                 .equ	WDTaddr	= 0x000c	; Watchdog Time-out Interrupt
                                 .equ	OC2Aaddr	= 0x000e	; Timer/Counter2 Compare Match A
                                 .equ	OC2Baddr	= 0x0010	; Timer/Counter2 Compare Match A
                                 .equ	OVF2addr	= 0x0012	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x0014	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x0016	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x0018	; Timer/Counter1 Compare Match B
                                 .equ	OVF1addr	= 0x001a	; Timer/Counter1 Overflow
                                 .equ	OC0Aaddr	= 0x001c	; TimerCounter0 Compare Match A
                                 .equ	OC0Baddr	= 0x001e	; TimerCounter0 Compare Match B
                                 .equ	OVF0addr	= 0x0020	; Timer/Couner0 Overflow
                                 .equ	SPIaddr	= 0x0022	; SPI Serial Transfer Complete
                                 .equ	URXCaddr	= 0x0024	; USART Rx Complete
                                 .equ	UDREaddr	= 0x0026	; USART, Data Register Empty
                                 .equ	UTXCaddr	= 0x0028	; USART Tx Complete
                                 .equ	ADCCaddr	= 0x002a	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x002c	; EEPROM Ready
                                 .equ	ACIaddr	= 0x002e	; Analog Comparator
                                 .equ	TWIaddr	= 0x0030	; Two-wire Serial Interface
                                 .equ	SPMRaddr	= 0x0032	; Store Program Memory Read
                                 
                                 .equ	INT_VECTORS_SIZE	= 52	; size in words
                                 
                                 #endif  /* _M328PDEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 ; UC GAME PROJECT
                                 ;
                                 ; Created: 24-04-2022 10:35:44
                                 ; Authors : Deeksha - Aimen
                                 ;
                                 
                                 
                                 ; Definition file of the ATmega328P
                                 .INCLUDE "m328pdef.inc"
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega328P.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m328Pdef.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega328P
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega328P
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M328PDEF_INC_
                                 #endif  /* _M328PDEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 ; Boot
                                 .ORG 0x0000 ; 
000000 c020                      RJMP Init ; First instruction that is executed by the microcontroller
                                 
                                 ;macro
                                 .DEF Local_index1	= R17
                                 .DEF local_index2	= R18
                                 .DEF PAT_COL1		= R19 ;Temporary Pattern for column
                                 .DEF DummyReg		= R20
                                 .DEF STATE_MACHINE	= R21 ;Stores state of game  00 : start
                                 												;01 : game over
                                 .DEF LAST_JOY		= R22 ; Stores last state of joystick  
                                 .DEF RowIndex		= R23 ; Index used to count the row number
                                 .DEF LAST_KEY		= R24 ; global var to store state of keyboard last 
                                 .DEF BOSS_SHIPCOUNTER = R25 ; Current active gun index of the boss
                                 
                                 .EQU MonsterNotGunPat = 0b11111001
                                 .EQU MonsterGunPat = 0b11111001
                                 .EQU ShipGun = 0b0011111
                                 .EQU ShipMiddle = 0b00111110
                                 .EQU ShipEnd = 0b0010000
                                 
                                 ;keyboard patterns
                                 .EQU BTN8_PATTERN = 0b01111011 ; Button 8 pressed pattern
                                 .EQU BTN7_PATTERN = 0b01110111 ; Button 7 pressed pattern
                                 .EQU BTN5_PATTERN = 0b10111011 ; Button 5 pressed pattern
                                 .EQU BTN4_PATTERN = 0b10110111 ; Button 4 pressed pattern
                                 .EQU BTN2_PATTERN = 0b11011011 ; Button 2 pressed pattern
                                 .EQU NOBTN_PATTERN =  0b11111111 ; No button preesed pattern
                                 .EQU OTHER_PATTERN = 0b00110011 ; Pattern for the rest of the buttons
                                 
                                 ; Interrupts
                                 .ORG 0x0006
000006 c325                      rjmp JoystickInterrupt
                                 
                                 .org 0x001A
00001a c2ff                      rjmp TimerInterrupt
                                 
                                 
                                 .ORG 0x0020
000020 c305                      rjmp Timer0interrupt
                                 
                                 Init: 
                                 ; Configure output pin PB3
000021 9a23                      SBI DDRB, 3 ; Pin PB3 is an output: Data pin SDI (Serial Data In)
000022 9a24                      SBI DDRB, 4 ; Pin PB4 is an output: Latch/Output pin: LE(Latch Enable) + OE(Output Enable)
000023 9a25                      SBI DDRB, 5 ; Pin PB5 is an output: Clock pin CLK
                                 
                                 ; Configure input joystick pin PB2
000024 9822                      CBI DDRB,2;	pin an input switch
000025 9a2a                      SBI PORTB,2;Enable the pull-up resistor
                                 
                                 ;enabling keyboard input
000026 e00f                      LDI R16, 0x0F
000027 ef10                      LDI R17, 0xF0
000028 b91a                      OUT DDRD, R17 
000029 b90b                      OUT PORTD, R16 ; Init keyboard. set all rows to ground and cols to 1 
                                 
                                 ;LED 
00002a 9a3a                      SBI DDRC, 2
00002b 9a42                      SBI PORTC,2
                                 
                                 ;Initializing state machine
00002c e051                      LDI STATE_MACHINE, 0x01
00002d e060                      LDI LAST_JOY, 0x00
00002e e080                      LDI LAST_KEY, 0x00
                                 
                                 ;CALL init_screen
00002f 940e 0234                 CALL Load_game_play_start
                                 
000031 9478                      SEI ;Set golabl interrupt
                                 ; timerinterrupt	/* Timer interrupt enabled inside machine state*/
                                 
000032 e005                      LDI R16, 0x05
000033 9300 0081                 STS TCCR1B, R16 ;prescaler timer 1
000035 e005                      LDI R16, 0x05
000036 bd05                      OUT TCCR0B, R16 ;prescaler timer 0
                                 ;LDI R16, 0x02
                                 ;OUT TCCR0A, R16 ;CTC MODE
                                 ;LDI R16, 100
                                 ;OUT OCR0A, R16
                                  
                                 ; Joystick interrupt
000037 e001                      LDI R16, 0x01
000038 e014                      LDI R17, 4
000039 9300 0068                 STS PCICR, R16
00003b 9310 006b                 STS PCMSK0, R17
                                 
                                 ; INIT BOSS ACTIVE GUN COUNTER = it has 6 guns
00003d e096                      LDI BOSS_SHIPCOUNTER, 6
                                 
00003e e0b2                      LDI XH, 0x02
00003f e0d2                      LDI YH, 0x02
000040 e5c0                      LDI YL, 0x50
000041 e9a0                      LDI XL, 0x90
                                 
000042 e114                      LDI local_index1, 20
000043 e000                      LDI R16, 0x00
000044 8308                      INIT_BULLETS: ST Y, R16
000045 930c                      			  ST X, R16
000046 951a                      			  DEC local_index1
000047 f7e1                      			  BRNE INIT_BULLETS
                                 
                                 ;Main Function
000048 940e 0058                 Main: CALL display
                                 	;CALL state_machine_update
00004a 940e 0062                 	CALL load_screen_state
00004c e060                      	LDI LAST_JOY, 0x00
00004d 9a42                      	SBI PORTC,2
00004e 9120 0380                 	LDS R18, 0x0380
000050 3021                      	CPI R18, 1
000051 f7b1                      	BRNE Main
000052 940e 018c                 	CALL BOSS_SHOOT
000054 cff3                      RJMP Main
                                 
                                 init_screen:
000055 e0f6                      	LDI ZH, high(CharTable2<<1)
000056 eeec                      	LDI ZL, low(CharTable2<<1)
000057 9508                      RET
                                 
                                 Display:
000058 e078                      	LDI RowIndex, 0x08 ;index for send1row
                                 	Send1Row:
000059 940e 02af                 		CALL execute_col_loop
00005b 940e 02e2                 		CALL execute_row_loop
00005d 940e 02ed                 		CALL Latch_shift_reg
00005f 957a                      		DEC RowIndex
000060 f7c1                      	BRNE Send1Row
000061 9508                      RET
                                 
                                 Load_screen_state:
000062 3051                      	CPI STATE_MACHINE, 0x01 ;Joystick went off 
000063 f069                      	BREQ state_0 ; 
000064 3052                      	CPI STATE_MACHINE, 0x02 ;Joystick went off 
000065 f059                      	BREQ state_0 ; 	
000066 3053                      	CPI STATE_MACHINE, 0x03 ;Joystick went off - on - off 
000067 f0a1                      	BREQ State_1 ; game display
000068 3054                      	CPI STATE_MACHINE, 0x04 ;Joystick went off - on - off 
000069 f091                      	BREQ State_1 ; game display
00006a 3055                      	CPI STATE_MACHINE, 0x05 ;Joystick went off - on - off - on - off
00006b f0d1                      	BREQ State_2 ; game over display
00006c 3056                      	CPI STATE_MACHINE, 0x06 ;Joystick went off - on - off - on - off
00006d f0c1                      	BREQ State_2 ; game over display
00006e 3057                      	CPI STATE_MACHINE, 0x07 ;Joystick went off - on - off - on - off - on - off
00006f f0f1                      	BREQ Reset_state ; reset to start display
000070 9508                      	RET 	
                                 
                                 	State_0: ;START
000071 e0f6                      		LDI ZH, high(CharTable1<<1) 
000072 e6e4                      		LDI ZL, low(CharTable1<<1)
                                 
000073 e025                      		LDI R18, 5
000074 9320 0381                 		STS 0x0381, R18
                                 
000076 e000                      		LDI R16, 0x00
000077 9300 006f                 		STS TIMSK1, R16 ;timer1 interrupt disable
000079 9300 006e                 		STS TIMSK0, R16 ; timer0 interrupt disable
00007b 9508                      		RET
                                 	State_1: ;GAME PLAY
00007c e001                      		LDI R16, 0x01
00007d 9300 006f                 		STS TIMSK1, R16 ;timer1 interrupt enable
00007f 9300 006e                 		STS TIMSK0, R16 ; timer0 interrupt enable
                                 
000081 940e 0093                 		CALL CHECK_STATE
                                 		;CALL UPDATE_BULLETSTATE
                                 		;CALL BULLET_DELAY
                                 
                                 		;SBIC TIFR0, TOV0
                                 		;rjmp update
                                 
000083 e0f1                      		LDI ZH,0x01
000084 e0e0                      		LDI ZL,0x00
000085 9508                      		RET
                                 	State_2: ; GAME OVER
000086 e000                      		LDI R16, 0x00
000087 9300 006f                 		STS TIMSK1, R16 ;timer1 interrupt disable
000089 9300 006e                 		STS TIMSK0, R16 ; timer0 interrupt disable
00008b e0f6                      		LDI ZH, high(CharTable2<<1)
00008c eeec                      		LDI ZL, low(CharTable2<<1)
00008d 9508                      		RET	
                                 	Reset_state:
00008e e000                      	    LDI R16, 0x00
00008f 9300 006f                 		STS TIMSK1, R16 ;timer1 interrupt disable
000091 e051                      		LDI STATE_MACHINE, 0x01
000092 9508                      		RET			
                                 
                                 
                                 CHECK_STATE: 
000093 b129                      			 IN R18,PIND ; Copy PIND into R18
000094 d210                      		     RCALL CONTEXT_SWITCH ; Call context switch (RCALL takes less instruction cycles than CALL)
000095 b139                      		     IN R19,PIND ; Copy PIND into R19
000096 d213                      		     RCALL RESET_CONTEXT ; Call reset context 
000097 2b23                      		     OR R18,R19 ; R18 OR R19 and store the result in R18
                                 
000098 3d2b                      		     CPI R18,BTN2_PATTERN ; If button 2 is pressed
000099 f039                      			 BREQ state_plus_2
                                 
00009a 372b                           		 CPI R18,BTN8_PATTERN ; If button 8 is pressed
00009b f039                      		     BREQ state_plus_8
                                 
00009c 3b2b                      			 CPI R18,BTN5_PATTERN ; If button 5 is pressed
00009d f039                      		     BREQ state_plus_5
                                 
                                 
00009e 3f2f                      			 CPI R18,NOBTN_PATTERN ; If no button is pressed
00009f f039                      			 BREQ reset_key_state
0000a0 9508                      			 RET
                                 
                                 			 state_plus_2:
0000a1 e082                      				LDI LAST_KEY, 0x02
0000a2 9508                      			 RET
                                 
                                 			 state_plus_8:
0000a3 e084                      				LDI LAST_KEY, 0x04
0000a4 9508                      			 RET
                                 
                                 			 state_plus_5:
0000a5 e086                      				LDI LAST_KEY, 0x06
0000a6 9508                      			 RET
                                 
                                 			 reset_key_state:
0000a7 3082                      				CPI LAST_KEY,0x02 ; If button 2 is pressed
0000a8 f029                      				BREQ go_down
0000a9 3084                      				CPI LAST_KEY,0x04 ; if button 8 is pressed
0000aa f039                      				BREQ go_up
0000ab 3086                      				CPI LAST_KEY,0x06 ; if button 5 is pressed
0000ac f049                      				BREQ ship_shoot
0000ad 9508                      			 RET
                                 
                                 			 go_down:
0000ae e080                      				LDI LAST_KEY,0x00
0000af 940e 01be                 				CALL MOVE_DOWN
0000b1 9508                      			 RET
                                 
                                 			 go_up:
0000b2 e080                      				LDI LAST_KEY,0x00
0000b3 940e 01f9                 				CALL MOVE_UP
0000b5 9508                      			 RET
                                 
                                 			 ship_shoot:
0000b6 e080                      				LDI LAST_KEY,0x00
0000b7 940e 015b                 				CALL SHOOT
0000b9 9508                      			 RET
                                 
0000ba 93ef                      UPDATE_BULLETSTATE: PUSH ZL
0000bb 93ff                      				    PUSH ZH
0000bc 932f                      					PUSH R18
0000bd 934f                      					PUSH R20
0000be 922f                      					PUSH R2
0000bf b62f                      					IN R2, SREG
0000c0 e0ea                      					LDI ZL, 0x0A
0000c1 e0d2                      					LDI YH, 0x02
0000c2 e0b2                      					LDI XH, 0x02
                                 
0000c3 e5c0                      					LDI YL, 0x50 ; Ship bullet
0000c4 e9a0                      					LDI XL, 0x90 ; Boss bullet	
                                 					
                                 
0000c5 e341                      				    LDI R20, 49 ; 1St upper row                   ;xxxxxxx  x  
0000c6 940e 02f5                 					CALL SHIFT_Z
0000c8 940e 0113                 					CALL TRACE_BULLET
                                 
0000ca e9a3                      					LDI XL, 0x93 ; BOSS GUN!
                                 					
0000cb e247                      					LDI R20, 39 ; 2nd upper row                   ;xxxxxxx  x
0000cc 940e 02f5                 					CALL SHIFT_Z
0000ce 940e 0113                 					CALL TRACE_BULLET
                                 
0000d0 e9a6                      					LDI XL, 0x96 ; BOSS GUN !
0000d1 e14d                      					LDI R20, 29 ; 3rd upper row                    ;xxxxx      
0000d2 940e 02f5                 					CALL SHIFT_Z
0000d4 940e 0113                 					CALL TRACE_BULLET
                                 					
0000d6 e9a9                      					LDI XL, 0x99 ; BOSS GUN !
0000d7 e143                      					LDI R20, 19 ; 4th upper row				     ;xxxxx 
0000d8 940e 02f5                 					CALL SHIFT_Z
0000da 940e 0113                 					CALL TRACE_BULLET
                                 
0000dc e9ac                      					LDI XL, 0x9C ; BOSS GUN !
0000dd e049                      					LDI R20, 9 ; 5th upper row				      ;xxxxxxx  x
0000de 940e 02f5                 					CALL SHIFT_Z
0000e0 940e 0113                 					CALL TRACE_BULLET
                                 
0000e2 e9af                      					LDI XL, 0x9F ; BOSS GUN !
0000e3 e440                      					LDI R20, 64 ; 1St bottom row
0000e4 940e 02f5                 					CALL SHIFT_Z
0000e6 940e 0113                 					CALL TRACE_BULLET
                                 
0000e8 eaa2                      					LDI XL, 0xA2 ; BOSS GUN !
0000e9 e346                      					LDI R20, 54 ; 2nd bottom row
0000ea 940e 02f5                 					CALL SHIFT_Z
0000ec 940e 0113                 					CALL TRACE_BULLET
                                 
0000ee eaa5                      					LDI XL, 0xA5 ; BOSS GUN !
0000ef e24c                      					LDI R20, 44 ; 3rd bottom row
0000f0 940e 02f5                 					CALL SHIFT_Z
0000f2 940e 0113                 					CALL TRACE_BULLET
                                 
0000f4 eaa8                      					LDI XL, 0xA8 ; BOSS GUN !
0000f5 e242                      					LDI R20, 34 ; 4th bottom row
0000f6 940e 02f5                 					CALL SHIFT_Z
0000f8 940e 0113                 					CALL TRACE_BULLET
                                 
0000fa eaab                      					LDI XL, 0xAB ; BOSS GUN !
                                 
0000fb e148                      					LDI R20, 24 ; 5th bottom row
0000fc 940e 02f5                 					CALL SHIFT_Z
0000fe 940e 0113                 					CALL TRACE_BULLET
                                 
000100 eaae                      					LDI XL, 0xAE ; BOSS GUN !
000101 e04e                      					LDI R20, 14 ; 6th bottom row
000102 940e 02f5                 					CALL SHIFT_Z
000104 940e 0113                 					CALL TRACE_BULLET
                                 
000106 eba1                      					LDI XL, 0xB1 ; BOSS GUN !
000107 e044                      					LDI R20, 4 ; 7th bottom row
000108 940e 02f5                 					CALL SHIFT_Z
00010a 940e 0113                 					CALL TRACE_BULLET
                                 							 
                                 			
00010c be2f                      			finish_update:  OUT SREG, R2
00010d 902f                      							POP R2
00010e 914f                      							POP R20
00010f 912f                      							POP R18
000110 91ff                      							POP ZH
000111 91ef                      							POP ZL
000112 9508                      							RET
                                 
000113 8108                      TRACE_BULLET: LD R16, Y ; ship bullet
000114 911c                      			LD R17, X ; boss bullet
                                 			
                                 			; --------------
                                 			; ---- check if bullets are met ----
000115 3000                      			CPI R16, 0x00
000116 f021                      			BREQ continue
000117 2f40                      			MOV dummyReg, R16 
000118 1b41                      			SUB dummyReg, R17
000119 3040                      			CPI dummyReg, 0x00
00011a f189                      			BREQ bullets_collapse
                                 			; --- continue ----
00011b 2f20                      			continue: MOV R18, R16
00011c 2b21                      			OR R18, R17
00011d 9322                      			ST -Z, R18;storing bullet 
                                 
00011e 0f11                      			LSL R17 ; shift boss bullet to the left
00011f 931d                      			ST X+, R17
000120 f428                      			BRCC shipNotHit
                                 
                                 			
                                 			; ---- Check if ship is hit
000121 95e3                      			INC ZL
000122 8120                      			LD R18, Z
000123 312f                      			CPI R18, shipGun
000124 f159                      			BREQ shipDamaged
000125 95ea                      			DEC ZL
                                 			; --------------
                                 
000126 9488                      			shipNotHit:CLC
000127 9506                      			LSR R16 ; shift ship bullet to the right
000128 9309                      			ST Y+, R16
000129 f410                      			BRCC next ; if carry is set write to the next byte 
00012a e800                      			LDI R16, 0x80 ;shifting 1 to next byte of bullet path
00012b 8308                      			ST Y, R16
                                 
                                 			; next byte
00012c 8108                      			next: LD R16, Y
00012d 911c                      				  LD R17, X
00012e 2f20                      				  MOV R18, R16
00012f 2b01                      				  OR R16, R17
000130 9302                      				  ST -Z, R16
                                 
000131 9526                      				  LSR R18
000132 9329                      				  ST Y+, R18
000133 f410                      				  BRCC bossBullet
000134 e800                      				  LDI R16, 0x80
000135 8308                      				  ST Y, R16
                                 					; move the boss bultt to the next byte if carry is set
000136 0f11                      				  bossBullet:  LSL R17
000137 931c                      						  ST X, R17
000138 f418                      						  BRCC next3
000139 e011                      						  LDI R17, 0x01
00013a 931e                      						  ST -X, R17
00013b 95a3                      						  INC XL
                                 
                                 					; last byte
00013c 95a3                      			  next3: INC XL		 
00013d 8108                      					 LD R16, Y
00013e 911c                      					 LD R17, X
00013f 2f20                      					 MOV R18, R16
000140 2b01                      					 OR R16, R17
000141 9302                      					 ST -Z, R16
                                 
000142 9526                      					 LSR R18
000143 9329                      					 ST Y+, R18
000144 f0a0                      					 BRCS bossDamaged
                                 
000145 9488                      					 CLC
000146 0f11                      					 LSL R17
000147 931c                      					 ST X, R17
000148 f410                      					 BRCC finish_trace ; problem here regarding X
000149 e011                      					 LDI R17, 0x01
00014a 931e                      					 ST -X, R17	 ; move the boss bultt to the next byte if carry is set
                                 							
                                 							
                                 
00014b 9508                      				finish_trace: RET
                                 				; -- if bullets collapse => reset ---
00014c e000                      				bullets_collapse: LDI R16, 0x00
00014d 8308                      								  ST Y, R16
00014e 930c                      								  ST X, R16
00014f 9508                      								  RET
                                 				; --- if ship is hit by boss bullet -------
000150 9120 0381                 				shipDamaged: LDS R18, 0x0381
000152 952a                      							 DEC R18
000153 f019                      							 BREQ game_over
000154 9320 0381                 							 STS 0x0381, R18
000156 9508                      							 RET
                                 
000157 e055                      							 game_over: LDI STATE_MACHINE, 0x05 ; game over state
000158 9508                      										RET
                                 			   ; ----- Check if boss is hit by ship bullet ---------------
000159 e055                      			   bossDamaged: LDI STATE_MACHINE, 0x05 ; game over state
00015a 9508                      							RET	
                                 										 
                                 										 		
                                 
00015b 93ef                      SHOOT: PUSH ZL
00015c 93ff                      	   PUSH ZH
00015d 922f                      	   PUSH R2
00015e b62f                      	   IN R2, SREG
00015f e0ea                      	   LDI ZL, 0x0A
000160 e5c0                      	   LDI YL, 0x50
                                 
000161 a901                      	   LDD R16, Z+49
000162 d01f                      	   RCALL SHIP_FIRE
                                 
000163 a107                      	   LDD R16, Z+39
000164 d01d                      	   RCALL SHIP_FIRE
                                 
000165 8d05                      	   LDD R16, Z+29
000166 d01b                      	   RCALL SHIP_FIRE
                                 
000167 8903                      	   LDD R16, Z+19
000168 d019                      	   RCALL SHIP_FIRE
                                 
000169 8501                      	   LDD R16, Z+9
00016a d017                      	   RCALL SHIP_FIRE
                                 
                                 	   
00016b e440                      	   LDI R20, 64 ; 1St bottom row
00016c 940e 02f5                 	   CALL SHIFT_Z
00016e 8100                      	   LD R16, Z
00016f d012                      	   RCALL SHIP_FIRE
000170 e0ea                      	   LDI ZL, 0x0A
                                 
000171 a906                      	   LDD R16, Z+54
000172 d00f                      	   RCALL SHIP_FIRE
                                 
000173 a504                      	   LDD R16, Z+44
000174 d00d                      	   RCALL SHIP_FIRE
                                 
000175 a102                      	   LDD R16, Z+34
000176 d00b                      	   RCALL SHIP_FIRE
                                 
000177 8d00                      	   LDD R16, Z+24
000178 d009                      	   RCALL SHIP_FIRE
                                 	   
000179 8506                      	   LDD R16, Z+14
00017a d007                      	   RCALL SHIP_FIRE
                                 
00017b 8104                      	   LDD R16, Z+4
00017c d005                      	   RCALL SHIP_FIRE
                                 
00017d be2f                      	   finish_shooting: OUT SREG, R2
00017e 902f                      						POP R2
00017f 91ff                      						POP ZH
000180 91ef                      						POP ZL
000181 9508                      						RET
                                 
000182 310f                      SHIP_FIRE: CPI R16, ShipGun
000183 f421                      		   BRNE DONT_FIRE
000184 8108                      		   LD R16, Y
000185 e810                      		  LDI R17, 0x80
000186 2b01                      		   OR R16, R17
000187 8308                      		   ST Y, R16
000188 95c3                      		   DONT_FIRE: INC YL
000189 95c3                      					   INC YL
00018a 95c3                      					  INC YL
00018b 9508                      					  RET
                                 
00018c e0b2                      BOSS_SHOOT:		LDI XH, 0x02
00018d 93ef                      				PUSH ZL
00018e 93ff                      				PUSH ZH
00018f 932f                      			    PUSH R18
000190 922f                      			    PUSH R2
000191 b62f                      				IN R2, SREG
                                 				
000192 3096                      				CPI BOSS_SHIPCOUNTER, 6
000193 f089                      				BREQ PAT1
000194 3095                      				CPI BOSS_SHIPCOUNTER, 5
000195 f089                      				BREQ PAT2
000196 3094                      				CPI BOSS_SHIPCOUNTER, 4
000197 f089                      				BREQ PAT3
000198 3093                      				CPI BOSS_SHIPCOUNTER, 3
000199 f089                      				BREQ PAT4
00019a 3092                      				CPI BOSS_SHIPCOUNTER, 2
00019b f089                      				BREQ PAT5
00019c 3091                      				CPI BOSS_SHIPCOUNTER, 1
00019d f089                      				BREQ PAT6
                                 
00019e e096                      				LDI BOSS_SHIPCOUNTER, 6 ; reset
00019f be2f                      				OUT SREG, R2
0001a0 902f                      				POP R2
0001a1 912f                      			    POP R18
0001a2 91ff                      				POP ZH
0001a3 91ef                      				POP ZL
0001a4 9518                      				RETI
                                 
0001a5 e9a2                      				PAT1: LDI XL, 0x92
0001a6 c009                      					  RJMP boss_fire
0001a7 e9a5                      				PAT2: LDI XL, 0x95
0001a8 c007                      					  RJMP boss_fire
0001a9 e9ae                      				PAT3: LDI XL, 0x9E
0001aa c005                      					  RJMP boss_fire
0001ab eaa1                      				PAT4: LDI XL, 0xA1
0001ac c003                      					  RJMP boss_fire
0001ad eaaa                      				PAT5: LDI XL, 0xAA
0001ae c001                      					  RJMP boss_fire
0001af eaad                      				PAT6: LDI XL, 0xAD
                                 
0001b0 910c                      				boss_fire: LD R16, X
0001b1 e011                      				LDI R17, 0x01
0001b2 2b01                      				OR R16, R17
0001b3 930c                      				ST X, R16
0001b4 959a                      				DEC BOSS_SHIPCOUNTER
                                 
                                 				;CALL UPDATE_BULLETSTATE
                                 
0001b5 e020                      				LDI R18, 0
0001b6 9320 0380                 				STS 0x0380, R18
                                 
0001b8 be2f                      				OUT SREG, R2
0001b9 902f                      				POP R2
0001ba 912f                      			    POP R18
0001bb 91ff                      				POP ZH
0001bc 91ef                      				POP ZL
                                 
0001bd 9508                      				RET
                                 
                                 MOVE_DOWN:
                                 
0001be e0f1                      	LDI ZH, 0x01
                                 
0001bf e0ee                      	LDI ZL, 0x0E ;ROW 1, lower block
0001c0 8130                      	LD PAT_COL1, Z
                                 	
0001c1 e1e8                      	LDI ZL, 0x18 ;ROW 2, lower block
0001c2 8140                      	LD DummyReg, Z
0001c3 e0ee                      	LDI ZL, 0x0E
0001c4 8340                      	ST Z, DummyReg
                                 
0001c5 e2e2                      	LDI ZL, 0x22 ;ROW 3, lower block
0001c6 8140                      	LD DummyReg, Z
0001c7 e1e8                      	LDI ZL, 0x18
0001c8 8340                      	ST Z, DummyReg
                                 
0001c9 e2ec                      	LDI ZL, 0x2C ;ROW 4, lower block
0001ca 8140                      	LD DummyReg, Z
0001cb e2e2                      	LDI ZL, 0x22
0001cc 8340                      	ST Z, DummyReg
                                 
0001cd e3e6                      	LDI ZL, 0x36 ;ROW 5, lower block
0001ce 8140                      	LD DummyReg, Z
0001cf e2ec                      	LDI ZL, 0x2C
0001d0 8340                      	ST Z, DummyReg
                                 
0001d1 e4e0                      	LDI ZL, 0x40 ;ROW 6, lower block
0001d2 8140                      	LD DummyReg, Z
0001d3 e3e6                      	LDI ZL, 0x36
0001d4 8340                      	ST Z, DummyReg
                                 
0001d5 e4ea                      	LDI ZL, 0x4A ;ROW 7, lower block
0001d6 8140                      	LD DummyReg, Z
0001d7 e4e0                      	LDI ZL, 0x40
0001d8 8340                      	ST Z, DummyReg
                                 
0001d9 e1e3                      	LDI ZL, 0x13 ;ROW 1, upper block
0001da 8140                      	LD DummyReg, Z
0001db e4ea                      	LDI ZL, 0x4A
0001dc 8340                      	ST Z, DummyReg
                                 
0001dd e1ed                      	LDI ZL, 0x1D ;ROW 2, upper block
0001de 8140                      	LD DummyReg, Z
0001df e1e3                      	LDI ZL, 0x13
0001e0 8340                      	ST Z, DummyReg
                                 
0001e1 e2e7                      	LDI ZL, 0x27 ;ROW 3, upper block
0001e2 8140                      	LD DummyReg, Z
0001e3 e1ed                      	LDI ZL, 0x1D
0001e4 8340                      	ST Z, DummyReg
                                 
0001e5 e3e1                      	LDI ZL, 0x31 ;ROW 4, upper block
0001e6 8140                      	LD DummyReg, Z
0001e7 e2e7                      	LDI ZL, 0x27
0001e8 8340                      	ST Z, DummyReg
                                 
0001e9 e3eb                      	LDI ZL, 0x3B ;ROW 5, upper block
0001ea 8140                      	LD DummyReg, Z
0001eb e3e1                      	LDI ZL, 0x31
0001ec 8340                      	ST Z, DummyReg
                                 
0001ed e4e5                      	LDI ZL, 0x45 ;ROW 6, upper block
0001ee 8140                      	LD DummyReg, Z
0001ef e3eb                      	LDI ZL, 0x3B
0001f0 8340                      	ST Z, DummyReg
                                 
0001f1 e4ef                      	LDI ZL, 0x4F ;ROW 7, upper block
0001f2 8140                      	LD DummyReg, Z
0001f3 e4e5                      	LDI ZL, 0x45
0001f4 8340                      	ST Z, DummyReg
                                 
0001f5 e4ef                      	LDI ZL, 0x4F ;ROW 7, upper block
0001f6 8330                      	ST Z, PAT_COL1
                                 
                                 	;Restoring Z
0001f7 e0e0                      	LDI ZL, 0x00
                                 
0001f8 9508                      RET
                                 
                                 MOVE_UP:
                                 
0001f9 e0f1                      	LDI ZH, 0x01
                                 
0001fa e4ef                      	LDI ZL, 0x4F ;ROW 7, upper block
0001fb 8130                      	LD PAT_COL1, Z
                                 	
0001fc e4e5                      	LDI ZL, 0x45 ;ROW 6, upper block
0001fd 8140                      	LD DummyReg, Z
0001fe e4ef                      	LDI ZL, 0x4F
0001ff 8340                      	ST Z, DummyReg
                                 
000200 e3eb                      	LDI ZL, 0x3B ;ROW 5, upper block
000201 8140                      	LD DummyReg, Z
000202 e4e5                      	LDI ZL, 0x45
000203 8340                      	ST Z, DummyReg
                                 
000204 e3e1                      	LDI ZL, 0x31 ;ROW 4, upper block
000205 8140                      	LD DummyReg, Z
000206 e3eb                      	LDI ZL, 0x3B
000207 8340                      	ST Z, DummyReg
                                 
000208 e2e7                      	LDI ZL, 0x27 ;ROW 3, upper block
000209 8140                      	LD DummyReg, Z
00020a e3e1                      	LDI ZL, 0x31
00020b 8340                      	ST Z, DummyReg
                                 
00020c e1ed                      	LDI ZL, 0x1D ;ROW 2, upper block
00020d 8140                      	LD DummyReg, Z
00020e e2e7                      	LDI ZL, 0x27
00020f 8340                      	ST Z, DummyReg
                                 
000210 e1e3                      	LDI ZL, 0x13 ;ROW 1, upper block
000211 8140                      	LD DummyReg, Z
000212 e1ed                      	LDI ZL, 0x1D
000213 8340                      	ST Z, DummyReg
                                 
000214 e4ea                      	LDI ZL, 0x4A ;ROW 7, lower block
000215 8140                      	LD DummyReg, Z
000216 e1e3                      	LDI ZL, 0x13
000217 8340                      	ST Z, DummyReg
                                 
000218 e4e0                      	LDI ZL, 0x40 ;ROW 6, lower block
000219 8140                      	LD DummyReg, Z
00021a e4ea                      	LDI ZL, 0x4A
00021b 8340                      	ST Z, DummyReg
                                 
00021c e3e6                      	LDI ZL, 0x36 ;ROW 5, lower block
00021d 8140                      	LD DummyReg, Z
00021e e4e0                      	LDI ZL, 0x40
00021f 8340                      	ST Z, DummyReg
                                 
000220 e2ec                      	LDI ZL, 0x2C ;ROW 4, lower block
000221 8140                      	LD DummyReg, Z
000222 e3e6                      	LDI ZL, 0x36
000223 8340                      	ST Z, DummyReg
                                 
000224 e2e2                      	LDI ZL, 0x22 ;ROW 3, lower block
000225 8140                      	LD DummyReg, Z
000226 e2ec                      	LDI ZL, 0x2C
000227 8340                      	ST Z, DummyReg
                                 
000228 e1e8                      	LDI ZL, 0x18 ;ROW 2, lower block
000229 8140                      	LD DummyReg, Z
00022a e2e2                      	LDI ZL, 0x22
00022b 8340                      	ST Z, DummyReg
                                 
00022c e0ee                      	LDI ZL, 0x0E ;ROW 1, lower block
00022d 8140                      	LD DummyReg, Z
00022e e1e8                      	LDI ZL, 0x18
00022f 8340                      	ST Z, DummyReg
                                 
000230 e0ee                      	LDI ZL, 0x0E ;ROW 1, lower block
000231 8330                      	ST Z, PAT_COL1
                                 
                                 	;Restoring Z
000232 e0e0                      	LDI ZL, 0x00
                                 
000233 9508                      RET
                                 
                                 
                                 
                                 
                                 
                                 load_game_play_start:
000234 e0e0                      	LDI ZL, 0x00
000235 e0f1                      	LDI ZH, 0x01
                                 	;oth ROW (Not displayed - dummy)
000236 ef09                      	LDI R16, MonsterNotGunPat
000237 9300 0212                 	STS 0x212, R16
000239 e10f                      	LDI R16, 0b00011111
00023a 9300 0213                 	STS 0x213, R16
00023c e100                      	LDI R16, ShipEnd
00023d 9300 0214                 	STS 0x214, R16
00023f 940e 0291                 	CALL InitScreenState
                                 
                                 	;1st ROW
000241 e10f                      	LDI R16, 0b00011111
000242 9300 0212                 	STS 0x212, R16
000244 ef09                      	LDI R16, MonsterGunPat
000245 9300 0213                 	STS 0x213, R16
000247 e000                      	LDI R16, 0b00000000
000248 9300 0214                 	STS 0x214, R16
00024a 940e 0291                 	CALL InitScreenState 
                                 
                                 	;2nd ROW
00024c e10f                      	LDI R16, 0b00011111
00024d 9300 0212                 	STS 0x212, R16
00024f e10f                      	LDI R16, 0b00011111
000250 9300 0213                 	STS 0x213, R16
000252 e000                      	LDI R16, 0b00000000
000253 9300 0214                 	STS 0x214, R16
000255 940e 0291                 	CALL InitScreenState
                                 
                                 	;3rd ROW
000257 ef09                      	LDI R16, MonsterNotGunPat
000258 9300 0212                 	STS 0x212, R16
00025a e10f                      	LDI R16, 0b00011111
00025b 9300 0213                 	STS 0x213, R16
00025d e100                      	LDI R16, ShipEnd
00025e 9300 0214                 	STS 0x214, R16
000260 940e 0291                 	CALL InitScreenState
                                 
                                 	;4th ROW
000262 ef09                      	LDI R16, MonsterGunPat
000263 9300 0212                 	STS 0x212, R16
000265 ef09                      	LDI R16, MonsterNotGunPat
000266 9300 0213                 	STS 0x213, R16
000268 e30e                      	LDI R16, ShipMiddle
000269 9300 0214                 	STS 0x214, R16
00026b 940e 0291                 	CALL InitScreenState
                                 
                                 	;5th ROW
00026d e10f                      	LDI R16, 0b00011111
00026e 9300 0212                 	STS 0x212, R16
000270 ef09                      	LDI R16, MonsterGunPat
000271 9300 0213                 	STS 0x213, R16
000273 e10f                      	LDI R16, ShipGun
000274 9300 0214                 	STS 0x214, R16
000276 940e 0291                 	CALL InitScreenState
                                 
                                 	;6th ROW
                                 	SECOND_ROW: 
000278 e10f                      	LDI R16, 0b00011111
000279 9300 0212                 	STS 0x212, R16
00027b e10f                      	LDI R16, 0b00011111
00027c 9300 0213                 	STS 0x213, R16
00027e e30e                      	LDI R16, ShipMiddle
00027f 9300 0214                 	STS 0x214, R16
000281 940e 0291                 	CALL InitScreenState
                                 
                                 	; 7th ROW
000283 ef09                      	LDI R16, MonsterNotGunPat
000284 9300 0212                 	STS 0x212, R16
000286 e10f                      	LDI R16, 0b00011111
000287 9300 0213                 	STS 0x213, R16
000289 e100                      	LDI R16, ShipEnd
00028a 9300 0214                 	STS 0x214, R16
00028c 940e 0291                 	CALL InitScreenState
                                  
00028e e0e0                      	LDI ZL, 0x00 ; Reset
00028f e0f1                      	LDI ZH, 0x01
                                 
000290 9508                      RET
                                 
                                 InitScreenState: 
000291 9120 0212                 	LDS R18,  0x212
000293 9321                      	ST Z+, R18
                                 
000294 e020                      	LDI R18, 0x00
000295 e014                      	LDI R17, 4
                                 
                                 	LOOP_BUFF: 
000296 9321                      		ST Z+, R18
000297 951a                      		DEC R17
000298 f7e9                      	BRNE LOOP_BUFF
000299 9120 0213                 	LDS R18, 0x213
00029b 9321                      	ST Z+, R18
00029c e020                      	LDI R18, 0x00
00029d e013                      	LDI R17, 3
                                 	LOOP_BUFF1_: 
00029e 9321                      		ST Z+, R18
00029f 951a                      		DEC R17
0002a0 f7e9                      	BRNE LOOP_BUFF1_
0002a1 9120 0214                 	LDS R18, 0x214
0002a3 9321                      	ST Z+, R18
0002a4 9508                      RET ; Return to caller
                                 
                                 ;keyboard part
0002a5 ef00                      CONTEXT_SWITCH: LDI R16, 0xF0  ; Copy 0b1111 0000 to R16
0002a6 e01f                      			    LDI R17, 0x0F  ; Copy 0b0000 1111 to R17
                                 
                                 
                                 
0002a7 b90b                      			    OUT PORTD, R16 ; Set PORTD to R16
0002a8 b91a                      	            OUT DDRD, R17  ; Set DDRD to R17  	
0002a9 9508                      			    RET ; Return to caller
                                 ;keyboard part
0002aa e00f                      RESET_CONTEXT: LDI R16, 0x0F ; keyboard set
0002ab ef10                      			   LDI R17, 0xF0
                                 
0002ac b90b                      			   OUT PORTD, R16
0002ad b91a                      		       OUT DDRD, R17
0002ae 9508                      			   RET ; Return to caller
                                 
                                 
                                 ;Funtion to shift column data on for a pattern
                                 execute_col_loop:
0002af 3053                      	CPI STATE_MACHINE, 0x03 ;Joystick went off - on - off 
0002b0 f111                      	BREQ screenbuff_display ; game display
0002b1 3054                      	CPI STATE_MACHINE, 0x04 ;Joystick went off - on - off 
0002b2 f101                      	BREQ screenbuff_display ; game display
                                 	;CPI STATE_MACHINE, 0x05 ;Joystick went off - on - off 
                                 	;BREQ screenbuff_display ; game display
                                 	;CPI STATE_MACHINE, 0x06 ;Joystick went off - on - off 
                                 	;BREQ screenbuff_display ; game display
                                 	
                                 	;else display charbuffer:
                                 	charcuffer_display:
                                 		;increment Z till RowIndex for a character is reached
0002b3 2f17                      		MOV Local_index1, RowIndex
                                 		Loop_Z:
0002b4 9135                      			LPM PAT_COL1, Z+
0002b5 951a                      			DEC Local_index1
0002b6 f7e9                      		BRNE Loop_Z
                                 
0002b7 e120                      	 	LDI Local_index2, 16  ;index to shift screen 16 times for every screen block
                                 		Col_loop2:		
                                 			;shift 5bit Column pattern into Shift Reg
0002b8 e015                      			LDI Local_index1, 5	
                                 			Col_loop3: 
0002b9 982b                      				CBI PORTB,3 ;pixel_off
0002ba fd30                      				SBRC PAT_COL1, 0 ;pixel turned off if pattern's LSB is 0
0002bb 9a2b                      				SBI PORTB,3	;pixel on
0002bc 982d                      				CBI PORTB, 5 ;falling edge of shift-reg clock
0002bd 9a2d                      				SBI PORTB, 5 ;rising edge of clk
0002be 9536                      				LSR PAT_COL1 ; right shifting pattern for next bit
0002bf 951a                      				DEC Local_index1
0002c0 f7c1                      			BRNE Col_loop3
                                 
                                 			;Increment Z pointer by 8 to point to same row in next character
0002c1 e018                      			LDI Local_index1,8
                                 			Loop_Z2:
0002c2 9135                      				LPM PAT_COL1,Z+
0002c3 951a                      				DEC Local_index1
0002c4 f7e9                      			BRNE Loop_Z2
0002c5 952a                      			DEC Local_index2
0002c6 f789                      		BRNE col_loop2
                                 
                                 		;Restoring Z pointer address before next row access
                                 
0002c7 e120                      		LDI Local_index2, 16  ;index to shift screen 16 times for every screen block
                                 		rev_loop1:
                                 			;Decrement Z pointer by 8 to point to same row in next character
0002c8 e018                      			LDI Local_index1,8
                                 			rev_loop2:
0002c9 9132                      				LD PAT_COL1, -Z
0002ca 951a                      				DEC Local_index1
0002cb f7e9                      			BRNE rev_loop2
0002cc 952a                      			DEC Local_index2
0002cd f7d1                      		BRNE rev_loop1
                                 	
                                 		;increment Z till RowIndex for a character is reached
0002ce 2f17                      		MOV Local_index1, RowIndex
                                 		rev_loop3:
0002cf 9132                      			LD PAT_COL1, -Z
0002d0 951a                      			DEC Local_index1
0002d1 f7e9                      		BRNE rev_loop3
0002d2 9508                      	RET
                                 
                                 	screenbuff_display:
0002d3 e02a                      		LDI Local_index2, 10  ;index to shift screen 80 times for every screen block
                                 		Col_loop4:
                                 			;shift 5bit Column pattern into Shift Reg
0002d4 8130                      			LD PAT_COL1, Z
0002d5 e018                      			LDI Local_index1, 8	
                                 			Col_loop5: 
0002d6 982b                      				CBI PORTB,3 ;pixel_off
0002d7 fd30                      				SBRC PAT_COL1, 0 ;pixel turned off if pattern's LSB is 0
0002d8 9a2b                      				SBI PORTB,3	;pixel on
0002d9 982d                      				CBI PORTB, 5 ;falling edge of shift-reg clock
0002da 9a2d                      				SBI PORTB, 5 ;rising edge of clk
0002db 9536                      				LSR PAT_COL1 ; right shifting pattern for next bit
0002dc 951a                      				DEC Local_index1
0002dd f7c1                      			BRNE Col_loop5
0002de 9131                      			LD PAT_COL1, Z+	
0002df 952a                      			DEC Local_index2
0002e0 f799                      		BRNE Col_loop4
0002e1 9508                      	RET
                                 
                                 ;function to shift row data for a pattern
                                 execute_row_loop:
0002e2 e018                      	LDI Local_index1, 0x08 
0002e3 9488                      	CLC
                                 	LoopRow:
0002e4 982b                      		CBI PORTB, 3 
0002e5 1717                      		CP Local_index1,RowIndex
0002e6 f409                      		BRNE Row_not_on
0002e7 9a2b                      		SBI PORTB, 3 
                                 		Row_not_on: 
0002e8 982d                      			CBI PORTB, 5 
0002e9 9a2d                      			SBI PORTB, 5
0002ea 951a                      		DEC Local_index1 
0002eb f7c1                      	BRNE LoopRow
0002ec 9508                      RET
                                 
                                 ;function to latch shift register data to output
                                 latch_shift_reg:
0002ed 982c                      	CBI PORTB, 4
0002ee 9a2c                      	SBI PORTB, 4 
0002ef ef1f                      	LDI Local_index1, 255 ;index for delay loop
                                 	delay_loop:
0002f0 0000                      		NOP
0002f1 951a                      		DEC Local_index1
0002f2 f7e9                      	BRNE delay_loop
0002f3 982c                      	CBI PORTB, 4
0002f4 9508                      RET
                                 
0002f5 e0ea                      SHIFT_Z: LDI ZL, 0x0A
0002f6 e0f1                      		   LDI ZH, 0x01
0002f7 95e3                      		    INC_LOOP: INC ZL
0002f8 954a                      					DEC R20
0002f9 f7e9                      					BRNE INC_LOOP
                                 			
0002fa 9508                      		    RET
                                 
0002fb e614                      BULLET_DELAY: LDI Local_index1, 100
0002fc 0000                      	BLOOP:  NOP
0002fd efcf                      	LDI R28, 0xFF
0002fe 0000                      		BNESTED: NOP
0002ff 95ca                      				DEC R28
000300 f7e9                      				BRNE BNESTED
000301 951a                      	DEC Local_index1
000302 f7c9                      	BRNE BLOOP
000303 9508                      	RET
                                 
000304 e518                      DISPLAY_INTERMEDIATE_STATE: LDI R17, 88
000305 982b                      				   CBI PORTB, 3
000306 982d                      				   SEND_DATA: CBI PORTB, 5
000307 9a2d                      							  SBI PORTB, 5
000308 951a                      							  DEC R17
000309 f7e1                      							  BRNE SEND_DATA
00030a 982c                      					CBI PORTB, 4
00030b 9a2c                      					SBI PORTB, 4
00030c 982c                      					CBI PORTB, 4
                                 					
                                 				  
00030d 9508                      					RET
00030e 93ef                      PUSH_PROTECT: PUSH ZL
00030f 93ff                      			  PUSH ZH
000310 922f                      			  PUSH R2
000311 932f                      			  PUSH R18
000312 934f                      			  PUSH R20
000313 b62f                      			  IN R2, SREG
                                 
000314 be2f                      POP_PROTECT: OUT SREG, R2
000315 914f                      			 POP R20
000316 912f                      			 POP R18
000317 902f                      			 POP R2
000318 91ff                      			 POP ZH
000319 91ef                      			 POP ZL
                                 
00031a ef0f                      TimerInterrupt: LDI R16, 0xFF
00031b ed1f                      				LDI R17, 0xDF
00031c 9300 0084                 				STS TCNT1L,R16
00031e 9310 0085                 				STS TCNT1H,R17
                                 				
000320 932f                      				PUSH R18
                                 
000321 e021                      				LDI R18, 1
000322 9320 0380                 				STS 0x0380, R18
                                 
000324 912f                      				POP R18
000325 9518                      				RETI
                                 
000326 e011                      Timer0interrupt: LDI R17, 1
000327 bd16                      				 OUT TCNT0,R17
                                 ;				 ;CALL DISPLAY_INTERMEDIATE_STATE
000328 940e 00ba                 				 CALL UPDATE_BULLETSTATE
                                 ;				 ;CALL CHECK_STATE
                                 ;				 LDI ZH,0x01
                                 ;				 LDI ZL,0x00
00032a 9842                      				 CBI PORTC, 2
00032b 9518                      				 RETI
                                 
                                 JoystickInterrupt: ;CBI PORTC, 2
00032c ff60                      				   SBRS LAST_JOY, 0 ;skip state change if previous JS state was same as on
00032d 9553                      				   INC STATE_MACHINE
00032e e061                      				   LDI LAST_JOY,0x01
00032f e000                      				   LDI R16, 0x00
000330 bb0b                      				   OUT PCIFR, R16 ; reset
000331 9518                      				   RETI
                                 
                                 ;character memory table
                                 ;Stores >START!
                                 ;		  ----
                                 CharTable1:
000332 0000
000333 0000
000334 0000
000335 0000                      .DB 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000 ;Nothing
000336 0000
000337 0000
000338 0000
000339 0000                      .DB 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000 ;Nothing
00033a 0000
00033b 1f00
00033c 0000
00033d 0000                      .DB 0b00000, 0b00000, 0b00000, 0b11111, 0b00000, 0b00000, 0b00000, 0b00000 ;line
00033e 0000
00033f 1f00
000340 0000
000341 0000                      .DB 0b00000, 0b00000, 0b00000, 0b11111, 0b00000, 0b00000, 0b00000, 0b00000 ;line
000342 0000
000343 1f00
000344 0000
000345 0000                      .DB 0b00000, 0b00000, 0b00000, 0b11111, 0b00000, 0b00000, 0b00000, 0b00000 ;line
000346 0000
000347 1f00
000348 0000
000349 0000                      .DB 0b00000, 0b00000, 0b00000, 0b11111, 0b00000, 0b00000, 0b00000, 0b00000 ;line
00034a 0000
00034b 0000
00034c 0000
00034d 0000                      .DB 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000 ;Nothing
00034e 0000
00034f 0000
000350 0000
000351 0000                      .DB 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000 ;Nothing
000352 0000
000353 0000
000354 0000
000355 0000                      .DB 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000 ;Nothing
000356 0404
000357 0404
000358 0004
000359 0004                      .DB 0b00100, 0b00100, 0b00100, 0b00100, 0b00100, 0b00000, 0b00100, 0b00000 ;exclamation
00035a 040e
00035b 0404
00035c 0404
00035d 0004                      .DB 0b01110, 0b00100, 0b00100, 0b00100, 0b00100, 0b00100, 0b00100, 0b00000 ;T
00035e 090e
00035f 0e09
000360 0a0c
000361 0009                      .DB 0b01110, 0b01001, 0b01001, 0b01110, 0b01100, 0b01010, 0b01001, 0b00000 ;R
000362 0906
000363 0f09
000364 0909
000365 0009                      .DB 0b00110, 0b01001, 0b01001, 0b01111, 0b01001, 0b01001, 0b01001, 0b00000 ;A
000366 040e
000367 0404
000368 0404
000369 0004                      .DB 0b01110, 0b00100, 0b00100, 0b00100, 0b00100, 0b00100, 0b00100, 0b00000 ;T
00036a 0807
00036b 0608
00036c 0101
00036d 000e                      .DB 0b00111, 0b01000, 0b01000, 0b00110, 0b00001, 0b00001, 0b01110, 0b00000 ;S
00036e 0400
00036f 0102
000370 0402
000371 0000                      .DB 0b00000, 0b00100, 0b00010, 0b00001, 0b00010, 0b00100, 0b00000, 0b00000 ;small arrow
000372 0000
000373 0000
000374 0000
000375 0000                      .DB 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000 ;Nothing
                                 
                                 CharTable2:
000376 090e
000377 0e09
000378 0a0c
000379 0009                      .DB 0b01110, 0b01001, 0b01001, 0b01110, 0b01100, 0b01010, 0b01001, 0b00000 ;R
00037a 080f
00037b 0f08
00037c 0808
00037d 000f                      .DB 0b01111, 0b01000, 0b01000, 0b01111, 0b01000, 0b01000, 0b01111, 0b00000 ;E
00037e 1111
00037f 1111
000380 0a11
000381 0004                      .DB 0b10001, 0b10001, 0b10001, 0b10001, 0b10001, 0b01010, 0b00100, 0b00000 ;V
000382 0906
000383 0909
000384 0909
000385 0006                      .DB 0b00110, 0b01001, 0b01001, 0b01001, 0b01001, 0b01001, 0b00110, 0b00000 ;0
000386 0000
000387 0000
000388 0000
000389 0000                      .DB 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000 ;Nothing
00038a 0400
00038b 0102
00038c 0402
00038d 0000                      .DB 0b00000, 0b00100, 0b00010, 0b00001, 0b00010, 0b00100, 0b00000, 0b00000 ;small arrow
00038e 0400
00038f 0102
000390 0402
000391 0000                      .DB 0b00000, 0b00100, 0b00010, 0b00001, 0b00010, 0b00100, 0b00000, 0b00000 ;small arrow
000392 0000
000393 0000
000394 0000
000395 0000                      .DB 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000 ;Nothing
000396 0000
000397 0000
000398 0000
000399 0000                      .DB 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000 ;Nothing
00039a 0400
00039b 0102
00039c 0402
00039d 0000                      .DB 0b00000, 0b00100, 0b00010, 0b00001, 0b00010, 0b00100, 0b00000, 0b00000 ;small arrow
00039e 0400
00039f 0102
0003a0 0402
0003a1 0000                      .DB 0b00000, 0b00100, 0b00010, 0b00001, 0b00010, 0b00100, 0b00000, 0b00000 ;small arrow
0003a2 0000
0003a3 0000
0003a4 0000
0003a5 0000                      .DB 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000 ;Nothing
0003a6 080f
0003a7 0f08
0003a8 0808
0003a9 000f                      .DB 0b01111, 0b01000, 0b01000, 0b01111, 0b01000, 0b01000, 0b01111, 0b00000 ;E
0003aa 1b11
0003ab 1115
0003ac 1111
0003ad 0011                      .DB 0b10001, 0b11011, 0b10101, 0b10001, 0b10001, 0b10001, 0b10001, 0b00000 ;M
0003ae 0906
0003af 0f09
0003b0 0909
0003b1 0009                      .DB 0b00110, 0b01001, 0b01001, 0b01111, 0b01001, 0b01001, 0b01001, 0b00000 ;A
0003b2 0906
0003b3 0b08
0003b4 0909
0003b5 0006                      .DB 0b00110, 0b01001, 0b01000, 0b01011, 0b01001, 0b01001, 0b00110, 0b00000 ;G
                                 
                                 CharTable3:
0003b6 0400
0003b7 0102
0003b8 0402
0003b9 0000                      .DB 0b00000, 0b00100, 0b00010, 0b00001, 0b00010, 0b00100, 0b00000, 0b00000 ;small arrow
0003ba 0400
0003bb 0102
0003bc 0402
0003bd 0000                      .DB 0b00000, 0b00100, 0b00010, 0b00001, 0b00010, 0b00100, 0b00000, 0b00000 ;small arrow
0003be 080f
0003bf 0f08
0003c0 0808
0003c1 000f                      .DB 0b01111, 0b01000, 0b01000, 0b01111, 0b01000, 0b01000, 0b01111, 0b00000 ;E
0003c2 1b11
0003c3 1115
0003c4 1111
0003c5 0011                      .DB 0b10001, 0b11011, 0b10101, 0b10001, 0b10001, 0b10001, 0b10001, 0b00000 ;M
0003c6 0906
0003c7 0f09
0003c8 0909
0003c9 0009                      .DB 0b00110, 0b01001, 0b01001, 0b01111, 0b01001, 0b01001, 0b01001, 0b00000 ;A
0003ca 0906
0003cb 0b08
0003cc 0909
0003cd 0006                      .DB 0b00110, 0b01001, 0b01000, 0b01011, 0b01001, 0b01001, 0b00110, 0b00000 ;G
0003ce 0400
0003cf 0102
0003d0 0402
0003d1 0000                      .DB 0b00000, 0b00100, 0b00010, 0b00001, 0b00010, 0b00100, 0b00000, 0b00000 ;small arrow
0003d2 0400
0003d3 0102
0003d4 0402
0003d5 0000                      .DB 0b00000, 0b00100, 0b00010, 0b00001, 0b00010, 0b00100, 0b00000, 0b00000 ;small arrow
0003d6 0400
0003d7 0102
0003d8 0402
0003d9 0000                      .DB 0b00000, 0b00100, 0b00010, 0b00001, 0b00010, 0b00100, 0b00000, 0b00000 ;small arrow
0003da 0400
0003db 0102
0003dc 0402
0003dd 0000                      .DB 0b00000, 0b00100, 0b00010, 0b00001, 0b00010, 0b00100, 0b00000, 0b00000 ;small arrow
0003de 080f
0003df 0f08
0003e0 0808
0003e1 000f                      .DB 0b01111, 0b01000, 0b01000, 0b01111, 0b01000, 0b01000, 0b01111, 0b00000 ;E
0003e2 1b11
0003e3 1115
0003e4 1111
0003e5 0011                      .DB 0b10001, 0b11011, 0b10101, 0b10001, 0b10001, 0b10001, 0b10001, 0b00000 ;M
0003e6 0906
0003e7 0f09
0003e8 0909
0003e9 0009                      .DB 0b00110, 0b01001, 0b01001, 0b01111, 0b01001, 0b01001, 0b01001, 0b00000 ;A
0003ea 0906
0003eb 0b08
0003ec 0909
0003ed 0006                      .DB 0b00110, 0b01001, 0b01000, 0b01011, 0b01001, 0b01001, 0b00110, 0b00000 ;G
0003ee 0400
0003ef 0102
0003f0 0402
0003f1 0000                      .DB 0b00000, 0b00100, 0b00010, 0b00001, 0b00010, 0b00100, 0b00000, 0b00000 ;small arrow
0003f2 0400
0003f3 0102
0003f4 0402
0003f5 0000                      .DB 0b00000, 0b00100, 0b00010, 0b00001, 0b00010, 0b00100, 0b00000, 0b00000 ;small arrow
0003f6 0000
0003f7 0000
0003f8 0000
0003f9 0000                      .DB 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000 ;Nothing
0003fa 0000
0003fb 0000
0003fc 0000


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega328P" register use summary:
x  :  12 y  :  12 z  :  83 r0 :   0 r1 :   0 r2 :  18 r3 :   0 r4 :   0 
r5 :   0 r6 :   0 r7 :   0 r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 
r13:   0 r14:   0 r15:   0 r16: 118 r17:  60 r18:  53 r19:  16 r20:  73 
r21:  14 r22:   4 r23:   5 r24:  10 r25:   9 r26:  21 r27:   3 r28:   8 
r29:   2 r30:  80 r31:  18 
Registers used: 20 out of 35 (57.1%)

"ATmega328P" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   0 add   :   0 adiw  :   0 and   :   0 
andi  :   0 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   5 brcs  :   1 break :   0 breq  :  26 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 brlt  :   0 brmi  :   0 
brne  :  22 brpl  :   0 brsh  :   0 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :  45 cbi   :  14 cbr   :   0 
clc   :   3 clh   :   0 cli   :   0 cln   :   0 clr   :   0 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :   1 cpc   :   0 
cpi   :  27 cpse  :   0 dec   :  22 eor   :   0 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :   0 ijmp  :   0 in    :   6 inc   :   8 jmp   :   0 
ld    :  42 ldd   :  11 ldi   : 204 lds   :   5 lpm   :   2 lsl   :   3 
lsr   :   5 mov   :   6 movw  :   0 mul   :   0 muls  :   0 mulsu :   0 
neg   :   0 nop   :   3 or    :   6 ori   :   0 out   :  14 pop   :  22 
push  :  18 rcall :  14 ret   :  37 reti  :   4 rjmp  :  10 rol   :   0 
ror   :   0 sbc   :   0 sbci  :   0 sbi   :  16 sbic  :   0 sbis  :   0 
sbiw  :   0 sbr   :   0 sbrc  :   2 sbrs  :   1 sec   :   0 seh   :   0 
sei   :   1 sen   :   0 ser   :   0 ses   :   0 set   :   0 sev   :   0 
sez   :   0 sleep :   0 spm   :   0 st    :  52 std   :   0 sts   :  40 
sub   :   1 subi  :   0 swap  :   0 tst   :   0 wdr   :   0 
Instructions used: 36 out of 113 (31.9%)

"ATmega328P" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0007fc   1578    408   1986   32768   6.1%
[.dseg] 0x000100 0x000100      0      0      0    2048   0.0%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 0 warnings
