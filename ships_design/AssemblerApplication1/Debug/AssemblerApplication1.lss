
AVRASM ver. 2.2.8  C:\Users\Deeksha\Documents\git_trials\Assembly_codes\aimen_codes\ships_design\AssemblerApplication1\main.asm Sun May 08 00:29:32 2022

[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.6.364\avrasm\inc\m328Pdef.inc'
C:\Users\Deeksha\Documents\git_trials\Assembly_codes\aimen_codes\ships_design\AssemblerApplication1\main.asm(10): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.6.364\avrasm\inc\m328pdef.inc'
[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.6.364\avrasm\inc\m328Pdef.inc'
C:\Users\Deeksha\Documents\git_trials\Assembly_codes\aimen_codes\ships_design\AssemblerApplication1\main.asm(10): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.6.364\avrasm\inc\m328pdef.inc'
                                 
                                 ;
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega328P.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m328Pdef.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega328P
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega328P
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M328PDEF_INC_
                                 #define _M328PDEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega328P
                                 #pragma AVRPART ADMIN PART_NAME ATmega328P
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x95
                                 .equ	SIGNATURE_002	= 0x0f
                                 
                                 #pragma AVRPART CORE CORE_VERSION V2E
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	UDR0	= 0xc6	; MEMORY MAPPED
                                 .equ	UBRR0L	= 0xc4	; MEMORY MAPPED
                                 .equ	UBRR0H	= 0xc5	; MEMORY MAPPED
                                 .equ	UCSR0C	= 0xc2	; MEMORY MAPPED
                                 .equ	UCSR0B	= 0xc1	; MEMORY MAPPED
                                 .equ	UCSR0A	= 0xc0	; MEMORY MAPPED
                                 .equ	TWAMR	= 0xbd	; MEMORY MAPPED
                                 .equ	TWCR	= 0xbc	; MEMORY MAPPED
                                 .equ	TWDR	= 0xbb	; MEMORY MAPPED
                                 .equ	TWAR	= 0xba	; MEMORY MAPPED
                                 .equ	TWSR	= 0xb9	; MEMORY MAPPED
                                 .equ	TWBR	= 0xb8	; MEMORY MAPPED
                                 .equ	ASSR	= 0xb6	; MEMORY MAPPED
                                 .equ	OCR2B	= 0xb4	; MEMORY MAPPED
                                 .equ	OCR2A	= 0xb3	; MEMORY MAPPED
                                 .equ	TCNT2	= 0xb2	; MEMORY MAPPED
                                 .equ	TCCR2B	= 0xb1	; MEMORY MAPPED
                                 .equ	TCCR2A	= 0xb0	; MEMORY MAPPED
                                 .equ	OCR1BL	= 0x8a	; MEMORY MAPPED
                                 .equ	OCR1BH	= 0x8b	; MEMORY MAPPED
                                 .equ	OCR1AL	= 0x88	; MEMORY MAPPED
                                 .equ	OCR1AH	= 0x89	; MEMORY MAPPED
                                 .equ	ICR1L	= 0x86	; MEMORY MAPPED
                                 .equ	ICR1H	= 0x87	; MEMORY MAPPED
                                 .equ	TCNT1L	= 0x84	; MEMORY MAPPED
                                 .equ	TCNT1H	= 0x85	; MEMORY MAPPED
                                 .equ	TCCR1C	= 0x82	; MEMORY MAPPED
                                 .equ	TCCR1B	= 0x81	; MEMORY MAPPED
                                 .equ	TCCR1A	= 0x80	; MEMORY MAPPED
                                 .equ	DIDR1	= 0x7f	; MEMORY MAPPED
                                 .equ	DIDR0	= 0x7e	; MEMORY MAPPED
                                 .equ	ADMUX	= 0x7c	; MEMORY MAPPED
                                 .equ	ADCSRB	= 0x7b	; MEMORY MAPPED
                                 .equ	ADCSRA	= 0x7a	; MEMORY MAPPED
                                 .equ	ADCH	= 0x79	; MEMORY MAPPED
                                 .equ	ADCL	= 0x78	; MEMORY MAPPED
                                 .equ	TIMSK2	= 0x70	; MEMORY MAPPED
                                 .equ	TIMSK1	= 0x6f	; MEMORY MAPPED
                                 .equ	TIMSK0	= 0x6e	; MEMORY MAPPED
                                 .equ	PCMSK1	= 0x6c	; MEMORY MAPPED
                                 .equ	PCMSK2	= 0x6d	; MEMORY MAPPED
                                 .equ	PCMSK0	= 0x6b	; MEMORY MAPPED
                                 .equ	EICRA	= 0x69	; MEMORY MAPPED
                                 .equ	PCICR	= 0x68	; MEMORY MAPPED
                                 .equ	OSCCAL	= 0x66	; MEMORY MAPPED
                                 .equ	PRR	= 0x64	; MEMORY MAPPED
                                 .equ	CLKPR	= 0x61	; MEMORY MAPPED
                                 .equ	WDTCSR	= 0x60	; MEMORY MAPPED
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	SPMCSR	= 0x37
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUSR	= 0x34
                                 .equ	SMCR	= 0x33
                                 .equ	ACSR	= 0x30
                                 .equ	SPDR	= 0x2e
                                 .equ	SPSR	= 0x2d
                                 .equ	SPCR	= 0x2c
                                 .equ	GPIOR2	= 0x2b
                                 .equ	GPIOR1	= 0x2a
                                 .equ	OCR0B	= 0x28
                                 .equ	OCR0A	= 0x27
                                 .equ	TCNT0	= 0x26
                                 .equ	TCCR0B	= 0x25
                                 .equ	TCCR0A	= 0x24
                                 .equ	GTCCR	= 0x23
                                 .equ	EEARH	= 0x22
                                 .equ	EEARL	= 0x21
                                 .equ	EEDR	= 0x20
                                 .equ	EECR	= 0x1f
                                 .equ	GPIOR0	= 0x1e
                                 .equ	EIMSK	= 0x1d
                                 .equ	EIFR	= 0x1c
                                 .equ	PCIFR	= 0x1b
                                 .equ	TIFR2	= 0x17
                                 .equ	TIFR1	= 0x16
                                 .equ	TIFR0	= 0x15
                                 .equ	PORTD	= 0x0b
                                 .equ	DDRD	= 0x0a
                                 .equ	PIND	= 0x09
                                 .equ	PORTC	= 0x08
                                 .equ	DDRC	= 0x07
                                 .equ	PINC	= 0x06
                                 .equ	PORTB	= 0x05
                                 .equ	DDRB	= 0x04
                                 .equ	PINB	= 0x03
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** USART0 ***********************
                                 ; UDR0 - USART I/O Data Register
                                 .equ	UDR0_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR0_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR0_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR0_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR0_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR0_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR0_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR0_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR0A - USART Control and Status Register A
                                 .equ	MPCM0	= 0	; Multi-processor Communication Mode
                                 .equ	U2X0	= 1	; Double the USART transmission speed
                                 .equ	UPE0	= 2	; Parity Error
                                 .equ	DOR0	= 3	; Data overRun
                                 .equ	FE0	= 4	; Framing Error
                                 .equ	UDRE0	= 5	; USART Data Register Empty
                                 .equ	TXC0	= 6	; USART Transmitt Complete
                                 .equ	RXC0	= 7	; USART Receive Complete
                                 
                                 ; UCSR0B - USART Control and Status Register B
                                 .equ	TXB80	= 0	; Transmit Data Bit 8
                                 .equ	RXB80	= 1	; Receive Data Bit 8
                                 .equ	UCSZ02	= 2	; Character Size
                                 .equ	TXEN0	= 3	; Transmitter Enable
                                 .equ	RXEN0	= 4	; Receiver Enable
                                 .equ	UDRIE0	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE0	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE0	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR0C - USART Control and Status Register C
                                 .equ	UCPOL0	= 0	; Clock Polarity
                                 .equ	UCSZ00	= 1	; Character Size
                                 .equ	UCPHA0	= UCSZ00	; For compatibility
                                 .equ	UCSZ01	= 2	; Character Size
                                 .equ	UDORD0	= UCSZ01	; For compatibility
                                 .equ	USBS0	= 3	; Stop Bit Select
                                 .equ	UPM00	= 4	; Parity Mode Bit 0
                                 .equ	UPM01	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL00	= 6	; USART Mode Select
                                 .equ	UMSEL0	= UMSEL00	; For compatibility
                                 .equ	UMSEL01	= 7	; USART Mode Select
                                 .equ	UMSEL1	= UMSEL01	; For compatibility
                                 
                                 ; UBRR0H - USART Baud Rate Register High Byte
                                 .equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR0L - USART Baud Rate Register Low Byte
                                 .equ	_UBRR0	= 0	; USART Baud Rate Register bit 0
                                 .equ	_UBRR1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** TWI **************************
                                 ; TWAMR - TWI (Slave) Address Mask Register
                                 .equ	TWAM0	= 1	; 
                                 .equ	TWAMR0	= TWAM0	; For compatibility
                                 .equ	TWAM1	= 2	; 
                                 .equ	TWAMR1	= TWAM1	; For compatibility
                                 .equ	TWAM2	= 3	; 
                                 .equ	TWAMR2	= TWAM2	; For compatibility
                                 .equ	TWAM3	= 4	; 
                                 .equ	TWAMR3	= TWAM3	; For compatibility
                                 .equ	TWAM4	= 5	; 
                                 .equ	TWAMR4	= TWAM4	; For compatibility
                                 .equ	TWAM5	= 6	; 
                                 .equ	TWAMR5	= TWAM5	; For compatibility
                                 .equ	TWAM6	= 7	; 
                                 .equ	TWAMR6	= TWAM6	; For compatibility
                                 
                                 ; TWBR - TWI Bit Rate register
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	TWPS0	= 0	; TWI Prescaler
                                 .equ	TWPS1	= 1	; TWI Prescaler
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	TWS7	= 7	; TWI Status
                                 
                                 ; TWDR - TWI Data register
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK1 - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE1	= 0	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1A	= 1	; Timer/Counter1 Output CompareA Match Interrupt Enable
                                 .equ	OCIE1B	= 2	; Timer/Counter1 Output CompareB Match Interrupt Enable
                                 .equ	ICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR1 - Timer/Counter Interrupt Flag register
                                 .equ	TOV1	= 0	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1A	= 1	; Output Compare Flag 1A
                                 .equ	OCF1B	= 2	; Output Compare Flag 1B
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode
                                 .equ	WGM11	= 1	; Waveform Generation Mode
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Comparet Ouput Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 ; TCCR1C - Timer/Counter1 Control Register C
                                 .equ	FOC1B	= 6	; 
                                 .equ	FOC1A	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 .equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TIMSK2 - Timer/Counter Interrupt Mask register
                                 .equ	TOIE2	= 0	; Timer/Counter2 Overflow Interrupt Enable
                                 .equ	TOIE2A	= TOIE2	; For compatibility
                                 .equ	OCIE2A	= 1	; Timer/Counter2 Output Compare Match A Interrupt Enable
                                 .equ	OCIE2B	= 2	; Timer/Counter2 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR2 - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 0	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2A	= 1	; Output Compare Flag 2A
                                 .equ	OCF2B	= 2	; Output Compare Flag 2B
                                 
                                 ; TCCR2A - Timer/Counter2 Control Register A
                                 .equ	WGM20	= 0	; Waveform Genration Mode
                                 .equ	WGM21	= 1	; Waveform Genration Mode
                                 .equ	COM2B0	= 4	; Compare Output Mode bit 0
                                 .equ	COM2B1	= 5	; Compare Output Mode bit 1
                                 .equ	COM2A0	= 6	; Compare Output Mode bit 1
                                 .equ	COM2A1	= 7	; Compare Output Mode bit 1
                                 
                                 ; TCCR2B - Timer/Counter2 Control Register B
                                 .equ	CS20	= 0	; Clock Select bit 0
                                 .equ	CS21	= 1	; Clock Select bit 1
                                 .equ	CS22	= 2	; Clock Select bit 2
                                 .equ	WGM22	= 3	; Waveform Generation Mode
                                 .equ	FOC2B	= 6	; Force Output Compare B
                                 .equ	FOC2A	= 7	; Force Output Compare A
                                 
                                 ; TCNT2 - Timer/Counter2
                                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                                 
                                 ; OCR2A - Timer/Counter2 Output Compare Register A
                                 .equ	OCR2A_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2A_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2A_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2A_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2A_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2A_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2A_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2A_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; OCR2B - Timer/Counter2 Output Compare Register B
                                 .equ	OCR2B_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2B_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2B_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2B_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2B_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2B_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2B_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2B_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; ASSR - Asynchronous Status Register
                                 .equ	TCR2BUB	= 0	; Timer/Counter Control Register2 Update Busy
                                 .equ	TCR2AUB	= 1	; Timer/Counter Control Register2 Update Busy
                                 .equ	OCR2BUB	= 2	; Output Compare Register 2 Update Busy
                                 .equ	OCR2AUB	= 3	; Output Compare Register2 Update Busy
                                 .equ	TCN2UB	= 4	; Timer/Counter2 Update Busy
                                 .equ	AS2	= 5	; Asynchronous Timer/Counter2
                                 .equ	EXCLK	= 6	; Enable External Clock Input
                                 
                                 ; GTCCR - General Timer Counter Control register
                                 .equ	PSRASY	= 1	; Prescaler Reset Timer/Counter2
                                 .equ	PSR2	= PSRASY	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register A
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADATE	= 5	; ADC  Auto Trigger Enable
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCSRB - The ADC Control and Status register B
                                 .equ	ADTS0	= 0	; ADC Auto Trigger Source bit 0
                                 .equ	ADTS1	= 1	; ADC Auto Trigger Source bit 1
                                 .equ	ADTS2	= 2	; ADC Auto Trigger Source bit 2
                                 .equ	ACME	= 6	; 
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 ; DIDR0 - Digital Input Disable Register
                                 .equ	ADC0D	= 0	; 
                                 .equ	ADC1D	= 1	; 
                                 .equ	ADC2D	= 2	; 
                                 .equ	ADC3D	= 3	; 
                                 .equ	ADC4D	= 4	; 
                                 .equ	ADC5D	= 5	; 
                                 
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 ; DIDR1 - Digital Input Disable Register 1
                                 .equ	AIN0D	= 0	; AIN0 Digital Input Disable
                                 .equ	AIN1D	= 1	; AIN1 Digital Input Disable
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TIMSK0 - Timer/Counter0 Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0A	= 1	; Timer/Counter0 Output Compare Match A Interrupt Enable
                                 .equ	OCIE0B	= 2	; Timer/Counter0 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR0 - Timer/Counter0 Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0A	= 1	; Timer/Counter0 Output Compare Flag 0A
                                 .equ	OCF0B	= 2	; Timer/Counter0 Output Compare Flag 0B
                                 
                                 ; TCCR0A - Timer/Counter  Control Register A
                                 .equ	WGM00	= 0	; Waveform Generation Mode
                                 .equ	WGM01	= 1	; Waveform Generation Mode
                                 .equ	COM0B0	= 4	; Compare Output Mode, Fast PWm
                                 .equ	COM0B1	= 5	; Compare Output Mode, Fast PWm
                                 .equ	COM0A0	= 6	; Compare Output Mode, Phase Correct PWM Mode
                                 .equ	COM0A1	= 7	; Compare Output Mode, Phase Correct PWM Mode
                                 
                                 ; TCCR0B - Timer/Counter Control Register B
                                 .equ	CS00	= 0	; Clock Select
                                 .equ	CS01	= 1	; Clock Select
                                 .equ	CS02	= 2	; Clock Select
                                 .equ	WGM02	= 3	; 
                                 .equ	FOC0B	= 6	; Force Output Compare B
                                 .equ	FOC0A	= 7	; Force Output Compare A
                                 
                                 ; TCNT0 - Timer/Counter0
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0A - Timer/Counter0 Output Compare Register
                                 .equ	OCR0A_0	= 0	; 
                                 .equ	OCR0A_1	= 1	; 
                                 .equ	OCR0A_2	= 2	; 
                                 .equ	OCR0A_3	= 3	; 
                                 .equ	OCR0A_4	= 4	; 
                                 .equ	OCR0A_5	= 5	; 
                                 .equ	OCR0A_6	= 6	; 
                                 .equ	OCR0A_7	= 7	; 
                                 
                                 ; OCR0B - Timer/Counter0 Output Compare Register
                                 .equ	OCR0B_0	= 0	; 
                                 .equ	OCR0B_1	= 1	; 
                                 .equ	OCR0B_2	= 2	; 
                                 .equ	OCR0B_3	= 3	; 
                                 .equ	OCR0B_4	= 4	; 
                                 .equ	OCR0B_5	= 5	; 
                                 .equ	OCR0B_6	= 6	; 
                                 .equ	OCR0B_7	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 ;.equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	PSR10	= PSRSYNC	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; EICRA - External Interrupt Control Register
                                 .equ	ISC00	= 0	; External Interrupt Sense Control 0 Bit 0
                                 .equ	ISC01	= 1	; External Interrupt Sense Control 0 Bit 1
                                 .equ	ISC10	= 2	; External Interrupt Sense Control 1 Bit 0
                                 .equ	ISC11	= 3	; External Interrupt Sense Control 1 Bit 1
                                 
                                 ; EIMSK - External Interrupt Mask Register
                                 .equ	INT0	= 0	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 1	; External Interrupt Request 1 Enable
                                 
                                 ; EIFR - External Interrupt Flag Register
                                 .equ	INTF0	= 0	; External Interrupt Flag 0
                                 .equ	INTF1	= 1	; External Interrupt Flag 1
                                 
                                 ; PCICR - Pin Change Interrupt Control Register
                                 .equ	PCIE0	= 0	; Pin Change Interrupt Enable 0
                                 .equ	PCIE1	= 1	; Pin Change Interrupt Enable 1
                                 .equ	PCIE2	= 2	; Pin Change Interrupt Enable 2
                                 
                                 ; PCMSK2 - Pin Change Mask Register 2
                                 .equ	PCINT16	= 0	; Pin Change Enable Mask 16
                                 .equ	PCINT17	= 1	; Pin Change Enable Mask 17
                                 .equ	PCINT18	= 2	; Pin Change Enable Mask 18
                                 .equ	PCINT19	= 3	; Pin Change Enable Mask 19
                                 .equ	PCINT20	= 4	; Pin Change Enable Mask 20
                                 .equ	PCINT21	= 5	; Pin Change Enable Mask 21
                                 .equ	PCINT22	= 6	; Pin Change Enable Mask 22
                                 .equ	PCINT23	= 7	; Pin Change Enable Mask 23
                                 
                                 ; PCMSK1 - Pin Change Mask Register 1
                                 .equ	PCINT8	= 0	; Pin Change Enable Mask 8
                                 .equ	PCINT9	= 1	; Pin Change Enable Mask 9
                                 .equ	PCINT10	= 2	; Pin Change Enable Mask 10
                                 .equ	PCINT11	= 3	; Pin Change Enable Mask 11
                                 .equ	PCINT12	= 4	; Pin Change Enable Mask 12
                                 .equ	PCINT13	= 5	; Pin Change Enable Mask 13
                                 .equ	PCINT14	= 6	; Pin Change Enable Mask 14
                                 
                                 ; PCMSK0 - Pin Change Mask Register 0
                                 .equ	PCINT0	= 0	; Pin Change Enable Mask 0
                                 .equ	PCINT1	= 1	; Pin Change Enable Mask 1
                                 .equ	PCINT2	= 2	; Pin Change Enable Mask 2
                                 .equ	PCINT3	= 3	; Pin Change Enable Mask 3
                                 .equ	PCINT4	= 4	; Pin Change Enable Mask 4
                                 .equ	PCINT5	= 5	; Pin Change Enable Mask 5
                                 .equ	PCINT6	= 6	; Pin Change Enable Mask 6
                                 .equ	PCINT7	= 7	; Pin Change Enable Mask 7
                                 
                                 ; PCIFR - Pin Change Interrupt Flag Register
                                 .equ	PCIF0	= 0	; Pin Change Interrupt Flag 0
                                 .equ	PCIF1	= 1	; Pin Change Interrupt Flag 1
                                 .equ	PCIF2	= 2	; Pin Change Interrupt Flag 2
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCSR - Watchdog Timer Control Register
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDCE	= 4	; Watchdog Change Enable
                                 .equ	WDP3	= 5	; Watchdog Timer Prescaler Bit 3
                                 .equ	WDIE	= 6	; Watchdog Timeout Interrupt Enable
                                 .equ	WDIF	= 7	; Watchdog Timeout Interrupt Flag
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; CLKPR - Clock Prescale Register
                                 .equ	CLKPS0	= 0	; Clock Prescaler Select Bit 0
                                 .equ	CLKPS1	= 1	; Clock Prescaler Select Bit 1
                                 .equ	CLKPS2	= 2	; Clock Prescaler Select Bit 2
                                 .equ	CLKPS3	= 3	; Clock Prescaler Select Bit 3
                                 .equ	CLKPCE	= 7	; Clock Prescaler Change Enable
                                 
                                 ; SPMCSR - Store Program Memory Control and Status Register
                                 .equ    SELFPRGEN = 0; Added for backwards compatibility
                                 .equ	SPMEN	= 0	; Store Program Memory
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read-While-Write section read enable
                                 .equ    SIGRD   = 5 ; Signature Row Read
                                 .equ	RWWSB	= 6	; Read-While-Write Section Busy
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	IVCE	= 0	; 
                                 .equ	IVSEL	= 1	; 
                                 .equ	PUD	= 4	; 
                                 .equ	BODSE	= 5	; BOD Sleep Enable
                                 .equ	BODS	= 6	; BOD Sleep
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	EXTREF	= EXTRF	; For compatibility
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 
                                 ; SMCR - Sleep Mode Control Register
                                 .equ	SE	= 0	; Sleep Enable
                                 .equ	SM0	= 1	; Sleep Mode Select Bit 0
                                 .equ	SM1	= 2	; Sleep Mode Select Bit 1
                                 .equ	SM2	= 3	; Sleep Mode Select Bit 2
                                 
                                 ; GPIOR2 - General Purpose I/O Register 2
                                 .equ	GPIOR20	= 0	; 
                                 .equ	GPIOR21	= 1	; 
                                 .equ	GPIOR22	= 2	; 
                                 .equ	GPIOR23	= 3	; 
                                 .equ	GPIOR24	= 4	; 
                                 .equ	GPIOR25	= 5	; 
                                 .equ	GPIOR26	= 6	; 
                                 .equ	GPIOR27	= 7	; 
                                 
                                 ; GPIOR1 - General Purpose I/O Register 1
                                 .equ	GPIOR10	= 0	; 
                                 .equ	GPIOR11	= 1	; 
                                 .equ	GPIOR12	= 2	; 
                                 .equ	GPIOR13	= 3	; 
                                 .equ	GPIOR14	= 4	; 
                                 .equ	GPIOR15	= 5	; 
                                 .equ	GPIOR16	= 6	; 
                                 .equ	GPIOR17	= 7	; 
                                 
                                 ; GPIOR0 - General Purpose I/O Register 0
                                 .equ	GPIOR00	= 0	; 
                                 .equ	GPIOR01	= 1	; 
                                 .equ	GPIOR02	= 2	; 
                                 .equ	GPIOR03	= 3	; 
                                 .equ	GPIOR04	= 4	; 
                                 .equ	GPIOR05	= 5	; 
                                 .equ	GPIOR06	= 6	; 
                                 .equ	GPIOR07	= 7	; 
                                 
                                 ; PRR - Power Reduction Register
                                 .equ	PRADC	= 0	; Power Reduction ADC
                                 .equ	PRUSART0	= 1	; Power Reduction USART
                                 .equ	PRSPI	= 2	; Power Reduction Serial Peripheral Interface
                                 .equ	PRTIM1	= 3	; Power Reduction Timer/Counter1
                                 .equ	PRTIM0	= 5	; Power Reduction Timer/Counter0
                                 .equ	PRTIM2	= 6	; Power Reduction Timer/Counter2
                                 .equ	PRTWI	= 7	; Power Reduction TWI
                                 
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEARL - EEPROM Address Register Low Byte
                                 .equ	EEAR0	= 0	; EEPROM Read/Write Access Bit 0
                                 .equ	EEAR1	= 1	; EEPROM Read/Write Access Bit 1
                                 .equ	EEAR2	= 2	; EEPROM Read/Write Access Bit 2
                                 .equ	EEAR3	= 3	; EEPROM Read/Write Access Bit 3
                                 .equ	EEAR4	= 4	; EEPROM Read/Write Access Bit 4
                                 .equ	EEAR5	= 5	; EEPROM Read/Write Access Bit 5
                                 .equ	EEAR6	= 6	; EEPROM Read/Write Access Bit 6
                                 .equ	EEAR7	= 7	; EEPROM Read/Write Access Bit 7
                                 
                                 ; EEARH - EEPROM Address Register High Byte
                                 .equ	EEAR8	= 0	; EEPROM Read/Write Access Bit 8
                                 .equ	EEAR9	= 1	; EEPROM Read/Write Access Bit 9
                                 
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEPE	= 1	; EEPROM Write Enable
                                 .equ	EEMPE	= 2	; EEPROM Master Write Enable
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 .equ	EEPM0	= 4	; EEPROM Programming Mode Bit 0
                                 .equ	EEPM1	= 5	; EEPROM Programming Mode Bit 1
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	SUT0	= 4	; Select start-up time
                                 .equ	SUT1	= 5	; Select start-up time
                                 .equ	CKOUT	= 6	; Clock output
                                 .equ	CKDIV8	= 7	; Divide clock by 8
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select reset vector
                                 .equ	BOOTSZ0	= 1	; Select boot size
                                 .equ	BOOTSZ1	= 2	; Select boot size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	WDTON	= 4	; Watchdog Timer Always On
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	DWEN	= 6	; debugWIRE Enable
                                 .equ	RSTDISBL	= 7	; External reset disable
                                 
                                 ; EXTENDED fuse bits
                                 .equ	BODLEVEL0	= 0	; Brown-out Detector trigger level
                                 .equ	BODLEVEL1	= 1	; Brown-out Detector trigger level
                                 .equ	BODLEVEL2	= 2	; Brown-out Detector trigger level
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x3fff	; Note: Word address
                                 .equ	IOEND	= 0x00ff
                                 .equ	SRAM_START	= 0x0100
                                 .equ	SRAM_SIZE	= 2048
                                 .equ	RAMEND	= 0x08ff
                                 .equ	XRAMEND	= 0x0000
                                 .equ	E2END	= 0x03ff
                                 .equ	EEPROMEND	= 0x03ff
                                 .equ	EEADRBITS	= 10
                                 #pragma AVRPART MEMORY PROG_FLASH 32768
                                 #pragma AVRPART MEMORY EEPROM 1024
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 2048
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0x3800
                                 .equ	NRWW_STOP_ADDR	= 0x3fff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0x37ff
                                 .equ	PAGESIZE	= 64
                                 .equ	FIRSTBOOTSTART	= 0x3f00
                                 .equ	SECONDBOOTSTART	= 0x3e00
                                 .equ	THIRDBOOTSTART	= 0x3c00
                                 .equ	FOURTHBOOTSTART	= 0x3800
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	PCI0addr	= 0x0006	; Pin Change Interrupt Request 0
                                 .equ	PCI1addr	= 0x0008	; Pin Change Interrupt Request 0
                                 .equ	PCI2addr	= 0x000a	; Pin Change Interrupt Request 1
                                 .equ	WDTaddr	= 0x000c	; Watchdog Time-out Interrupt
                                 .equ	OC2Aaddr	= 0x000e	; Timer/Counter2 Compare Match A
                                 .equ	OC2Baddr	= 0x0010	; Timer/Counter2 Compare Match A
                                 .equ	OVF2addr	= 0x0012	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x0014	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x0016	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x0018	; Timer/Counter1 Compare Match B
                                 .equ	OVF1addr	= 0x001a	; Timer/Counter1 Overflow
                                 .equ	OC0Aaddr	= 0x001c	; TimerCounter0 Compare Match A
                                 .equ	OC0Baddr	= 0x001e	; TimerCounter0 Compare Match B
                                 .equ	OVF0addr	= 0x0020	; Timer/Couner0 Overflow
                                 .equ	SPIaddr	= 0x0022	; SPI Serial Transfer Complete
                                 .equ	URXCaddr	= 0x0024	; USART Rx Complete
                                 .equ	UDREaddr	= 0x0026	; USART, Data Register Empty
                                 .equ	UTXCaddr	= 0x0028	; USART Tx Complete
                                 .equ	ADCCaddr	= 0x002a	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x002c	; EEPROM Ready
                                 .equ	ACIaddr	= 0x002e	; Analog Comparator
                                 .equ	TWIaddr	= 0x0030	; Two-wire Serial Interface
                                 .equ	SPMRaddr	= 0x0032	; Store Program Memory Read
                                 
                                 .equ	INT_VECTORS_SIZE	= 52	; size in words
                                 
                                 #endif  /* _M328PDEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 ; UC GAME PROJECT
                                 ;
                                 ; Created: 24-04-2022 10:35:44
                                 ; Authors : Deeksha - Aimen
                                 ;
                                 
                                 
                                 ; Definition file of the ATmega328P
                                 .INCLUDE "m328pdef.inc"
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega328P.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m328Pdef.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega328P
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega328P
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M328PDEF_INC_
                                 #endif  /* _M328PDEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 ; Boot
                                 .ORG 0x0000 ; 
000000 c020                      RJMP Init ; First instruction that is executed by the microcontroller
                                 
                                 ;macro
                                 .DEF Local_index1	= R17
                                 .DEF local_index2	= R18
                                 .DEF PAT_COL1		= R19 ;Temporary Pattern for column
                                 .DEF DummyReg		= R20
                                 .DEF BOSS_SHIPCOUNTER = R25 ; Current active gun index of the boss
                                 
                                 .EQU MonsterNotGunPat = 0b11111001
                                 .EQU MonsterGunPat = 0b11111001
                                 .EQU ShipGun = 0b0011111
                                 .EQU ShipMiddle = 0b00111110
                                 .EQU ShipEnd = 0b0010000
                                 .EQU boss_shoot_status = 0x0380
                                 .EQU Ship_life = 0x0381		;	Global var to store life of ship
                                 .EQU boss_life = 0x0382		;	Global var to store life of boss ship
                                 .EQU SCREEN_STATE = 0x0383	;	Global var to store which screen to display from screen patterns (defined below)
                                 .EQU JOY_STK_STATE = 0x0384 ;	Global var to store state of joystick whether low or high
                                 .EQU LAST_KEY = 0x0385		;	Global var to store state of keyboard last pressed
                                 .EQU RowIndex = 0x0386		;	Global var to store Index used to count row number in display
                                 .EQU BUZZ_PATTERN = 0x0387	;	Global var to store key pattern for buzzer sound
                                 
                                 ;keyboard patterns
                                 .EQU BTN8_PATTERN = 0b01111011 ; Button 8 pressed pattern
                                 .EQU BTN7_PATTERN = 0b01110111 ; Button 7 pressed pattern
                                 .EQU BTN5_PATTERN = 0b10111011 ; Button 5 pressed pattern
                                 .EQU BTN4_PATTERN = 0b10110111 ; Button 4 pressed pattern
                                 .EQU BTN2_PATTERN = 0b11011011 ; Button 2 pressed pattern
                                 .EQU NOBTN_PATTERN =  0b11111111 ; No button preesed pattern
                                 .EQU OTHER_PATTERN = 0b00110011 ; Pattern for the rest of the buttons
                                 .EQU SHIP_DAMAGE = 0b11	; Pattern checked by buzzer for ship damage
                                 .EQU BOSS_DAMAGE = 0b101 ; Pattern checked by buzzer for boss damage
                                 
                                 ;Screen states
                                 .EQU start_screen = 0x01	;State for displaying start screen
                                 .EQU game_screen = 0x02		;State for displaying game screen
                                 .EQU over_screen = 0x03		;State for displaying game over screen
                                 .EQU win_screen = 0x04		;State for displaying victory!
                                 
                                 ;Variables
                                 .EQU ShipLifeLine = 0x4E	;Location of ship lifeline on screenbuffer
                                 .EQU BossLifeLine = 0x4C	;Location of boss lifeline on screenbuffer
                                 .EQU Lives_ship_5 = 0b11000000 ;lives remaining
                                 .EQU Lives_boss_5 = 0b00011111 ;lives remaining
                                 
                                 ; Interrupts
                                 .ORG 0x0006
000006 c38a                      rjmp JoystickInterrupt
                                 
                                 .ORG 0x0012
000012 c350                      rjmp Timer2interrupt
                                 
                                 .org 0x001A
00001a c364                      rjmp Timer1Interrupt
                                 
                                 .ORG 0x0020
000020 c36a                      rjmp Timer0interrupt
                                 
                                 
                                 
                                 Init: 
                                 ; Configure output pin PB3
000021 9a23                      SBI DDRB, 3 ; Pin PB3 is an output: Data pin SDI (Serial Data In)
000022 9a24                      SBI DDRB, 4 ; Pin PB4 is an output: Latch/Output pin: LE(Latch Enable) + OE(Output Enable)
000023 9a25                      SBI DDRB, 5 ; Pin PB5 is an output: Clock pin CLK
                                 
                                 ; Configure input joystick pin PB2
000024 9822                      CBI DDRB,2;	pin an input switch
000025 9a2a                      SBI PORTB,2;Enable the pull-up resistor
                                 
                                 ;enabling keyboard input
000026 e00f                      LDI R16, 0x0F
000027 ef10                      LDI R17, 0xF0
000028 b91a                      OUT DDRD, R17 
000029 b90b                      OUT PORTD, R16 ; Init keyboard. set all rows to ground and cols to 1 
                                 
                                 ;LED 
00002a 9a3a                      SBI DDRC, 2
00002b 9a42                      SBI PORTC,2
                                 
                                 ;configure output buzzer in PB1
00002c 9a21                      SBI DDRB,1;	output pin
00002d 9829                      CBI PORTB,1 ; pull-down buzzer by default
                                 
                                 ;Initializing state machine
00002e e041                      LDI DummyReg, 0x01
00002f 9340 0383                 STS SCREEN_STATE, DummyReg
000031 e040                      LDI DummyReg, 0x00
000032 9340 0384                 STS JOY_STK_STATE, DummyReg
000034 9340 0385                 STS LAST_KEY, DummyReg
                                 
                                 ;Establishing start screen
000036 940e 026c                 CALL Load_game_play_start
                                 
000038 9478                      SEI ;Set golabl interrupt
                                 ; timer1Interrupt	/* Timer interrupt enabled inside machine state*/
                                 
000039 e005                      LDI R16, 0x05
00003a 9300 00b1                 STS TCCR2B, R16 ;prescaler timer 2
00003c e005                      LDI R16, 0x05
00003d 9300 0081                 STS TCCR1B, R16 ;prescaler timer 1
00003f e005                      LDI R16, 0x05
000040 bd05                      OUT TCCR0B, R16 ;prescaler timer 0
                                 
                                  
                                 ;LDI R16, 0x02
                                 ;OUT TCCR0A, R16 ;CTC MODE
                                 ;LDI R16, 100
                                 ;OUT OCR0A, R16
                                  
                                 ; Joystick interrupt
000041 e001                      LDI R16, 0x01
000042 e014                      LDI R17, 4
000043 9300 0068                 STS PCICR, R16
000045 9310 006b                 STS PCMSK0, R17
                                 
                                 ; INIT BOSS ACTIVE GUN COUNTER = it has 6 guns
000047 e096                      LDI BOSS_SHIPCOUNTER, 6
                                 
000048 e0b2                      LDI XH, 0x02
000049 e0d2                      LDI YH, 0x02
00004a e5c0                      LDI YL, 0x50
00004b e9a0                      LDI XL, 0x90
                                 
00004c e114                      LDI local_index1, 20
00004d e000                      LDI R16, 0x00
00004e 8308                      INIT_BULLETS: ST Y, R16
00004f 930c                      			  ST X, R16
000050 951a                      			  DEC local_index1
000051 f7e1                      			  BRNE INIT_BULLETS
                                 
                                 ;Main Function
                                 Main: 
000052 940e 005e                 	CALL display
000054 940e 006e                 	CALL load_screen_state
000056 9a42                      	SBI PORTC,2
000057 9120 0380                 	LDS R18, boss_shoot_status
000059 3021                      	CPI R18, 1
00005a f7b9                      	BRNE Main
00005b 940e 01c4                 	CALL BOSS_SHOOT
00005d cff4                      RJMP Main
                                 
                                 
                                 Display:
00005e e048                      	LDI DummyReg, 0x08
00005f 9340 0386                 	STS RowIndex, DummyReg
                                 	Send1Row:
000061 940e 02f3                 		CALL execute_col_loop
000063 940e 0329                 		CALL execute_row_loop
000065 940e 0336                 		CALL Latch_shift_reg
                                 		
                                 		;Decrement RowIndex
000067 9140 0386                 		LDS DummyReg, RowIndex
000069 954a                      		DEC DummyReg
00006a 9340 0386                 		STS RowIndex, DummyReg
00006c f7a1                      	BRNE Send1Row
00006d 9508                      RET
                                 
                                 
                                 
                                 Load_screen_state:
00006e 9140 0383                 	LDS DummyReg, SCREEN_STATE
000070 3041                      	CPI DummyReg, start_screen
000071 f039                      	BREQ load_start_screen
000072 3042                      	CPI DummyReg, game_screen
000073 f0a9                      	BREQ load_game_screen
000074 3043                      	CPI DummyReg, over_screen
000075 f0f9                      	BREQ load_over_screen
000076 3044                      	CPI DummyReg, win_screen
000077 f139                      	BREQ load_win_screen
000078 9508                      	RET
                                 	load_start_screen:
000079 e0f7                      		LDI ZH, high(CharTable1<<1) 
00007a e6e0                      		LDI ZL, low(CharTable1<<1)
00007b ec40                      		LDI DummyReg, Lives_ship_5
00007c 9340 0381                 		STS ship_life, DummyReg
00007e e14f                      		LDI DummyReg, Lives_boss_5
00007f 9340 0382                 		STS boss_life, DummyReg
                                 		;----------------------------------------------
                                 		;-------------Disable timers for this state
000081 e000                      		LDI R16, 0x00
000082 9300 006f                 		STS TIMSK1, R16 ;timer1 interrupt disable
000084 9300 006e                 		STS TIMSK0, R16 ; timer0 interrupt disable
000086 9300 0070                 		STS TIMSK2, R16 ; timer2 interrupt disable
                                 		;---------------------------------------------
000088 9508                      	RET
                                 	load_game_screen:
000089 e001                      		LDI R16, 0x01
00008a 9300 006f                 		STS TIMSK1, R16 ; timer1 interrupt enable
00008c 9300 006e                 		STS TIMSK0, R16 ; timer0 interrupt enable
00008e 9300 0070                 		STS TIMSK2, R16 ; timer2 interrupt enable
000090 940e 00a9                 		CALL CHECK_STATE
000092 e0f1                      		LDI ZH,0x01
000093 e0e0                      		LDI ZL,0x00
000094 9508                      	RET
                                 	load_over_screen:
000095 e000                      		LDI R16, 0x00
000096 9300 006f                 		STS TIMSK1, R16 ;timer1 interrupt disable
000098 9300 006e                 		STS TIMSK0, R16 ; timer0 interrupt disable
00009a 9300 0070                 		STS TIMSK2, R16 ; timer2 interrupt disnable
00009c e0f7                      		LDI ZH, high(CharTable2<<1)
00009d eee8                      		LDI ZL, low(CharTable2<<1)
                                 
00009e 9508                      	RET	
                                 	load_win_screen:
00009f e000                      		LDI R16, 0x00
0000a0 9300 006f                 		STS TIMSK1, R16 ; timer1 interrupt disable
0000a2 9300 006e                 		STS TIMSK0, R16 ; timer0 interrupt disable
0000a4 9300 0070                 		STS TIMSK2, R16 ; timer2 interrupt enable
0000a6 e0f8                      		LDI ZH, high(CharTable3<<1)
0000a7 e6e8                      		LDI ZL, low(CharTable3<<1)
0000a8 9508                      	RET		
                                 
                                 CHECK_STATE: 
0000a9 b129                      			 IN R18,PIND ; Copy PIND into R18
0000aa d23e                      		     RCALL CONTEXT_SWITCH ; Call context switch (RCALL takes less instruction cycles than CALL)
0000ab b139                      		     IN R19,PIND ; Copy PIND into R19
0000ac d241                      		     RCALL RESET_CONTEXT ; Call reset context 
0000ad 2b23                      		     OR R18,R19 ; R18 OR R19 and store the result in R18
0000ae 9320 0387                 			 STS BUZZ_PATTERN, R18 ;Storing key pattern
                                 
0000b0 3d2b                      		     CPI R18,BTN2_PATTERN ; If button 2 is pressed
0000b1 f039                      			 BREQ state_plus_2
                                 
0000b2 372b                           		 CPI R18,BTN8_PATTERN ; If button 8 is pressed
0000b3 f049                      		     BREQ state_plus_8
                                 
0000b4 3b2b                      			 CPI R18,BTN5_PATTERN ; If button 5 is pressed
0000b5 f059                      		     BREQ state_plus_5
                                 
                                 
0000b6 3f2f                      			 CPI R18,NOBTN_PATTERN ; If no button is pressed
0000b7 f069                      			 BREQ reset_key_state
0000b8 9508                      			 RET
                                 
                                 			 state_plus_2:
0000b9 e042                      				LDI DummyReg, 0x02
0000ba 9340 0385                 				STS LAST_KEY, DummyReg
0000bc 9508                      			 RET
                                 
                                 			 state_plus_8:
0000bd e044                      				LDI DummyReg, 0x04
0000be 9340 0385                 				STS LAST_KEY, DummyReg
0000c0 9508                      			 RET
                                 
                                 			 state_plus_5:
0000c1 e046                      				LDI DummyReg, 0x06
0000c2 9340 0385                 				STS LAST_KEY, DummyReg
0000c4 9508                      			 RET
                                 
                                 			 reset_key_state:
0000c5 9140 0385                 				LDS DummyReg, LAST_KEY
0000c7 3042                      				CPI DummyReg,0x02 ; If button 2 is pressed
0000c8 f029                      				BREQ go_down
0000c9 3044                      				CPI DummyReg,0x04 ; if button 8 is pressed
0000ca f049                      				BREQ go_up
0000cb 3046                      				CPI DummyReg,0x06 ; if button 5 is pressed
0000cc f069                      				BREQ ship_shoot
0000cd 9508                      			 RET
                                 
                                 			 go_down:
0000ce e040                      				LDI DummyReg, 0x00
0000cf 9340 0385                 				STS LAST_KEY, DummyReg
0000d1 940e 01f6                 				CALL MOVE_DOWN
0000d3 9508                      			 RET
                                 
                                 			 go_up:
0000d4 e040                      				LDI DummyReg, 0x00
0000d5 9340 0385                 				STS LAST_KEY, DummyReg
0000d7 940e 0231                 				CALL MOVE_UP
0000d9 9508                      			 RET
                                 
                                 			 ship_shoot:
0000da e040                      				LDI DummyReg, 0x00
0000db 9340 0385                 				STS LAST_KEY, DummyReg
0000dd 940e 0193                 				CALL SHOOT
0000df 9508                      			 RET
                                 
0000e0 93ef                      UPDATE_BULLETSTATE: PUSH ZL
0000e1 93ff                      				    PUSH ZH
0000e2 932f                      					PUSH R18
0000e3 934f                      					PUSH R20
0000e4 922f                      					PUSH R2
0000e5 b62f                      					IN R2, SREG
0000e6 e0ea                      					LDI ZL, 0x0A
0000e7 e0d2                      					LDI YH, 0x02
0000e8 e0b2                      					LDI XH, 0x02
                                 
0000e9 e5c0                      					LDI YL, 0x50 ; Ship bullet
0000ea e9a0                      					LDI XL, 0x90 ; Boss bullet	
                                 					
                                 
0000eb e341                      				    LDI R20, 49 ; 1St upper row                   ;xxxxxxx  x  
0000ec 940e 033e                 					CALL SHIFT_Z
0000ee 940e 013b                 					CALL TRACE_BULLET
                                 
0000f0 e9a3                      					LDI XL, 0x93 ; BOSS GUN!
                                 					
0000f1 e247                      					LDI R20, 39 ; 2nd upper row                   ;xxxxxxx  x
0000f2 940e 033e                 					CALL SHIFT_Z
0000f4 940e 013b                 					CALL TRACE_BULLET
                                 
0000f6 e9a6                      					LDI XL, 0x96 ; BOSS GUN !
0000f7 e14d                      					LDI R20, 29 ; 3rd upper row                    ;xxxxx      
0000f8 940e 033e                 					CALL SHIFT_Z
0000fa 940e 013b                 					CALL TRACE_BULLET
                                 					
0000fc e9a9                      					LDI XL, 0x99 ; BOSS GUN !
0000fd e143                      					LDI R20, 19 ; 4th upper row				     ;xxxxx 
0000fe 940e 033e                 					CALL SHIFT_Z
000100 940e 013b                 					CALL TRACE_BULLET
                                 
000102 e9ac                      					LDI XL, 0x9C ; BOSS GUN !
000103 e049                      					LDI R20, 9 ; 5th upper row				      ;xxxxxxx  x
000104 940e 033e                 					CALL SHIFT_Z
000106 940e 013b                 					CALL TRACE_BULLET
                                 
000108 e9af                      					LDI XL, 0x9F ; BOSS GUN !
000109 e440                      					LDI R20, 64 ; 1St bottom row
00010a 940e 033e                 					CALL SHIFT_Z
00010c 940e 013b                 					CALL TRACE_BULLET
                                 
00010e eaa2                      					LDI XL, 0xA2 ; BOSS GUN !
00010f e346                      					LDI R20, 54 ; 2nd bottom row
000110 940e 033e                 					CALL SHIFT_Z
000112 940e 013b                 					CALL TRACE_BULLET
                                 
000114 eaa5                      					LDI XL, 0xA5 ; BOSS GUN !
000115 e24c                      					LDI R20, 44 ; 3rd bottom row
000116 940e 033e                 					CALL SHIFT_Z
000118 940e 013b                 					CALL TRACE_BULLET
                                 
00011a eaa8                      					LDI XL, 0xA8 ; BOSS GUN !
00011b e242                      					LDI R20, 34 ; 4th bottom row
00011c 940e 033e                 					CALL SHIFT_Z
00011e 940e 013b                 					CALL TRACE_BULLET
                                 
000120 eaab                      					LDI XL, 0xAB ; BOSS GUN !
                                 
000121 e148                      					LDI R20, 24 ; 5th bottom row
000122 940e 033e                 					CALL SHIFT_Z
000124 940e 013b                 					CALL TRACE_BULLET
                                 
000126 eaae                      					LDI XL, 0xAE ; BOSS GUN !
000127 e04e                      					LDI R20, 14 ; 6th bottom row
000128 940e 033e                 					CALL SHIFT_Z
00012a 940e 013b                 					CALL TRACE_BULLET
                                 
00012c eba1                      					LDI XL, 0xB1 ; BOSS GUN !
00012d e044                      					LDI R20, 4 ; 7th bottom row
00012e 940e 033e                 					CALL SHIFT_Z
000130 940e 013b                 					CALL TRACE_BULLET
000132 940e 02cb                 					CALL lifeline_to_screenbuff
                                 							 
                                 			
000134 be2f                      			finish_update:  OUT SREG, R2
000135 902f                      							POP R2
000136 914f                      							POP R20
000137 912f                      							POP R18
000138 91ff                      							POP ZH
000139 91ef                      							POP ZL
00013a 9508                      							RET
                                 
                                 TRACE_BULLET:
00013b 8108                      			LD R16, Y ; ship bullet
00013c 911c                      			LD R17, X ; boss bullet
                                 			
                                 			; --------------
                                 			; ---- check if bullets are met ----
00013d 3000                      			CPI R16, 0x00
00013e f021                      			BREQ continue
00013f 2f40                      			MOV dummyReg, R16 
000140 1b41                      			SUB dummyReg, R17
000141 3040                      			CPI dummyReg, 0x00
000142 f1b1                      			BREQ bullets_collapse
                                 			; --- continue ----
000143 2f20                      			continue: MOV R18, R16
000144 2b21                      			OR R18, R17
000145 9322                      			ST -Z, R18;storing bullet 
                                 
000146 0f11                      			LSL R17 ; shift boss bullet to the left
000147 931d                      			ST X+, R17
000148 f428                      			BRCC shipNotHit
                                 
                                 			
                                 			; ---- Check if ship is hit
000149 95e3                      			INC ZL
00014a 8120                      			LD R18, Z
00014b 312f                      			CPI R18, shipGun
00014c f181                      			BREQ shipDamaged
00014d 95ea                      			DEC ZL
                                 			; --------------
                                 
00014e 9488                      			shipNotHit:CLC
00014f 9506                      			LSR R16 ; shift ship bullet to the right
000150 9309                      			ST Y+, R16
000151 f410                      			BRCC next ; if carry is set write to the next byte 
000152 e800                      			LDI R16, 0x80 ;shifting 1 to next byte of bullet path
000153 8308                      			ST Y, R16
                                 
                                 			; next byte
000154 8108                      			next: LD R16, Y
000155 911c                      				  LD R17, X
000156 2f20                      				  MOV R18, R16
000157 2b01                      				  OR R16, R17
000158 9302                      				  ST -Z, R16
                                 
000159 9526                      				  LSR R18
00015a 9329                      				  ST Y+, R18
00015b f410                      				  BRCC bossBullet
00015c e800                      				  LDI R16, 0x80
00015d 8308                      				  ST Y, R16
                                 					; move the boss bultt to the next byte if carry is set
00015e 0f11                      				  bossBullet:  LSL R17
00015f 931c                      						  ST X, R17
000160 f418                      						  BRCC next3
000161 e011                      						  LDI R17, 0x01
000162 931e                      						  ST -X, R17
000163 95a3                      						  INC XL
                                 
                                 					; last byte
000164 95a3                      			  next3: INC XL		 
000165 8108                      					 LD R16, Y
000166 911c                      					 LD R17, X
000167 2f20                      					 MOV R18, R16
000168 2b01                      					 OR R16, R17
000169 9302                      					 ST -Z, R16
                                 
00016a 9526                      					 LSR R18
00016b 9329                      					 ST Y+, R18
00016c f428                      					 BRCC boss_not_hit
                                 
                                 					; ---- Check if boss is hit
00016d 95ea                      					DEC ZL
00016e 8120                      					LD R18, Z
00016f 3f29                      					CPI R18, MonsterGunPat
000170 f0b9                      					BREQ bossDamaged
000171 95e3                      					INC ZL
                                 					; --------------
                                 
                                 					 boss_not_hit:
000172 9488                      						CLC
000173 0f11                      						LSL R17
000174 931c                      						ST X, R17
000175 f410                      						BRCC finish_trace ; problem here regarding X
000176 e011                      							LDI R17, 0x01
000177 931e                      					 ST -X, R17	 ; move the boss bultt to the next byte if carry is set
                                 							
                                 					
                                 
000178 9508                      				finish_trace: RET
                                 				; -- if bullets collapse => reset ---
000179 e000                      				bullets_collapse: LDI R16, 0x00
00017a 8308                      								  ST Y, R16
00017b 930c                      								  ST X, R16
00017c 9508                      								  RET
                                 				; --- if ship is hit by boss bullet -------
00017d 9120 0381                 				shipDamaged: LDS R18, ship_life
00017f 0f22                      							 LSL R18
000180 f019                      							 BREQ game_over
000181 9320 0381                 							 STS ship_life, R18
000183 9508                      							 RET
                                 
000184 e043                      							 game_over: LDI DummyReg, over_screen
000185 9340 0383                 										STS SCREEN_STATE, DummyReg
000187 9508                      										RET
                                 
                                 			   ; ----- Check if boss is hit by ship bullet ---------------
000188 9120 0382                 			   bossDamaged:  LDS R18, boss_life
00018a 9526                      							 LSR R18
00018b f019                      							 BREQ game_victory
00018c 9320 0382                 							 STS boss_life, R18
00018e 9508                      							 RET
                                 
00018f e044                      							 game_victory: LDI DummyReg, win_screen
000190 9340 0383                 										STS SCREEN_STATE, DummyReg
000192 9508                      										RET										 
                                 										 		
                                 
000193 93ef                      SHOOT: PUSH ZL
000194 93ff                      	   PUSH ZH
000195 922f                      	   PUSH R2
000196 b62f                      	   IN R2, SREG
000197 e0ea                      	   LDI ZL, 0x0A
000198 e5c0                      	   LDI YL, 0x50
                                 
000199 a901                      	   LDD R16, Z+49
00019a d01f                      	   RCALL SHIP_FIRE
                                 
00019b a107                      	   LDD R16, Z+39
00019c d01d                      	   RCALL SHIP_FIRE
                                 
00019d 8d05                      	   LDD R16, Z+29
00019e d01b                      	   RCALL SHIP_FIRE
                                 
00019f 8903                      	   LDD R16, Z+19
0001a0 d019                      	   RCALL SHIP_FIRE
                                 
0001a1 8501                      	   LDD R16, Z+9
0001a2 d017                      	   RCALL SHIP_FIRE
                                 
                                 	   
0001a3 e440                      	   LDI R20, 64 ; 1St bottom row
0001a4 940e 033e                 	   CALL SHIFT_Z
0001a6 8100                      	   LD R16, Z
0001a7 d012                      	   RCALL SHIP_FIRE
0001a8 e0ea                      	   LDI ZL, 0x0A
                                 
0001a9 a906                      	   LDD R16, Z+54
0001aa d00f                      	   RCALL SHIP_FIRE
                                 
0001ab a504                      	   LDD R16, Z+44
0001ac d00d                      	   RCALL SHIP_FIRE
                                 
0001ad a102                      	   LDD R16, Z+34
0001ae d00b                      	   RCALL SHIP_FIRE
                                 
0001af 8d00                      	   LDD R16, Z+24
0001b0 d009                      	   RCALL SHIP_FIRE
                                 	   
0001b1 8506                      	   LDD R16, Z+14
0001b2 d007                      	   RCALL SHIP_FIRE
                                 
0001b3 8104                      	   LDD R16, Z+4
0001b4 d005                      	   RCALL SHIP_FIRE
                                 
0001b5 be2f                      	   finish_shooting: OUT SREG, R2
0001b6 902f                      						POP R2
0001b7 91ff                      						POP ZH
0001b8 91ef                      						POP ZL
0001b9 9508                      						RET
                                 
0001ba 310f                      SHIP_FIRE: CPI R16, ShipGun
0001bb f421                      		   BRNE DONT_FIRE
0001bc 8108                      		   LD R16, Y
0001bd e810                      		  LDI R17, 0x80
0001be 2b01                      		   OR R16, R17
0001bf 8308                      		   ST Y, R16
0001c0 95c3                      		   DONT_FIRE: INC YL
0001c1 95c3                      					   INC YL
0001c2 95c3                      					  INC YL
0001c3 9508                      					  RET
                                 
0001c4 e0b2                      BOSS_SHOOT:		LDI XH, 0x02
0001c5 93ef                      				PUSH ZL
0001c6 93ff                      				PUSH ZH
0001c7 932f                      			    PUSH R18
0001c8 922f                      			    PUSH R2
0001c9 b62f                      				IN R2, SREG
                                 				
0001ca 3096                      				CPI BOSS_SHIPCOUNTER, 6
0001cb f089                      				BREQ PAT1
0001cc 3095                      				CPI BOSS_SHIPCOUNTER, 5
0001cd f089                      				BREQ PAT2
0001ce 3094                      				CPI BOSS_SHIPCOUNTER, 4
0001cf f089                      				BREQ PAT3
0001d0 3093                      				CPI BOSS_SHIPCOUNTER, 3
0001d1 f089                      				BREQ PAT4
0001d2 3092                      				CPI BOSS_SHIPCOUNTER, 2
0001d3 f089                      				BREQ PAT5
0001d4 3091                      				CPI BOSS_SHIPCOUNTER, 1
0001d5 f089                      				BREQ PAT6
                                 
0001d6 e096                      				LDI BOSS_SHIPCOUNTER, 6 ; reset
0001d7 be2f                      				OUT SREG, R2
0001d8 902f                      				POP R2
0001d9 912f                      			    POP R18
0001da 91ff                      				POP ZH
0001db 91ef                      				POP ZL
0001dc 9518                      				RETI
                                 
0001dd e9a2                      				PAT1: LDI XL, 0x92
0001de c009                      					  RJMP boss_fire
0001df e9a5                      				PAT2: LDI XL, 0x95
0001e0 c007                      					  RJMP boss_fire
0001e1 e9ae                      				PAT3: LDI XL, 0x9E
0001e2 c005                      					  RJMP boss_fire
0001e3 eaa1                      				PAT4: LDI XL, 0xA1
0001e4 c003                      					  RJMP boss_fire
0001e5 eaaa                      				PAT5: LDI XL, 0xAA
0001e6 c001                      					  RJMP boss_fire
0001e7 eaad                      				PAT6: LDI XL, 0xAD
                                 
0001e8 910c                      				boss_fire: LD R16, X
0001e9 e011                      				LDI R17, 0x01
0001ea 2b01                      				OR R16, R17
0001eb 930c                      				ST X, R16
0001ec 959a                      				DEC BOSS_SHIPCOUNTER
                                 
                                 				;CALL UPDATE_BULLETSTATE
                                 
0001ed e020                      				LDI R18, 0
0001ee 9320 0380                 				STS boss_shoot_status, R18
                                 
0001f0 be2f                      				OUT SREG, R2
0001f1 902f                      				POP R2
0001f2 912f                      			    POP R18
0001f3 91ff                      				POP ZH
0001f4 91ef                      				POP ZL
                                 
0001f5 9508                      				RET
                                 
                                 MOVE_DOWN:
                                 
0001f6 e0f1                      	LDI ZH, 0x01
                                 
0001f7 e0ee                      	LDI ZL, 0x0E ;ROW 1, lower block
0001f8 8130                      	LD PAT_COL1, Z
                                 	
0001f9 e1e8                      	LDI ZL, 0x18 ;ROW 2, lower block
0001fa 8140                      	LD DummyReg, Z
0001fb e0ee                      	LDI ZL, 0x0E
0001fc 8340                      	ST Z, DummyReg
                                 
0001fd e2e2                      	LDI ZL, 0x22 ;ROW 3, lower block
0001fe 8140                      	LD DummyReg, Z
0001ff e1e8                      	LDI ZL, 0x18
000200 8340                      	ST Z, DummyReg
                                 
000201 e2ec                      	LDI ZL, 0x2C ;ROW 4, lower block
000202 8140                      	LD DummyReg, Z
000203 e2e2                      	LDI ZL, 0x22
000204 8340                      	ST Z, DummyReg
                                 
000205 e3e6                      	LDI ZL, 0x36 ;ROW 5, lower block
000206 8140                      	LD DummyReg, Z
000207 e2ec                      	LDI ZL, 0x2C
000208 8340                      	ST Z, DummyReg
                                 
000209 e4e0                      	LDI ZL, 0x40 ;ROW 6, lower block
00020a 8140                      	LD DummyReg, Z
00020b e3e6                      	LDI ZL, 0x36
00020c 8340                      	ST Z, DummyReg
                                 
00020d e4ea                      	LDI ZL, 0x4A ;ROW 7, lower block
00020e 8140                      	LD DummyReg, Z
00020f e4e0                      	LDI ZL, 0x40
000210 8340                      	ST Z, DummyReg
                                 
000211 e1e3                      	LDI ZL, 0x13 ;ROW 1, upper block
000212 8140                      	LD DummyReg, Z
000213 e4ea                      	LDI ZL, 0x4A
000214 8340                      	ST Z, DummyReg
                                 
000215 e1ed                      	LDI ZL, 0x1D ;ROW 2, upper block
000216 8140                      	LD DummyReg, Z
000217 e1e3                      	LDI ZL, 0x13
000218 8340                      	ST Z, DummyReg
                                 
000219 e2e7                      	LDI ZL, 0x27 ;ROW 3, upper block
00021a 8140                      	LD DummyReg, Z
00021b e1ed                      	LDI ZL, 0x1D
00021c 8340                      	ST Z, DummyReg
                                 
00021d e3e1                      	LDI ZL, 0x31 ;ROW 4, upper block
00021e 8140                      	LD DummyReg, Z
00021f e2e7                      	LDI ZL, 0x27
000220 8340                      	ST Z, DummyReg
                                 
000221 e3eb                      	LDI ZL, 0x3B ;ROW 5, upper block
000222 8140                      	LD DummyReg, Z
000223 e3e1                      	LDI ZL, 0x31
000224 8340                      	ST Z, DummyReg
                                 
000225 e4e5                      	LDI ZL, 0x45 ;ROW 6, upper block
000226 8140                      	LD DummyReg, Z
000227 e3eb                      	LDI ZL, 0x3B
000228 8340                      	ST Z, DummyReg
                                 
000229 e4ef                      	LDI ZL, 0x4F ;ROW 7, upper block
00022a 8140                      	LD DummyReg, Z
00022b e4e5                      	LDI ZL, 0x45
00022c 8340                      	ST Z, DummyReg
                                 
00022d e4ef                      	LDI ZL, 0x4F ;ROW 7, upper block
00022e 8330                      	ST Z, PAT_COL1
                                 
                                 	;Restoring Z
00022f e0e0                      	LDI ZL, 0x00
                                 
000230 9508                      RET
                                 
                                 MOVE_UP:
                                 
000231 e0f1                      	LDI ZH, 0x01
                                 
000232 e4ef                      	LDI ZL, 0x4F ;ROW 7, upper block
000233 8130                      	LD PAT_COL1, Z
                                 	
000234 e4e5                      	LDI ZL, 0x45 ;ROW 6, upper block
000235 8140                      	LD DummyReg, Z
000236 e4ef                      	LDI ZL, 0x4F
000237 8340                      	ST Z, DummyReg
                                 
000238 e3eb                      	LDI ZL, 0x3B ;ROW 5, upper block
000239 8140                      	LD DummyReg, Z
00023a e4e5                      	LDI ZL, 0x45
00023b 8340                      	ST Z, DummyReg
                                 
00023c e3e1                      	LDI ZL, 0x31 ;ROW 4, upper block
00023d 8140                      	LD DummyReg, Z
00023e e3eb                      	LDI ZL, 0x3B
00023f 8340                      	ST Z, DummyReg
                                 
000240 e2e7                      	LDI ZL, 0x27 ;ROW 3, upper block
000241 8140                      	LD DummyReg, Z
000242 e3e1                      	LDI ZL, 0x31
000243 8340                      	ST Z, DummyReg
                                 
000244 e1ed                      	LDI ZL, 0x1D ;ROW 2, upper block
000245 8140                      	LD DummyReg, Z
000246 e2e7                      	LDI ZL, 0x27
000247 8340                      	ST Z, DummyReg
                                 
000248 e1e3                      	LDI ZL, 0x13 ;ROW 1, upper block
000249 8140                      	LD DummyReg, Z
00024a e1ed                      	LDI ZL, 0x1D
00024b 8340                      	ST Z, DummyReg
                                 
00024c e4ea                      	LDI ZL, 0x4A ;ROW 7, lower block
00024d 8140                      	LD DummyReg, Z
00024e e1e3                      	LDI ZL, 0x13
00024f 8340                      	ST Z, DummyReg
                                 
000250 e4e0                      	LDI ZL, 0x40 ;ROW 6, lower block
000251 8140                      	LD DummyReg, Z
000252 e4ea                      	LDI ZL, 0x4A
000253 8340                      	ST Z, DummyReg
                                 
000254 e3e6                      	LDI ZL, 0x36 ;ROW 5, lower block
000255 8140                      	LD DummyReg, Z
000256 e4e0                      	LDI ZL, 0x40
000257 8340                      	ST Z, DummyReg
                                 
000258 e2ec                      	LDI ZL, 0x2C ;ROW 4, lower block
000259 8140                      	LD DummyReg, Z
00025a e3e6                      	LDI ZL, 0x36
00025b 8340                      	ST Z, DummyReg
                                 
00025c e2e2                      	LDI ZL, 0x22 ;ROW 3, lower block
00025d 8140                      	LD DummyReg, Z
00025e e2ec                      	LDI ZL, 0x2C
00025f 8340                      	ST Z, DummyReg
                                 
000260 e1e8                      	LDI ZL, 0x18 ;ROW 2, lower block
000261 8140                      	LD DummyReg, Z
000262 e2e2                      	LDI ZL, 0x22
000263 8340                      	ST Z, DummyReg
                                 
000264 e0ee                      	LDI ZL, 0x0E ;ROW 1, lower block
000265 8140                      	LD DummyReg, Z
000266 e1e8                      	LDI ZL, 0x18
000267 8340                      	ST Z, DummyReg
                                 
000268 e0ee                      	LDI ZL, 0x0E ;ROW 1, lower block
000269 8330                      	ST Z, PAT_COL1
                                 
                                 	;Restoring Z
00026a e0e0                      	LDI ZL, 0x00
                                 
00026b 9508                      RET
                                 
                                 
                                 
                                 
                                 
                                 load_game_play_start:
00026c e0e0                      	LDI ZL, 0x00
00026d e0f1                      	LDI ZH, 0x01
                                 	;oth ROW (Not displayed - dummy)
00026e ef09                      	LDI R16, MonsterNotGunPat
00026f 9300 0212                 	STS 0x212, R16
000271 e10f                      	LDI R16, 0b00011111
000272 9300 0213                 	STS 0x213, R16
000274 e100                      	LDI R16, ShipEnd
000275 9300 0214                 	STS 0x214, R16
000277 940e 02d5                 	CALL InitScreenState
                                 
                                 	;1st ROW
000279 e10f                      	LDI R16, 0b00011111
00027a 9300 0212                 	STS 0x212, R16
00027c ef09                      	LDI R16, MonsterGunPat
00027d 9300 0213                 	STS 0x213, R16
00027f e000                      	LDI R16, 0b00000000
000280 9300 0214                 	STS 0x214, R16
000282 940e 02d5                 	CALL InitScreenState 
                                 
                                 	;2nd ROW
000284 e10f                      	LDI R16, 0b00011111
000285 9300 0212                 	STS 0x212, R16
000287 e10f                      	LDI R16, 0b00011111
000288 9300 0213                 	STS 0x213, R16
00028a e000                      	LDI R16, 0b00000000
00028b 9300 0214                 	STS 0x214, R16
00028d 940e 02d5                 	CALL InitScreenState
                                 
                                 	;3rd ROW
00028f ef09                      	LDI R16, MonsterNotGunPat
000290 9300 0212                 	STS 0x212, R16
000292 e10f                      	LDI R16, 0b00011111
000293 9300 0213                 	STS 0x213, R16
000295 e100                      	LDI R16, ShipEnd
000296 9300 0214                 	STS 0x214, R16
000298 940e 02d5                 	CALL InitScreenState
                                 
                                 	;4th ROW
00029a ef09                      	LDI R16, MonsterGunPat
00029b 9300 0212                 	STS 0x212, R16
00029d ef09                      	LDI R16, MonsterNotGunPat
00029e 9300 0213                 	STS 0x213, R16
0002a0 e30e                      	LDI R16, ShipMiddle
0002a1 9300 0214                 	STS 0x214, R16
0002a3 940e 02d5                 	CALL InitScreenState
                                 
                                 	;5th ROW
0002a5 e10f                      	LDI R16, 0b00011111
0002a6 9300 0212                 	STS 0x212, R16
0002a8 ef09                      	LDI R16, MonsterGunPat
0002a9 9300 0213                 	STS 0x213, R16
0002ab e10f                      	LDI R16, ShipGun
0002ac 9300 0214                 	STS 0x214, R16
0002ae 940e 02d5                 	CALL InitScreenState
                                 
                                 	;6th ROW
                                 	SECOND_ROW: 
0002b0 e10f                      	LDI R16, 0b00011111
0002b1 9300 0212                 	STS 0x212, R16
0002b3 e10f                      	LDI R16, 0b00011111
0002b4 9300 0213                 	STS 0x213, R16
0002b6 e30e                      	LDI R16, ShipMiddle
0002b7 9300 0214                 	STS 0x214, R16
0002b9 940e 02d5                 	CALL InitScreenState
                                 
                                 	; 7th ROW
0002bb ef09                      	LDI R16, MonsterNotGunPat
0002bc 9300 0212                 	STS 0x212, R16
0002be e10f                      	LDI R16, 0b00011111
0002bf 9300 0213                 	STS 0x213, R16
0002c1 e100                      	LDI R16, ShipEnd
0002c2 9300 0214                 	STS 0x214, R16
0002c4 940e 02d5                 	CALL InitScreenState
                                  
                                 	;Loading initial life line display
0002c6 940e 02cb                 	CALL lifeline_to_screenbuff
                                 
0002c8 e0e0                      	LDI ZL, 0x00 ; Reset
0002c9 e0f1                      	LDI ZH, 0x01
                                 
0002ca 9508                      RET
                                 lifeline_to_screenbuff:
0002cb 9140 0381                 	LDS DummyReg, ship_life
0002cd e0f1                      	LDI ZH, 0x01
0002ce e4ee                      	LDI ZL, ShipLifeLine
0002cf 8340                      	ST Z, DummyReg
0002d0 9140 0382                 	LDS DummyReg, boss_life
0002d2 e4ec                      	LDI ZL, BossLifeLine
0002d3 8340                      	ST Z, DummyReg
0002d4 9508                      RET
                                 
                                 InitScreenState: 
0002d5 9120 0212                 	LDS R18,  0x212
0002d7 9321                      	ST Z+, R18
                                 
0002d8 e020                      	LDI R18, 0x00
0002d9 e014                      	LDI R17, 4
                                 
                                 	LOOP_BUFF: 
0002da 9321                      		ST Z+, R18
0002db 951a                      		DEC R17
0002dc f7e9                      	BRNE LOOP_BUFF
0002dd 9120 0213                 	LDS R18, 0x213
0002df 9321                      	ST Z+, R18
0002e0 e020                      	LDI R18, 0x00
0002e1 e013                      	LDI R17, 3
                                 	LOOP_BUFF1_: 
0002e2 9321                      		ST Z+, R18
0002e3 951a                      		DEC R17
0002e4 f7e9                      	BRNE LOOP_BUFF1_
0002e5 9120 0214                 	LDS R18, 0x214
0002e7 9321                      	ST Z+, R18
0002e8 9508                      RET ; Return to caller
                                 
                                 ;keyboard part
0002e9 ef00                      CONTEXT_SWITCH: LDI R16, 0xF0  ; Copy 0b1111 0000 to R16
0002ea e01f                      			    LDI R17, 0x0F  ; Copy 0b0000 1111 to R17
                                 
                                 
                                 
0002eb b90b                      			    OUT PORTD, R16 ; Set PORTD to R16
0002ec b91a                      	            OUT DDRD, R17  ; Set DDRD to R17  	
0002ed 9508                      			    RET ; Return to caller
                                 ;keyboard part
0002ee e00f                      RESET_CONTEXT: LDI R16, 0x0F ; keyboard set
0002ef ef10                      			   LDI R17, 0xF0
                                 
0002f0 b90b                      			   OUT PORTD, R16
0002f1 b91a                      		       OUT DDRD, R17
0002f2 9508                      			   RET ; Return to caller
                                 
                                 
                                 ;Funtion to shift column data on for a pattern
                                 execute_col_loop:
0002f3 9140 0383                 	LDS DummyReg, SCREEN_STATE
0002f5 3042                      	CPI DummyReg, game_screen
0002f6 f119                      	BREQ screenbuff_display
0002f7 c000                      	RJMP charbuff_display
                                 	
                                 	charbuff_display:
                                 		;increment Z till RowIndex for a character is reached
0002f8 9110 0386                 		LDS Local_index1, RowIndex
                                 		Loop_Z:
0002fa 9135                      			LPM PAT_COL1, Z+
0002fb 951a                      			DEC Local_index1
0002fc f7e9                      		BRNE Loop_Z
                                 
0002fd e120                      	 	LDI Local_index2, 16  ;index to shift screen 16 times for every screen block
                                 		Col_loop2:		
                                 			;shift 5bit Column pattern into Shift Reg
0002fe e015                      			LDI Local_index1, 5	
                                 			Col_loop3: 
0002ff 982b                      				CBI PORTB,3 ;pixel_off
000300 fd30                      				SBRC PAT_COL1, 0 ;pixel turned off if pattern's LSB is 0
000301 9a2b                      				SBI PORTB,3	;pixel on
000302 982d                      				CBI PORTB, 5 ;falling edge of shift-reg clock
000303 9a2d                      				SBI PORTB, 5 ;rising edge of clk
000304 9536                      				LSR PAT_COL1 ; right shifting pattern for next bit
000305 951a                      				DEC Local_index1
000306 f7c1                      			BRNE Col_loop3
                                 
                                 			;Increment Z pointer by 8 to point to same row in next character
000307 e018                      			LDI Local_index1,8
                                 			Loop_Z2:
000308 9135                      				LPM PAT_COL1,Z+
000309 951a                      				DEC Local_index1
00030a f7e9                      			BRNE Loop_Z2
00030b 952a                      			DEC Local_index2
00030c f789                      		BRNE col_loop2
                                 
                                 		;Restoring Z pointer address before next row access
                                 
00030d e120                      		LDI Local_index2, 16  ;index to shift screen 16 times for every screen block
                                 		rev_loop1:
                                 			;Decrement Z pointer by 8 to point to same row in next character
00030e e018                      			LDI Local_index1,8
                                 			rev_loop2:
00030f 9132                      				LD PAT_COL1, -Z
000310 951a                      				DEC Local_index1
000311 f7e9                      			BRNE rev_loop2
000312 952a                      			DEC Local_index2
000313 f7d1                      		BRNE rev_loop1
                                 	
                                 		;increment Z till RowIndex for a character is reached
000314 9110 0386                 		LDS Local_index1, RowIndex
                                 		rev_loop3:
000316 9132                      			LD PAT_COL1, -Z
000317 951a                      			DEC Local_index1
000318 f7e9                      		BRNE rev_loop3
000319 9508                      	RET
                                 
                                 	screenbuff_display:
00031a e02a                      		LDI Local_index2, 10  ;index to shift screen 80 times for every screen block
                                 		Col_loop4:
                                 			;shift 5bit Column pattern into Shift Reg
00031b 8130                      			LD PAT_COL1, Z
00031c e018                      			LDI Local_index1, 8	
                                 			Col_loop5: 
00031d 982b                      				CBI PORTB,3 ;pixel_off
00031e fd30                      				SBRC PAT_COL1, 0 ;pixel turned off if pattern's LSB is 0
00031f 9a2b                      				SBI PORTB,3	;pixel on
000320 982d                      				CBI PORTB, 5 ;falling edge of shift-reg clock
000321 9a2d                      				SBI PORTB, 5 ;rising edge of clk
000322 9536                      				LSR PAT_COL1 ; right shifting pattern for next bit
000323 951a                      				DEC Local_index1
000324 f7c1                      			BRNE Col_loop5
000325 9131                      			LD PAT_COL1, Z+	
000326 952a                      			DEC Local_index2
000327 f799                      		BRNE Col_loop4
000328 9508                      	RET
                                 
                                 ;function to shift row data for a pattern
                                 execute_row_loop:
000329 e018                      	LDI Local_index1, 0x08 
00032a 9488                      	CLC
                                 	LoopRow:
00032b 982b                      		CBI PORTB, 3 
00032c 9140 0386                 		LDS DummyReg, RowIndex
00032e 1714                      		CP Local_index1,DummyReg
00032f f409                      		BRNE Row_not_on
000330 9a2b                      		SBI PORTB, 3 
                                 		Row_not_on: 
000331 982d                      			CBI PORTB, 5 
000332 9a2d                      			SBI PORTB, 5
000333 951a                      		DEC Local_index1 
000334 f7b1                      	BRNE LoopRow
000335 9508                      RET
                                 
                                 ;function to latch shift register data to output
                                 latch_shift_reg:
000336 982c                      	CBI PORTB, 4
000337 9a2c                      	SBI PORTB, 4 
000338 ef1f                      	LDI Local_index1, 255 ;index for delay loop
                                 	delay_loop:
000339 0000                      		NOP
00033a 951a                      		DEC Local_index1
00033b f7e9                      	BRNE delay_loop
00033c 982c                      	CBI PORTB, 4
00033d 9508                      RET
                                 
00033e e0ea                      SHIFT_Z: LDI ZL, 0x0A
00033f e0f1                      		   LDI ZH, 0x01
000340 95e3                      		    INC_LOOP: INC ZL
000341 954a                      					DEC R20
000342 f7e9                      					BRNE INC_LOOP
                                 			
000343 9508                      		    RET
                                 
000344 e614                      BULLET_DELAY: LDI Local_index1, 100
000345 0000                      	BLOOP:  NOP
000346 efcf                      	LDI R28, 0xFF
000347 0000                      		BNESTED: NOP
000348 95ca                      				DEC R28
000349 f7e9                      				BRNE BNESTED
00034a 951a                      	DEC Local_index1
00034b f7c9                      	BRNE BLOOP
00034c 9508                      	RET
                                 
00034d e518                      DISPLAY_INTERMEDIATE_STATE: LDI R17, 88
00034e 982b                      				   CBI PORTB, 3
00034f 982d                      				   SEND_DATA: CBI PORTB, 5
000350 9a2d                      							  SBI PORTB, 5
000351 951a                      							  DEC R17
000352 f7e1                      							  BRNE SEND_DATA
000353 982c                      					CBI PORTB, 4
000354 9a2c                      					SBI PORTB, 4
000355 982c                      					CBI PORTB, 4
                                 					
                                 				  
000356 9508                      					RET
000357 93ef                      PUSH_PROTECT: PUSH ZL
000358 93ff                      			  PUSH ZH
000359 922f                      			  PUSH R2
00035a 932f                      			  PUSH R18
00035b 934f                      			  PUSH R20
00035c b62f                      			  IN R2, SREG
                                 
00035d be2f                      POP_PROTECT: OUT SREG, R2
00035e 914f                      			 POP R20
00035f 912f                      			 POP R18
000360 902f                      			 POP R2
000361 91ff                      			 POP ZH
000362 91ef                      			 POP ZL
                                 
                                 ;R0 and R24 re reserved for this timer interrupt
                                 ;Please use them elsewhere cautiously
                                 Timer2Interrupt: 
000363 b60f                      	IN R0, SREG
000364 9180 0387                 	LDS R24, BUZZ_PATTERN
000366 378b                      	CPI R24, BTN8_PATTERN
000367 f029                      	BREQ MoveKeyPressed
000368 3b8b                      	CPI R24, BTN5_PATTERN
000369 f049                      	BREQ ShootKeyPressed
00036a 3d8b                      	CPI R24, BTN2_PATTERN
00036b f009                      	BREQ MoveKeyPressed
00036c c00c                      	RJMP DefaultSound
                                 
                                 	MoveKeyPressed:
00036d e28e                      		LDI R24, 0x2E
00036e 9380 00b2                 		STS TCNT2, R24
000370 9a19                      		SBI PINB, 1 ; toggle output of PB1 by setting PINB,1
000371 be0f                      		OUT SREG, R0
000372 9518                      		RETI
                                 	ShootKeyPressed:
000373 e18e                      		LDI R24, 0x1E
000374 9380 00b2                 		STS TCNT2, R24
000376 9a19                      		SBI PINB, 1 ; toggle output of PB1 by setting PINB,1
000377 be0f                      		OUT SREG, R0
000378 9518                      		RETI		
                                 	DefaultSound:
000379 ef8f                      		LDI R24, 0xFF
00037a 9380 00b2                 		STS TCNT2, R24
00037c 9a19                      		SBI PINB, 1 ; toggle output of PB1 by setting PINB,1
00037d be0f                      		OUT SREG, R0
00037e 9518                      		RETI		
                                 
00037f ef0f                      Timer1Interrupt: LDI R16, 0xFF
000380 ed1f                      				LDI R17, 0xDF
000381 9300 0084                 				STS TCNT1L,R16
000383 9310 0085                 				STS TCNT1H,R17
                                 				
000385 932f                      				PUSH R18
                                 
000386 e021                      				LDI R18, 1
000387 9320 0380                 				STS boss_shoot_status, R18
                                 
000389 912f                      				POP R18
00038a 9518                      				RETI
                                 
00038b e011                      Timer0interrupt: LDI R17, 1
00038c bd16                      				 OUT TCNT0,R17
                                 ;				 ;CALL DISPLAY_INTERMEDIATE_STATE
00038d 940e 00e0                 				 CALL UPDATE_BULLETSTATE
                                 ;				 ;CALL CHECK_STATE
                                 ;				 LDI ZH,0x01
                                 ;				 LDI ZL,0x00
00038f 9842                      				 CBI PORTC, 2
000390 9518                      				 RETI
                                 
                                 JoystickInterrupt:				
000391 9140 0384                 					LDS DummyReg, JOY_STK_STATE		;Stores last state of joystick for change after two actions on interrupt
000393 ff40                      					SBRS DummyReg, 0				; skip state increase if previous state was joy stick not pressed
000394 940e 039e                 					CALL increment_state
000396 9140 0384                 					LDS DummyReg, JOY_STK_STATE
000398 9543                      					INC DummyReg
000399 9340 0384                 					STS JOY_STK_STATE, DummyReg
00039b e000                      				    LDI R16, 0x00
00039c bb0b                      				    OUT PCIFR, R16 ; reset interrupt
00039d 9518                      					RETI										
                                 
                                 increment_state:
00039e 9140 0383                 	LDS DummyReg, SCREEN_STATE
0003a0 3041                      	CPI DummyReg, start_screen
0003a1 f031                      	BREQ to_next_state
0003a2 3042                      	CPI DummyReg, game_screen
0003a3 f021                      	BREQ to_next_state
0003a4 3043                      	CPI DummyReg, over_screen
0003a5 f031                      	BREQ to_start_state
0003a6 3044                      	CPI DummyReg, win_screen
0003a7 f021                      	BREQ to_start_state
                                 
                                 	to_next_state:
0003a8 9543                      		INC DummyReg
0003a9 9340 0383                 		STS SCREEN_STATE, DummyReg
0003ab 9508                      		RET
                                 	to_start_state:
0003ac e041                      		LDI DummyReg, start_screen
0003ad 9340 0383                 		STS SCREEN_STATE, DummyReg
0003af 9508                      		RET
                                 
                                 ;character memory table
                                 ;Stores >START!
                                 ;		  ----
                                 CharTable1:
0003b0 0000
0003b1 0000
0003b2 0000
0003b3 0000                      .DB 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000 ;Nothing
0003b4 0000
0003b5 0000
0003b6 0000
0003b7 0000                      .DB 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000 ;Nothing
0003b8 0000
0003b9 1f00
0003ba 0000
0003bb 0000                      .DB 0b00000, 0b00000, 0b00000, 0b11111, 0b00000, 0b00000, 0b00000, 0b00000 ;line
0003bc 0000
0003bd 1f00
0003be 0000
0003bf 0000                      .DB 0b00000, 0b00000, 0b00000, 0b11111, 0b00000, 0b00000, 0b00000, 0b00000 ;line
0003c0 0000
0003c1 1f00
0003c2 0000
0003c3 0000                      .DB 0b00000, 0b00000, 0b00000, 0b11111, 0b00000, 0b00000, 0b00000, 0b00000 ;line
0003c4 0000
0003c5 1f00
0003c6 0000
0003c7 0000                      .DB 0b00000, 0b00000, 0b00000, 0b11111, 0b00000, 0b00000, 0b00000, 0b00000 ;line
0003c8 0000
0003c9 0000
0003ca 0000
0003cb 0000                      .DB 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000 ;Nothing
0003cc 0000
0003cd 0000
0003ce 0000
0003cf 0000                      .DB 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000 ;Nothing
0003d0 0000
0003d1 0000
0003d2 0000
0003d3 0000                      .DB 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000 ;Nothing
0003d4 0404
0003d5 0404
0003d6 0004
0003d7 0004                      .DB 0b00100, 0b00100, 0b00100, 0b00100, 0b00100, 0b00000, 0b00100, 0b00000 ;exclamation
0003d8 040e
0003d9 0404
0003da 0404
0003db 0004                      .DB 0b01110, 0b00100, 0b00100, 0b00100, 0b00100, 0b00100, 0b00100, 0b00000 ;T
0003dc 090e
0003dd 0e09
0003de 0a0c
0003df 0009                      .DB 0b01110, 0b01001, 0b01001, 0b01110, 0b01100, 0b01010, 0b01001, 0b00000 ;R
0003e0 0906
0003e1 0f09
0003e2 0909
0003e3 0009                      .DB 0b00110, 0b01001, 0b01001, 0b01111, 0b01001, 0b01001, 0b01001, 0b00000 ;A
0003e4 040e
0003e5 0404
0003e6 0404
0003e7 0004                      .DB 0b01110, 0b00100, 0b00100, 0b00100, 0b00100, 0b00100, 0b00100, 0b00000 ;T
0003e8 0807
0003e9 0608
0003ea 0101
0003eb 000e                      .DB 0b00111, 0b01000, 0b01000, 0b00110, 0b00001, 0b00001, 0b01110, 0b00000 ;S
0003ec 0400
0003ed 0102
0003ee 0402
0003ef 0000                      .DB 0b00000, 0b00100, 0b00010, 0b00001, 0b00010, 0b00100, 0b00000, 0b00000 ;small arrow
0003f0 0000
0003f1 0000
0003f2 0000
0003f3 0000                      .DB 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000 ;Nothing
                                 
                                 CharTable2:
0003f4 090e
0003f5 0e09
0003f6 0a0c
0003f7 0009                      .DB 0b01110, 0b01001, 0b01001, 0b01110, 0b01100, 0b01010, 0b01001, 0b00000 ;R
0003f8 080f
0003f9 0f08
0003fa 0808
0003fb 000f                      .DB 0b01111, 0b01000, 0b01000, 0b01111, 0b01000, 0b01000, 0b01111, 0b00000 ;E
0003fc 1111
0003fd 1111
0003fe 0a11
0003ff 0004                      .DB 0b10001, 0b10001, 0b10001, 0b10001, 0b10001, 0b01010, 0b00100, 0b00000 ;V
000400 0906
000401 0909
000402 0909
000403 0006                      .DB 0b00110, 0b01001, 0b01001, 0b01001, 0b01001, 0b01001, 0b00110, 0b00000 ;0
000404 0000
000405 0000
000406 0000
000407 0000                      .DB 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000 ;Nothing
000408 0400
000409 0102
00040a 0402
00040b 0000                      .DB 0b00000, 0b00100, 0b00010, 0b00001, 0b00010, 0b00100, 0b00000, 0b00000 ;small arrow
00040c 0400
00040d 0102
00040e 0402
00040f 0000                      .DB 0b00000, 0b00100, 0b00010, 0b00001, 0b00010, 0b00100, 0b00000, 0b00000 ;small arrow
000410 0000
000411 0000
000412 0000
000413 0000                      .DB 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000 ;Nothing
000414 0000
000415 0000
000416 0000
000417 0000                      .DB 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000 ;Nothing
000418 0400
000419 0102
00041a 0402
00041b 0000                      .DB 0b00000, 0b00100, 0b00010, 0b00001, 0b00010, 0b00100, 0b00000, 0b00000 ;small arrow
00041c 0400
00041d 0102
00041e 0402
00041f 0000                      .DB 0b00000, 0b00100, 0b00010, 0b00001, 0b00010, 0b00100, 0b00000, 0b00000 ;small arrow
000420 0000
000421 0000
000422 0000
000423 0000                      .DB 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000 ;Nothing
000424 080f
000425 0f08
000426 0808
000427 000f                      .DB 0b01111, 0b01000, 0b01000, 0b01111, 0b01000, 0b01000, 0b01111, 0b00000 ;E
000428 1b11
000429 1115
00042a 1111
00042b 0011                      .DB 0b10001, 0b11011, 0b10101, 0b10001, 0b10001, 0b10001, 0b10001, 0b00000 ;M
00042c 0906
00042d 0f09
00042e 0909
00042f 0009                      .DB 0b00110, 0b01001, 0b01001, 0b01111, 0b01001, 0b01001, 0b01001, 0b00000 ;A
000430 0906
000431 0b08
000432 0909
000433 0006                      .DB 0b00110, 0b01001, 0b01000, 0b01011, 0b01001, 0b01001, 0b00110, 0b00000 ;G
                                 
                                 CharTable3:
000434 0000
000435 0000
000436 0000
000437 0000                      .DB 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000 ;Nothing
000438 0400
000439 1b0e
00043a 040e
00043b 0000                      .DB 0b00000, 0b00100, 0b01110, 0b11011, 0b01110, 0b00100, 0b00000, 0b00000 ;Diamond
00043c 0400
00043d 1b0e
00043e 040e
00043f 0000                      .DB 0b00000, 0b00100, 0b01110, 0b11011, 0b01110, 0b00100, 0b00000, 0b00000 ;Diamond
000440 0400
000441 1b0e
000442 040e
000443 0000                      .DB 0b00000, 0b00100, 0b01110, 0b11011, 0b01110, 0b00100, 0b00000, 0b00000 ;Diamond
000444 0400
000445 1b0e
000446 040e
000447 0000                      .DB 0b00000, 0b00100, 0b01110, 0b11011, 0b01110, 0b00100, 0b00000, 0b00000 ;Diamond
000448 0400
000449 1b0e
00044a 040e
00044b 0000                      .DB 0b00000, 0b00100, 0b01110, 0b11011, 0b01110, 0b00100, 0b00000, 0b00000 ;Diamond
00044c 0400
00044d 1b0e
00044e 040e
00044f 0000                      .DB 0b00000, 0b00100, 0b01110, 0b11011, 0b01110, 0b00100, 0b00000, 0b00000 ;Diamond
000450 0000
000451 0000
000452 0000
000453 0000                      .DB 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000 ;Nothing
000454 1111
000455 1519
000456 1113
000457 1011                      .DB 0b10001, 0b10001, 0b11001, 0b10101, 0b10011, 0b10001, 0b10001, 0b10000 ;N
000458 040e
000459 0404
00045a 0404
00045b 000e                      .DB 0b01110, 0b00100, 0b00100, 0b00100, 0b00100, 0b00100, 0b01110, 0b00000 ;I
00045c 1111
00045d 1111
00045e 1b15
00045f 0011                      .DB 0b10001, 0b10001, 0b10001, 0b10001, 0b10101, 0b11011, 0b10001, 0b00000 ;W
000460 0000
000461 0000
000462 0000
000463 0000                      .DB 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000 ;Nothing
000464 0000
000465 0000
000466 0000
000467 0000                      .DB 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000 ;Nothing
000468 0909
000469 0909
00046a 0909
00046b 0006                      .DB 0b01001, 0b01001, 0b01001, 0b01001, 0b01001, 0b01001, 0b00110, 0b00000 ;U
00046c 0906
00046d 0909
00046e 0909
00046f 0006                      .DB 0b00110, 0b01001, 0b01001, 0b01001, 0b01001, 0b01001, 0b00110, 0b00000 ;0
000470 0a11
000471 0404
000472 0404


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega328P" register use summary:
x  :  12 y  :  12 z  :  86 r0 :   4 r1 :   0 r2 :  18 r3 :   0 r4 :   0 
r5 :   0 r6 :   0 r7 :   0 r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 
r13:   0 r14:   0 r15:   0 r16: 125 r17:  60 r18:  57 r19:  16 r20: 134 
r21:   0 r22:   0 r23:   0 r24:  10 r25:   9 r26:  21 r27:   3 r28:   8 
r29:   2 r30:  84 r31:  19 
Registers used: 18 out of 35 (51.4%)

"ATmega328P" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   0 add   :   0 adiw  :   0 and   :   0 
andi  :   0 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   6 brcs  :   0 break :   0 breq  :  31 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 brlt  :   0 brmi  :   0 
brne  :  22 brpl  :   0 brsh  :   0 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :  48 cbi   :  15 cbr   :   0 
clc   :   3 clh   :   0 cli   :   0 cln   :   0 clr   :   0 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :   1 cpc   :   0 
cpi   :  31 cpse  :   0 dec   :  22 eor   :   0 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :   0 ijmp  :   0 in    :   7 inc   :  10 jmp   :   0 
ld    :  43 ldd   :  11 ldi   : 209 lds   :  19 lpm   :   2 lsl   :   4 
lsr   :   6 mov   :   4 movw  :   0 mul   :   0 muls  :   0 mulsu :   0 
neg   :   0 nop   :   3 or    :   6 ori   :   0 out   :  17 pop   :  22 
push  :  18 rcall :  14 ret   :  40 reti  :   7 rjmp  :  13 rol   :   0 
ror   :   0 sbc   :   0 sbci  :   0 sbi   :  20 sbic  :   0 sbis  :   0 
sbiw  :   0 sbr   :   0 sbrc  :   2 sbrs  :   1 sec   :   0 seh   :   0 
sei   :   1 sen   :   0 ser   :   0 ses   :   0 set   :   0 sev   :   0 
sez   :   0 sleep :   0 spm   :   0 st    :  54 std   :   0 sts   :  68 
sub   :   1 subi  :   0 swap  :   0 tst   :   0 wdr   :   0 
Instructions used: 35 out of 113 (31.0%)

"ATmega328P" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0008e8   1832    392   2224   32768   6.8%
[.dseg] 0x000100 0x000100      0      0      0    2048   0.0%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 0 warnings
