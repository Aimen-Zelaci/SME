
AVRASM ver. 2.2.8  C:\Users\Slash\Downloads\SME\ships_design\AssemblerApplication1\main.asm Fri May 20 21:14:58 2022

[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.6.364\avrasm\inc\m328Pdef.inc'
C:\Users\Slash\Downloads\SME\ships_design\AssemblerApplication1\main.asm(10): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.6.364\avrasm\inc\m328pdef.inc'
[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.6.364\avrasm\inc\m328Pdef.inc'
C:\Users\Slash\Downloads\SME\ships_design\AssemblerApplication1\main.asm(10): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.6.364\avrasm\inc\m328pdef.inc'
                                 
                                 
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega328P.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m328Pdef.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega328P
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega328P
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M328PDEF_INC_
                                 #define _M328PDEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega328P
                                 #pragma AVRPART ADMIN PART_NAME ATmega328P
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x95
                                 .equ	SIGNATURE_002	= 0x0f
                                 
                                 #pragma AVRPART CORE CORE_VERSION V2E
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	UDR0	= 0xc6	; MEMORY MAPPED
                                 .equ	UBRR0L	= 0xc4	; MEMORY MAPPED
                                 .equ	UBRR0H	= 0xc5	; MEMORY MAPPED
                                 .equ	UCSR0C	= 0xc2	; MEMORY MAPPED
                                 .equ	UCSR0B	= 0xc1	; MEMORY MAPPED
                                 .equ	UCSR0A	= 0xc0	; MEMORY MAPPED
                                 .equ	TWAMR	= 0xbd	; MEMORY MAPPED
                                 .equ	TWCR	= 0xbc	; MEMORY MAPPED
                                 .equ	TWDR	= 0xbb	; MEMORY MAPPED
                                 .equ	TWAR	= 0xba	; MEMORY MAPPED
                                 .equ	TWSR	= 0xb9	; MEMORY MAPPED
                                 .equ	TWBR	= 0xb8	; MEMORY MAPPED
                                 .equ	ASSR	= 0xb6	; MEMORY MAPPED
                                 .equ	OCR2B	= 0xb4	; MEMORY MAPPED
                                 .equ	OCR2A	= 0xb3	; MEMORY MAPPED
                                 .equ	TCNT2	= 0xb2	; MEMORY MAPPED
                                 .equ	TCCR2B	= 0xb1	; MEMORY MAPPED
                                 .equ	TCCR2A	= 0xb0	; MEMORY MAPPED
                                 .equ	OCR1BL	= 0x8a	; MEMORY MAPPED
                                 .equ	OCR1BH	= 0x8b	; MEMORY MAPPED
                                 .equ	OCR1AL	= 0x88	; MEMORY MAPPED
                                 .equ	OCR1AH	= 0x89	; MEMORY MAPPED
                                 .equ	ICR1L	= 0x86	; MEMORY MAPPED
                                 .equ	ICR1H	= 0x87	; MEMORY MAPPED
                                 .equ	TCNT1L	= 0x84	; MEMORY MAPPED
                                 .equ	TCNT1H	= 0x85	; MEMORY MAPPED
                                 .equ	TCCR1C	= 0x82	; MEMORY MAPPED
                                 .equ	TCCR1B	= 0x81	; MEMORY MAPPED
                                 .equ	TCCR1A	= 0x80	; MEMORY MAPPED
                                 .equ	DIDR1	= 0x7f	; MEMORY MAPPED
                                 .equ	DIDR0	= 0x7e	; MEMORY MAPPED
                                 .equ	ADMUX	= 0x7c	; MEMORY MAPPED
                                 .equ	ADCSRB	= 0x7b	; MEMORY MAPPED
                                 .equ	ADCSRA	= 0x7a	; MEMORY MAPPED
                                 .equ	ADCH	= 0x79	; MEMORY MAPPED
                                 .equ	ADCL	= 0x78	; MEMORY MAPPED
                                 .equ	TIMSK2	= 0x70	; MEMORY MAPPED
                                 .equ	TIMSK1	= 0x6f	; MEMORY MAPPED
                                 .equ	TIMSK0	= 0x6e	; MEMORY MAPPED
                                 .equ	PCMSK1	= 0x6c	; MEMORY MAPPED
                                 .equ	PCMSK2	= 0x6d	; MEMORY MAPPED
                                 .equ	PCMSK0	= 0x6b	; MEMORY MAPPED
                                 .equ	EICRA	= 0x69	; MEMORY MAPPED
                                 .equ	PCICR	= 0x68	; MEMORY MAPPED
                                 .equ	OSCCAL	= 0x66	; MEMORY MAPPED
                                 .equ	PRR	= 0x64	; MEMORY MAPPED
                                 .equ	CLKPR	= 0x61	; MEMORY MAPPED
                                 .equ	WDTCSR	= 0x60	; MEMORY MAPPED
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	SPMCSR	= 0x37
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUSR	= 0x34
                                 .equ	SMCR	= 0x33
                                 .equ	ACSR	= 0x30
                                 .equ	SPDR	= 0x2e
                                 .equ	SPSR	= 0x2d
                                 .equ	SPCR	= 0x2c
                                 .equ	GPIOR2	= 0x2b
                                 .equ	GPIOR1	= 0x2a
                                 .equ	OCR0B	= 0x28
                                 .equ	OCR0A	= 0x27
                                 .equ	TCNT0	= 0x26
                                 .equ	TCCR0B	= 0x25
                                 .equ	TCCR0A	= 0x24
                                 .equ	GTCCR	= 0x23
                                 .equ	EEARH	= 0x22
                                 .equ	EEARL	= 0x21
                                 .equ	EEDR	= 0x20
                                 .equ	EECR	= 0x1f
                                 .equ	GPIOR0	= 0x1e
                                 .equ	EIMSK	= 0x1d
                                 .equ	EIFR	= 0x1c
                                 .equ	PCIFR	= 0x1b
                                 .equ	TIFR2	= 0x17
                                 .equ	TIFR1	= 0x16
                                 .equ	TIFR0	= 0x15
                                 .equ	PORTD	= 0x0b
                                 .equ	DDRD	= 0x0a
                                 .equ	PIND	= 0x09
                                 .equ	PORTC	= 0x08
                                 .equ	DDRC	= 0x07
                                 .equ	PINC	= 0x06
                                 .equ	PORTB	= 0x05
                                 .equ	DDRB	= 0x04
                                 .equ	PINB	= 0x03
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** USART0 ***********************
                                 ; UDR0 - USART I/O Data Register
                                 .equ	UDR0_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR0_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR0_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR0_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR0_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR0_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR0_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR0_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR0A - USART Control and Status Register A
                                 .equ	MPCM0	= 0	; Multi-processor Communication Mode
                                 .equ	U2X0	= 1	; Double the USART transmission speed
                                 .equ	UPE0	= 2	; Parity Error
                                 .equ	DOR0	= 3	; Data overRun
                                 .equ	FE0	= 4	; Framing Error
                                 .equ	UDRE0	= 5	; USART Data Register Empty
                                 .equ	TXC0	= 6	; USART Transmitt Complete
                                 .equ	RXC0	= 7	; USART Receive Complete
                                 
                                 ; UCSR0B - USART Control and Status Register B
                                 .equ	TXB80	= 0	; Transmit Data Bit 8
                                 .equ	RXB80	= 1	; Receive Data Bit 8
                                 .equ	UCSZ02	= 2	; Character Size
                                 .equ	TXEN0	= 3	; Transmitter Enable
                                 .equ	RXEN0	= 4	; Receiver Enable
                                 .equ	UDRIE0	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE0	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE0	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR0C - USART Control and Status Register C
                                 .equ	UCPOL0	= 0	; Clock Polarity
                                 .equ	UCSZ00	= 1	; Character Size
                                 .equ	UCPHA0	= UCSZ00	; For compatibility
                                 .equ	UCSZ01	= 2	; Character Size
                                 .equ	UDORD0	= UCSZ01	; For compatibility
                                 .equ	USBS0	= 3	; Stop Bit Select
                                 .equ	UPM00	= 4	; Parity Mode Bit 0
                                 .equ	UPM01	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL00	= 6	; USART Mode Select
                                 .equ	UMSEL0	= UMSEL00	; For compatibility
                                 .equ	UMSEL01	= 7	; USART Mode Select
                                 .equ	UMSEL1	= UMSEL01	; For compatibility
                                 
                                 ; UBRR0H - USART Baud Rate Register High Byte
                                 .equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR0L - USART Baud Rate Register Low Byte
                                 .equ	_UBRR0	= 0	; USART Baud Rate Register bit 0
                                 .equ	_UBRR1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** TWI **************************
                                 ; TWAMR - TWI (Slave) Address Mask Register
                                 .equ	TWAM0	= 1	; 
                                 .equ	TWAMR0	= TWAM0	; For compatibility
                                 .equ	TWAM1	= 2	; 
                                 .equ	TWAMR1	= TWAM1	; For compatibility
                                 .equ	TWAM2	= 3	; 
                                 .equ	TWAMR2	= TWAM2	; For compatibility
                                 .equ	TWAM3	= 4	; 
                                 .equ	TWAMR3	= TWAM3	; For compatibility
                                 .equ	TWAM4	= 5	; 
                                 .equ	TWAMR4	= TWAM4	; For compatibility
                                 .equ	TWAM5	= 6	; 
                                 .equ	TWAMR5	= TWAM5	; For compatibility
                                 .equ	TWAM6	= 7	; 
                                 .equ	TWAMR6	= TWAM6	; For compatibility
                                 
                                 ; TWBR - TWI Bit Rate register
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	TWPS0	= 0	; TWI Prescaler
                                 .equ	TWPS1	= 1	; TWI Prescaler
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	TWS7	= 7	; TWI Status
                                 
                                 ; TWDR - TWI Data register
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK1 - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE1	= 0	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1A	= 1	; Timer/Counter1 Output CompareA Match Interrupt Enable
                                 .equ	OCIE1B	= 2	; Timer/Counter1 Output CompareB Match Interrupt Enable
                                 .equ	ICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR1 - Timer/Counter Interrupt Flag register
                                 .equ	TOV1	= 0	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1A	= 1	; Output Compare Flag 1A
                                 .equ	OCF1B	= 2	; Output Compare Flag 1B
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode
                                 .equ	WGM11	= 1	; Waveform Generation Mode
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Comparet Ouput Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 ; TCCR1C - Timer/Counter1 Control Register C
                                 .equ	FOC1B	= 6	; 
                                 .equ	FOC1A	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 .equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TIMSK2 - Timer/Counter Interrupt Mask register
                                 .equ	TOIE2	= 0	; Timer/Counter2 Overflow Interrupt Enable
                                 .equ	TOIE2A	= TOIE2	; For compatibility
                                 .equ	OCIE2A	= 1	; Timer/Counter2 Output Compare Match A Interrupt Enable
                                 .equ	OCIE2B	= 2	; Timer/Counter2 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR2 - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 0	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2A	= 1	; Output Compare Flag 2A
                                 .equ	OCF2B	= 2	; Output Compare Flag 2B
                                 
                                 ; TCCR2A - Timer/Counter2 Control Register A
                                 .equ	WGM20	= 0	; Waveform Genration Mode
                                 .equ	WGM21	= 1	; Waveform Genration Mode
                                 .equ	COM2B0	= 4	; Compare Output Mode bit 0
                                 .equ	COM2B1	= 5	; Compare Output Mode bit 1
                                 .equ	COM2A0	= 6	; Compare Output Mode bit 1
                                 .equ	COM2A1	= 7	; Compare Output Mode bit 1
                                 
                                 ; TCCR2B - Timer/Counter2 Control Register B
                                 .equ	CS20	= 0	; Clock Select bit 0
                                 .equ	CS21	= 1	; Clock Select bit 1
                                 .equ	CS22	= 2	; Clock Select bit 2
                                 .equ	WGM22	= 3	; Waveform Generation Mode
                                 .equ	FOC2B	= 6	; Force Output Compare B
                                 .equ	FOC2A	= 7	; Force Output Compare A
                                 
                                 ; TCNT2 - Timer/Counter2
                                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                                 
                                 ; OCR2A - Timer/Counter2 Output Compare Register A
                                 .equ	OCR2A_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2A_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2A_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2A_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2A_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2A_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2A_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2A_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; OCR2B - Timer/Counter2 Output Compare Register B
                                 .equ	OCR2B_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2B_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2B_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2B_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2B_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2B_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2B_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2B_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; ASSR - Asynchronous Status Register
                                 .equ	TCR2BUB	= 0	; Timer/Counter Control Register2 Update Busy
                                 .equ	TCR2AUB	= 1	; Timer/Counter Control Register2 Update Busy
                                 .equ	OCR2BUB	= 2	; Output Compare Register 2 Update Busy
                                 .equ	OCR2AUB	= 3	; Output Compare Register2 Update Busy
                                 .equ	TCN2UB	= 4	; Timer/Counter2 Update Busy
                                 .equ	AS2	= 5	; Asynchronous Timer/Counter2
                                 .equ	EXCLK	= 6	; Enable External Clock Input
                                 
                                 ; GTCCR - General Timer Counter Control register
                                 .equ	PSRASY	= 1	; Prescaler Reset Timer/Counter2
                                 .equ	PSR2	= PSRASY	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register A
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADATE	= 5	; ADC  Auto Trigger Enable
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCSRB - The ADC Control and Status register B
                                 .equ	ADTS0	= 0	; ADC Auto Trigger Source bit 0
                                 .equ	ADTS1	= 1	; ADC Auto Trigger Source bit 1
                                 .equ	ADTS2	= 2	; ADC Auto Trigger Source bit 2
                                 .equ	ACME	= 6	; 
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 ; DIDR0 - Digital Input Disable Register
                                 .equ	ADC0D	= 0	; 
                                 .equ	ADC1D	= 1	; 
                                 .equ	ADC2D	= 2	; 
                                 .equ	ADC3D	= 3	; 
                                 .equ	ADC4D	= 4	; 
                                 .equ	ADC5D	= 5	; 
                                 
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 ; DIDR1 - Digital Input Disable Register 1
                                 .equ	AIN0D	= 0	; AIN0 Digital Input Disable
                                 .equ	AIN1D	= 1	; AIN1 Digital Input Disable
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TIMSK0 - Timer/Counter0 Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0A	= 1	; Timer/Counter0 Output Compare Match A Interrupt Enable
                                 .equ	OCIE0B	= 2	; Timer/Counter0 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR0 - Timer/Counter0 Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0A	= 1	; Timer/Counter0 Output Compare Flag 0A
                                 .equ	OCF0B	= 2	; Timer/Counter0 Output Compare Flag 0B
                                 
                                 ; TCCR0A - Timer/Counter  Control Register A
                                 .equ	WGM00	= 0	; Waveform Generation Mode
                                 .equ	WGM01	= 1	; Waveform Generation Mode
                                 .equ	COM0B0	= 4	; Compare Output Mode, Fast PWm
                                 .equ	COM0B1	= 5	; Compare Output Mode, Fast PWm
                                 .equ	COM0A0	= 6	; Compare Output Mode, Phase Correct PWM Mode
                                 .equ	COM0A1	= 7	; Compare Output Mode, Phase Correct PWM Mode
                                 
                                 ; TCCR0B - Timer/Counter Control Register B
                                 .equ	CS00	= 0	; Clock Select
                                 .equ	CS01	= 1	; Clock Select
                                 .equ	CS02	= 2	; Clock Select
                                 .equ	WGM02	= 3	; 
                                 .equ	FOC0B	= 6	; Force Output Compare B
                                 .equ	FOC0A	= 7	; Force Output Compare A
                                 
                                 ; TCNT0 - Timer/Counter0
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0A - Timer/Counter0 Output Compare Register
                                 .equ	OCR0A_0	= 0	; 
                                 .equ	OCR0A_1	= 1	; 
                                 .equ	OCR0A_2	= 2	; 
                                 .equ	OCR0A_3	= 3	; 
                                 .equ	OCR0A_4	= 4	; 
                                 .equ	OCR0A_5	= 5	; 
                                 .equ	OCR0A_6	= 6	; 
                                 .equ	OCR0A_7	= 7	; 
                                 
                                 ; OCR0B - Timer/Counter0 Output Compare Register
                                 .equ	OCR0B_0	= 0	; 
                                 .equ	OCR0B_1	= 1	; 
                                 .equ	OCR0B_2	= 2	; 
                                 .equ	OCR0B_3	= 3	; 
                                 .equ	OCR0B_4	= 4	; 
                                 .equ	OCR0B_5	= 5	; 
                                 .equ	OCR0B_6	= 6	; 
                                 .equ	OCR0B_7	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 ;.equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	PSR10	= PSRSYNC	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; EICRA - External Interrupt Control Register
                                 .equ	ISC00	= 0	; External Interrupt Sense Control 0 Bit 0
                                 .equ	ISC01	= 1	; External Interrupt Sense Control 0 Bit 1
                                 .equ	ISC10	= 2	; External Interrupt Sense Control 1 Bit 0
                                 .equ	ISC11	= 3	; External Interrupt Sense Control 1 Bit 1
                                 
                                 ; EIMSK - External Interrupt Mask Register
                                 .equ	INT0	= 0	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 1	; External Interrupt Request 1 Enable
                                 
                                 ; EIFR - External Interrupt Flag Register
                                 .equ	INTF0	= 0	; External Interrupt Flag 0
                                 .equ	INTF1	= 1	; External Interrupt Flag 1
                                 
                                 ; PCICR - Pin Change Interrupt Control Register
                                 .equ	PCIE0	= 0	; Pin Change Interrupt Enable 0
                                 .equ	PCIE1	= 1	; Pin Change Interrupt Enable 1
                                 .equ	PCIE2	= 2	; Pin Change Interrupt Enable 2
                                 
                                 ; PCMSK2 - Pin Change Mask Register 2
                                 .equ	PCINT16	= 0	; Pin Change Enable Mask 16
                                 .equ	PCINT17	= 1	; Pin Change Enable Mask 17
                                 .equ	PCINT18	= 2	; Pin Change Enable Mask 18
                                 .equ	PCINT19	= 3	; Pin Change Enable Mask 19
                                 .equ	PCINT20	= 4	; Pin Change Enable Mask 20
                                 .equ	PCINT21	= 5	; Pin Change Enable Mask 21
                                 .equ	PCINT22	= 6	; Pin Change Enable Mask 22
                                 .equ	PCINT23	= 7	; Pin Change Enable Mask 23
                                 
                                 ; PCMSK1 - Pin Change Mask Register 1
                                 .equ	PCINT8	= 0	; Pin Change Enable Mask 8
                                 .equ	PCINT9	= 1	; Pin Change Enable Mask 9
                                 .equ	PCINT10	= 2	; Pin Change Enable Mask 10
                                 .equ	PCINT11	= 3	; Pin Change Enable Mask 11
                                 .equ	PCINT12	= 4	; Pin Change Enable Mask 12
                                 .equ	PCINT13	= 5	; Pin Change Enable Mask 13
                                 .equ	PCINT14	= 6	; Pin Change Enable Mask 14
                                 
                                 ; PCMSK0 - Pin Change Mask Register 0
                                 .equ	PCINT0	= 0	; Pin Change Enable Mask 0
                                 .equ	PCINT1	= 1	; Pin Change Enable Mask 1
                                 .equ	PCINT2	= 2	; Pin Change Enable Mask 2
                                 .equ	PCINT3	= 3	; Pin Change Enable Mask 3
                                 .equ	PCINT4	= 4	; Pin Change Enable Mask 4
                                 .equ	PCINT5	= 5	; Pin Change Enable Mask 5
                                 .equ	PCINT6	= 6	; Pin Change Enable Mask 6
                                 .equ	PCINT7	= 7	; Pin Change Enable Mask 7
                                 
                                 ; PCIFR - Pin Change Interrupt Flag Register
                                 .equ	PCIF0	= 0	; Pin Change Interrupt Flag 0
                                 .equ	PCIF1	= 1	; Pin Change Interrupt Flag 1
                                 .equ	PCIF2	= 2	; Pin Change Interrupt Flag 2
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCSR - Watchdog Timer Control Register
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDCE	= 4	; Watchdog Change Enable
                                 .equ	WDP3	= 5	; Watchdog Timer Prescaler Bit 3
                                 .equ	WDIE	= 6	; Watchdog Timeout Interrupt Enable
                                 .equ	WDIF	= 7	; Watchdog Timeout Interrupt Flag
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; CLKPR - Clock Prescale Register
                                 .equ	CLKPS0	= 0	; Clock Prescaler Select Bit 0
                                 .equ	CLKPS1	= 1	; Clock Prescaler Select Bit 1
                                 .equ	CLKPS2	= 2	; Clock Prescaler Select Bit 2
                                 .equ	CLKPS3	= 3	; Clock Prescaler Select Bit 3
                                 .equ	CLKPCE	= 7	; Clock Prescaler Change Enable
                                 
                                 ; SPMCSR - Store Program Memory Control and Status Register
                                 .equ    SELFPRGEN = 0; Added for backwards compatibility
                                 .equ	SPMEN	= 0	; Store Program Memory
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read-While-Write section read enable
                                 .equ    SIGRD   = 5 ; Signature Row Read
                                 .equ	RWWSB	= 6	; Read-While-Write Section Busy
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	IVCE	= 0	; 
                                 .equ	IVSEL	= 1	; 
                                 .equ	PUD	= 4	; 
                                 .equ	BODSE	= 5	; BOD Sleep Enable
                                 .equ	BODS	= 6	; BOD Sleep
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	EXTREF	= EXTRF	; For compatibility
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 
                                 ; SMCR - Sleep Mode Control Register
                                 .equ	SE	= 0	; Sleep Enable
                                 .equ	SM0	= 1	; Sleep Mode Select Bit 0
                                 .equ	SM1	= 2	; Sleep Mode Select Bit 1
                                 .equ	SM2	= 3	; Sleep Mode Select Bit 2
                                 
                                 ; GPIOR2 - General Purpose I/O Register 2
                                 .equ	GPIOR20	= 0	; 
                                 .equ	GPIOR21	= 1	; 
                                 .equ	GPIOR22	= 2	; 
                                 .equ	GPIOR23	= 3	; 
                                 .equ	GPIOR24	= 4	; 
                                 .equ	GPIOR25	= 5	; 
                                 .equ	GPIOR26	= 6	; 
                                 .equ	GPIOR27	= 7	; 
                                 
                                 ; GPIOR1 - General Purpose I/O Register 1
                                 .equ	GPIOR10	= 0	; 
                                 .equ	GPIOR11	= 1	; 
                                 .equ	GPIOR12	= 2	; 
                                 .equ	GPIOR13	= 3	; 
                                 .equ	GPIOR14	= 4	; 
                                 .equ	GPIOR15	= 5	; 
                                 .equ	GPIOR16	= 6	; 
                                 .equ	GPIOR17	= 7	; 
                                 
                                 ; GPIOR0 - General Purpose I/O Register 0
                                 .equ	GPIOR00	= 0	; 
                                 .equ	GPIOR01	= 1	; 
                                 .equ	GPIOR02	= 2	; 
                                 .equ	GPIOR03	= 3	; 
                                 .equ	GPIOR04	= 4	; 
                                 .equ	GPIOR05	= 5	; 
                                 .equ	GPIOR06	= 6	; 
                                 .equ	GPIOR07	= 7	; 
                                 
                                 ; PRR - Power Reduction Register
                                 .equ	PRADC	= 0	; Power Reduction ADC
                                 .equ	PRUSART0	= 1	; Power Reduction USART
                                 .equ	PRSPI	= 2	; Power Reduction Serial Peripheral Interface
                                 .equ	PRTIM1	= 3	; Power Reduction Timer/Counter1
                                 .equ	PRTIM0	= 5	; Power Reduction Timer/Counter0
                                 .equ	PRTIM2	= 6	; Power Reduction Timer/Counter2
                                 .equ	PRTWI	= 7	; Power Reduction TWI
                                 
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEARL - EEPROM Address Register Low Byte
                                 .equ	EEAR0	= 0	; EEPROM Read/Write Access Bit 0
                                 .equ	EEAR1	= 1	; EEPROM Read/Write Access Bit 1
                                 .equ	EEAR2	= 2	; EEPROM Read/Write Access Bit 2
                                 .equ	EEAR3	= 3	; EEPROM Read/Write Access Bit 3
                                 .equ	EEAR4	= 4	; EEPROM Read/Write Access Bit 4
                                 .equ	EEAR5	= 5	; EEPROM Read/Write Access Bit 5
                                 .equ	EEAR6	= 6	; EEPROM Read/Write Access Bit 6
                                 .equ	EEAR7	= 7	; EEPROM Read/Write Access Bit 7
                                 
                                 ; EEARH - EEPROM Address Register High Byte
                                 .equ	EEAR8	= 0	; EEPROM Read/Write Access Bit 8
                                 .equ	EEAR9	= 1	; EEPROM Read/Write Access Bit 9
                                 
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEPE	= 1	; EEPROM Write Enable
                                 .equ	EEMPE	= 2	; EEPROM Master Write Enable
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 .equ	EEPM0	= 4	; EEPROM Programming Mode Bit 0
                                 .equ	EEPM1	= 5	; EEPROM Programming Mode Bit 1
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	SUT0	= 4	; Select start-up time
                                 .equ	SUT1	= 5	; Select start-up time
                                 .equ	CKOUT	= 6	; Clock output
                                 .equ	CKDIV8	= 7	; Divide clock by 8
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select reset vector
                                 .equ	BOOTSZ0	= 1	; Select boot size
                                 .equ	BOOTSZ1	= 2	; Select boot size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	WDTON	= 4	; Watchdog Timer Always On
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	DWEN	= 6	; debugWIRE Enable
                                 .equ	RSTDISBL	= 7	; External reset disable
                                 
                                 ; EXTENDED fuse bits
                                 .equ	BODLEVEL0	= 0	; Brown-out Detector trigger level
                                 .equ	BODLEVEL1	= 1	; Brown-out Detector trigger level
                                 .equ	BODLEVEL2	= 2	; Brown-out Detector trigger level
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x3fff	; Note: Word address
                                 .equ	IOEND	= 0x00ff
                                 .equ	SRAM_START	= 0x0100
                                 .equ	SRAM_SIZE	= 2048
                                 .equ	RAMEND	= 0x08ff
                                 .equ	XRAMEND	= 0x0000
                                 .equ	E2END	= 0x03ff
                                 .equ	EEPROMEND	= 0x03ff
                                 .equ	EEADRBITS	= 10
                                 #pragma AVRPART MEMORY PROG_FLASH 32768
                                 #pragma AVRPART MEMORY EEPROM 1024
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 2048
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0x3800
                                 .equ	NRWW_STOP_ADDR	= 0x3fff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0x37ff
                                 .equ	PAGESIZE	= 64
                                 .equ	FIRSTBOOTSTART	= 0x3f00
                                 .equ	SECONDBOOTSTART	= 0x3e00
                                 .equ	THIRDBOOTSTART	= 0x3c00
                                 .equ	FOURTHBOOTSTART	= 0x3800
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	PCI0addr	= 0x0006	; Pin Change Interrupt Request 0
                                 .equ	PCI1addr	= 0x0008	; Pin Change Interrupt Request 0
                                 .equ	PCI2addr	= 0x000a	; Pin Change Interrupt Request 1
                                 .equ	WDTaddr	= 0x000c	; Watchdog Time-out Interrupt
                                 .equ	OC2Aaddr	= 0x000e	; Timer/Counter2 Compare Match A
                                 .equ	OC2Baddr	= 0x0010	; Timer/Counter2 Compare Match A
                                 .equ	OVF2addr	= 0x0012	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x0014	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x0016	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x0018	; Timer/Counter1 Compare Match B
                                 .equ	OVF1addr	= 0x001a	; Timer/Counter1 Overflow
                                 .equ	OC0Aaddr	= 0x001c	; TimerCounter0 Compare Match A
                                 .equ	OC0Baddr	= 0x001e	; TimerCounter0 Compare Match B
                                 .equ	OVF0addr	= 0x0020	; Timer/Couner0 Overflow
                                 .equ	SPIaddr	= 0x0022	; SPI Serial Transfer Complete
                                 .equ	URXCaddr	= 0x0024	; USART Rx Complete
                                 .equ	UDREaddr	= 0x0026	; USART, Data Register Empty
                                 .equ	UTXCaddr	= 0x0028	; USART Tx Complete
                                 .equ	ADCCaddr	= 0x002a	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x002c	; EEPROM Ready
                                 .equ	ACIaddr	= 0x002e	; Analog Comparator
                                 .equ	TWIaddr	= 0x0030	; Two-wire Serial Interface
                                 .equ	SPMRaddr	= 0x0032	; Store Program Memory Read
                                 
                                 .equ	INT_VECTORS_SIZE	= 52	; size in words
                                 
                                 #endif  /* _M328PDEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 ; UC GAME PROJECT
                                 ;
                                 ; Created: 24-04-2022 10:35:44
                                 ; Authors : Deeksha - Aimen
                                 ;
                                 
                                 
                                 ; Definition file of the ATmega328P
                                 .INCLUDE "m328pdef.inc"
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega328P.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m328Pdef.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega328P
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega328P
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M328PDEF_INC_
                                 #endif  /* _M328PDEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 ; Boot
                                 .ORG 0x0000 ;
000000 c02a                      RJMP Init ; First instruction that is executed by the microcontroller
                                 
                                 ;macro
                                 .DEF Local_index1 = R17
                                 .DEF local_index2 = R18
                                 .DEF PAT_COL1   = R19 ;Temporary Pattern for column
                                 .DEF DummyReg   = R20
                                 .DEF BOSS_SHIPCOUNTER = R25 ; Current active gun index of the boss
                                 
                                 .EQU MonsterNotGunPat = 0b11111001
                                 .EQU MonsterGunPat = 0b11111001
                                 .EQU ShipGun = 0b0011111
                                 .EQU ShipMiddle = 0b00111110
                                 .EQU ShipEnd = 0b0010000
                                 .EQU boss_shoot_status = 0x0380
                                 .EQU Ship_life = 0x0381   ; Global var to store life of ship
                                 .EQU boss_life = 0x0382   ; Global var to store life of boss ship
                                 .EQU SCREEN_STATE = 0x0383  ; Global var to store which screen to display from screen patterns (defined below)
                                 .EQU JOY_STK_STATE = 0x0384 ; Global var to store state of joystick whether low or high
                                 .EQU LAST_KEY = 0x0385    ; Global var to store state of keyboard last pressed
                                 .EQU RowIndex = 0x0386    ; Global var to store Index used to count row number in display
                                 .EQU BUZZ_PATTERN = 0x0387  ; Global var to store key pattern for buzzer sound
                                 
                                 ;.EQU RANDOM_MASK = 0x0388 ; Bit mask for random bit generation tap.
                                 .EQU SEED = 9 ; Random seed for random bit generation
                                 .EQU RANDOM_NUMBER = 0x0388 ; Random number resulting from PSRG
                                 
                                 .EQU UP_STATE = 0x0389
                                 .EQU DOWN_STATE = 0x0390
                                 .EQU MOVE_STATE = 0x0391
                                 .EQU DOWN_STATE_TIMED = 0x0392
                                 .EQU UP_STATE_TIMED = 0x0393
                                 
                                 ;keyboard patterns
                                 .EQU BTN8_PATTERN = 0b01111011 ; Button 8 pressed pattern
                                 .EQU BTN7_PATTERN = 0b01110111 ; Button 7 pressed pattern
                                 .EQU BTN5_PATTERN = 0b10111011 ; Button 5 pressed pattern
                                 .EQU BTN4_PATTERN = 0b10110111 ; Button 4 pressed pattern
                                 .EQU BTN2_PATTERN = 0b11011011 ; Button 2 pressed pattern
                                 .EQU NOBTN_PATTERN =  0b11111111 ; No button preesed pattern
                                 .EQU OTHER_PATTERN = 0b00110011 ; Pattern for the rest of the buttons
                                 .EQU SHIP_DAMAGE = 0b11 ; Pattern checked by buzzer for ship damage
                                 .EQU BOSS_DAMAGE = 0b101 ; Pattern checked by buzzer for boss damage
                                 
                                 ;Screen states
                                 .EQU start_screen = 0x01  ;State for displaying start screen
                                 .EQU game_screen = 0x02   ;State for displaying game screen
                                 .EQU over_screen = 0x03   ;State for displaying game over screen
                                 .EQU win_screen = 0x04    ;State for displaying victory!
                                 
                                 ;Variables
                                 .EQU ShipLifeLine = 0x4E  ;Location of ship lifeline on screenbuffer
                                 .EQU BossLifeLine = 0x4C  ;Location of boss lifeline on screenbuffer
                                 .EQU Lives_ship_5 = 0b11000000 ;lives remaining
                                 .EQU Lives_boss_5 = 0b00011111 ;lives remaing
                                 
                                 ; Interrupts
                                 .ORG 0x0006
000006 c40b                      rjmp JoystickInterrupt
                                 
                                 .ORG 0x0012
000012 c38e                      rjmp Timer2interrupt
                                 
                                 .org 0x001A
00001a c3a9                      rjmp Timer1Interrupt
                                 
                                 .ORG 0x0020
000020 c3ca                      rjmp Timer0interrupt
                                 
                                 .org 0x002A
00002a c3ff                      rjmp AdcInterrupt
                                 
                                 Init:
                                 ; Configure output pin PB3
00002b 9a23                      SBI DDRB, 3 ; Pin PB3 is an output: Data pin SDI (Serial Data In)
00002c 9a24                      SBI DDRB, 4 ; Pin PB4 is an output: Latch/Output pin: LE(Latch Enable) + OE(Output Enable)
00002d 9a25                      SBI DDRB, 5 ; Pin PB5 is an output: Clock pin CLK
                                 
00002e 9820                      CBI DDRB, 0 ; switch to shut down the buzzer
00002f 9a28                      SBI PORTB, 0
                                 
                                 ; Configure input joystick pin PB2
000030 9822                      CBI DDRB,2; pin an input switch
000031 9a2a                      SBI PORTB,2;Enable the pull-up resistor
                                 
                                 ;enabling keyboard input
000032 e00f                      LDI R16, 0x0F
000033 ef10                      LDI R17, 0xF0
000034 b91a                      OUT DDRD, R17
000035 b90b                      OUT PORTD, R16 ; Init keyboard. set all rows to ground and cols to 1
                                 
                                 ;LED
000036 9a3a                      SBI DDRC, 2
000037 9a42                      SBI PORTC,2
000038 9a3b                      SBI DDRC, 3
000039 9a43                      SBI PORTC,3
                                 
                                 ;configure output buzzer in PB1
00003a 9a21                      SBI DDRB,1; output pin
00003b 9829                      CBI PORTB,1 ; pull-down buzzer by default
                                 
                                 ; INIT THE STACK !
00003c e008                      LDI R16, HIGH (RAMEND)
00003d bf0e                      OUT SPH, R16
00003e ef0f                      LDI R16, LOW (RAMEND)
00003f bf0d                      OUT SPL, R16
                                 
                                 ;Initializing state machine
000040 e041                      LDI DummyReg, 0x01
000041 9340 0383                 STS SCREEN_STATE, DummyReg
000043 e040                      LDI DummyReg, 0x00
000044 9340 0384                 STS JOY_STK_STATE, DummyReg
000046 9340 0385                 STS LAST_KEY, DummyReg
000048 e049                      LDI DummyReg, SEED
000049 9340 0388                 STS RANDOM_NUMBER, DummyReg ; init random number to be the seed
                                 
                                 
                                 
                                 ;Establishing start screen
00004b 940e 02ae                 CALL Load_game_play_start
                                 
00004d ee0b                      LDI R16, 0b1110_1011 ;[ADEN,ADSC,ADATE,ADIF,_,ADIE,ADPS2,ADPS1,ADPS0]
00004e 9300 007a                 STS ADCSRA, R16 ;START ANALOG TO DIGITAL CONVERSION
000050 e601                      LDI R16, 0b0110_0001; [REFS1, REFS0, ADLAR, -, _ , MUX3, MUX2, MUX1, MUX0]
000051 9300 007c                 STS ADMUX, R16
                                 
                                 ; timer1Interrupt /* Timer interrupt enabled inside machine state*/
                                 
000053 e005                      LDI R16, 0x05
000054 9300 00b1                 STS TCCR2B, R16 ;prescaler timer 2
000056 e004                      LDI R16, 0x04
000057 9300 0081                 STS TCCR1B, R16 ;prescaler timer 1
000059 e005                      LDI R16, 0x05
00005a bd05                      OUT TCCR0B, R16 ;prescaler timer 0
                                 
00005b ef0f                      LDI R16, 0xFF
00005c ee1f                      LDI R17, 0xEF
00005d 9300 0084                 STS TCNT1L,R16
00005f 9310 0085                 STS TCNT1H,R17
                                 
000061 e001                      LDI R16, 1
000062 9300 006f                 STS TIMSK1, R16
                                 
                                 ;LDI R16, 0x02
                                 ;OUT TCCR0A, R16 ;CTC MODE
                                 ;LDI R16, 100
                                 ;OUT OCR0A, R16
                                 
                                 ; Joystick interrupt
000064 e001                      LDI R16, 0x01
000065 e014                      LDI R17, 4
000066 9300 0068                 STS PCICR, R16
000068 9310 006b                 STS PCMSK0, R17
                                 
00006a 9478                      SEI ;Set golabl interrupt
                                 
                                 ; INIT BOSS ACTIVE GUN COUNTER = it has 6 guns
00006b e096                      LDI BOSS_SHIPCOUNTER, 6
                                 
                                 
                                 ;LDI YL, LOW(NotesTable<<1)
                                 ;LDI YH, HIGH(NOTESTable<<1)
                                 ;Main Function
                                 Main:
00006c 940e 008a                   CALL display
00006e 940e 009a                   CALL load_screen_state
000070 ef1f                        LDI Local_index1, 255 ;index for delay loop
                                   ;SBI PORTC,2
000071 9120 0392                   LDS R18, DOWN_STATE_TIMED
000073 3020                        CPI R18, 0
000074 f011                        BREQ dont_move_down
000075 940e 022c                   CALL MOVE_DOWN
000077 e020                        dont_move_down: LDI R18, 0
000078 9320 0392                 			 STS DOWN_STATE_TIMED, R18
                                 
00007a 9120 0393                    LDS R18, UP_STATE_TIMED
00007c 3020                        CPI R18, 0
00007d f011                        BREQ dont_move_up
00007e 940e 026d                   CALL MOVE_UP
000080 e020                        dont_move_up: LDI R18, 0
000081 9320 0393                 			 STS UP_STATE_TIMED, R18
                                 
000083 9120 0380                   LDS R18, boss_shoot_status
000085 3021                        CPI R18, 1
000086 f729                        BRNE Main
000087 940e 01ff                   CALL BOSS_SHOOT
000089 cfe2                      RJMP Main
                                 	
                                 
                                 Display:
00008a e048                        LDI DummyReg, 0x08
00008b 9340 0386                   STS RowIndex, DummyReg
                                   Send1Row:
00008d 940e 0335                     CALL execute_col_loop
00008f 940e 036b                     CALL execute_row_loop
000091 940e 0378                     CALL Latch_shift_reg
                                 
                                     ;Decrement RowIndex
000093 9140 0386                     LDS DummyReg, RowIndex
000095 954a                          DEC DummyReg
000096 9340 0386                     STS RowIndex, DummyReg
000098 f7a1                        BRNE Send1Row
000099 9508                      RET
                                 
                                 
                                 
                                 Load_screen_state:
00009a 9140 0383                   LDS DummyReg, SCREEN_STATE
00009c 3041                        CPI DummyReg, start_screen
00009d f039                        BREQ load_start_screen
00009e 3042                        CPI DummyReg, game_screen
00009f f099                        BREQ load_game_screen
0000a0 3043                        CPI DummyReg, over_screen
0000a1 f0e9                        BREQ load_over_screen
0000a2 3044                        CPI DummyReg, win_screen
0000a3 f129                        BREQ load_win_screen
0000a4 9508                        RET
                                   load_start_screen:
0000a5 e0f8                          LDI ZH, high(CharTable1<<1)
0000a6 ede0                          LDI ZL, low(CharTable1<<1)
0000a7 ec40                          LDI DummyReg, Lives_ship_5
0000a8 9340 0381                     STS ship_life, DummyReg
0000aa e14f                          LDI DummyReg, Lives_boss_5
0000ab 9340 0382                     STS boss_life, DummyReg
                                     ;----------------------------------------------
                                     ;-------------Disable timers for this state
0000ad e000                          LDI R16, 0x00
                                     ;STS TIMSK1, R16 ;timer1 interrupt disable
0000ae 9300 006e                     STS TIMSK0, R16 ; timer0 interrupt disable
0000b0 9300 0070                     STS TIMSK2, R16 ; timer2 interrupt disable
                                     ;---------------------------------------------
0000b2 9508                        RET
                                   load_game_screen:
0000b3 e001                          LDI R16, 0x01
0000b4 9300 006f                     STS TIMSK1, R16 ; timer1 interrupt enable
0000b6 9300 006e                     STS TIMSK0, R16 ; timer0 interrupt enable
0000b8 9300 0070                     STS TIMSK2, R16 ; timer2 interrupt enable
0000ba 940e 00d3                     CALL CHECK_STATE
0000bc e0f1                          LDI ZH,0x01
0000bd e0e0                          LDI ZL,0x00
0000be 9508                        RET
                                   load_over_screen:
0000bf e000                          LDI R16, 0x00
0000c0 9300 006f                     STS TIMSK1, R16 ;timer1 interrupt disable
0000c2 9300 006e                     STS TIMSK0, R16 ; timer0 interrupt disable
0000c4 9300 0070                     STS TIMSK2, R16 ; timer2 interrupt disnable
0000c6 e0f9                          LDI ZH, high(CharTable2<<1)
0000c7 e5e8                          LDI ZL, low(CharTable2<<1)
                                 
0000c8 9508                        RET
                                   load_win_screen:
0000c9 e000                          LDI R16, 0x00
0000ca 9300 006f                     STS TIMSK1, R16 ; timer1 interrupt disable
0000cc 9300 006e                     STS TIMSK0, R16 ; timer0 interrupt disable
0000ce 9300 0070                     STS TIMSK2, R16 ; timer2 interrupt enable
0000d0 e0f9                          LDI ZH, high(CharTable3<<1)
0000d1 ede8                          LDI ZL, low(CharTable3<<1)
0000d2 9508                        RET
                                 
                                 CHECK_STATE:
0000d3 b129                             IN R18,PIND ; Copy PIND into R18
0000d4 d256                               RCALL CONTEXT_SWITCH ; Call context switch (RCALL takes less instruction cycles than CALL)
0000d5 b139                               IN R19,PIND ; Copy PIND into R19
0000d6 d259                               RCALL RESET_CONTEXT ; Call reset context
0000d7 2b23                               OR R18,R19 ; R18 OR R19 and store the result in R18
0000d8 9320 0387                        STS BUZZ_PATTERN, R18 ;Storing key pattern
                                 
0000da 3d2b                               CPI R18,BTN2_PATTERN ; If button 2 is pressed
0000db f039                             BREQ state_plus_2
                                 
                                 	     ;LDS DummyReg, DOWN_STATE
                                 		 ;CPI DummyReg, 1
                                 		 ;BREQ state_plus_2
                                 
0000dc 372b                               CPI R18,BTN8_PATTERN ; If button 8 is pressed
0000dd f061                               BREQ state_plus_8
                                 
                                 		; LDS DummyReg, UP_STATE
                                 		 ;CPI DummyReg, 1
                                 		 ;BREQ state_plus_8
                                 
0000de 3b2b                             CPI R18,BTN5_PATTERN ; If button 5 is pressed
0000df f089                               BREQ state_plus_5
                                 
                                 
0000e0 3f2f                             CPI R18,NOBTN_PATTERN ; If no button is pressed
0000e1 f099                             BREQ reset_key_state
0000e2 9508                             RET
                                 
                                        state_plus_2:
0000e3 e042                              LDI DummyReg, 0x02
0000e4 9340 0385                         STS LAST_KEY, DummyReg
0000e6 e040                      		LDI DummyReg, 0
0000e7 9340 0390                 		STS DOWN_STATE, DummyReg
0000e9 9508                             RET
                                 
                                        state_plus_8:
0000ea e044                              LDI DummyReg, 0x04
0000eb 9340 0385                         STS LAST_KEY, DummyReg
0000ed e040                      		LDI DummyReg, 0
0000ee 9340 0389                 		STS UP_STATE, DummyReg
0000f0 9508                             RET
                                 
                                        state_plus_5:
0000f1 e046                              LDI DummyReg, 0x06
0000f2 9340 0385                         STS LAST_KEY, DummyReg
0000f4 9508                             RET
                                 
                                        reset_key_state:
0000f5 9140 0385                         LDS DummyReg, LAST_KEY
0000f7 3042                              CPI DummyReg,0x02 ; If button 2 is pressed
0000f8 f029                              BREQ go_down
0000f9 3044                              CPI DummyReg,0x04 ; if button 8 is pressed
0000fa f049                              BREQ go_up
0000fb 3046                              CPI DummyReg,0x06 ; if button 5 is pressed
0000fc f069                              BREQ ship_shoot
0000fd 9508                             RET
                                 
                                        go_down:
0000fe e040                              LDI DummyReg, 0x00
0000ff 9340 0385                         STS LAST_KEY, DummyReg
000101 940e 022c                         CALL MOVE_DOWN
000103 9508                             RET
                                 
                                        go_up:
000104 e040                              LDI DummyReg, 0x00
000105 9340 0385                         STS LAST_KEY, DummyReg
000107 940e 026d                         CALL MOVE_UP
000109 9508                             RET
                                 
                                        ship_shoot:
00010a e040                              LDI DummyReg, 0x00
00010b 9340 0385                         STS LAST_KEY, DummyReg
00010d 940e 01c9                         CALL SHOOT
00010f 9508                             RET
                                 
000110 93ef                      UPDATE_BULLETSTATE: PUSH ZL
000111 93ff                                  PUSH ZH
000112 93cf                      			PUSH YL
000113 93df                      			PUSH YH
000114 932f                                PUSH R18
000115 934f                                PUSH R20
000116 922f                                PUSH R2
000117 934f                      		  PUSH DummyReg
000118 b62f                                IN R2, SREG
                                 
000119 e0ea                                LDI ZL, 0x0A
00011a e0d2                                LDI YH, 0x02
00011b e0b2                                LDI XH, 0x02
                                 
00011c e5c0                                LDI YL, 0x50 ; Ship bullet
00011d e9a0                                LDI XL, 0x90 ; Boss bullet
                                 
                                 
00011e e341                                  LDI R20, 49 ; 1St upper row                   ;xxxxxxx  x
00011f 940e 0380                           CALL SHIFT_Z
000121 940e 0171                           CALL TRACE_BULLET
                                 
000123 e9a3                                LDI XL, 0x93 ; BOSS GUN!
                                 
000124 e247                                LDI R20, 39 ; 2nd upper row                   ;xxxxxxx  x
000125 940e 0380                           CALL SHIFT_Z
000127 940e 0171                           CALL TRACE_BULLET
                                 
000129 e9a6                                LDI XL, 0x96 ; BOSS GUN !
00012a e14d                                LDI R20, 29 ; 3rd upper row                    ;xxxxx
00012b 940e 0380                           CALL SHIFT_Z
00012d 940e 0171                           CALL TRACE_BULLET
                                 
00012f e9a9                                LDI XL, 0x99 ; BOSS GUN !
000130 e143                                LDI R20, 19 ; 4th upper row            ;xxxxx
000131 940e 0380                           CALL SHIFT_Z
000133 940e 0171                           CALL TRACE_BULLET
                                 
000135 e9ac                                LDI XL, 0x9C ; BOSS GUN !
000136 e049                                LDI R20, 9 ; 5th upper row              ;xxxxxxx  x
000137 940e 0380                           CALL SHIFT_Z
000139 940e 0171                           CALL TRACE_BULLET
                                 
00013b e9af                                LDI XL, 0x9F ; BOSS GUN !
00013c e440                                LDI R20, 64 ; 1St bottom row
00013d 940e 0380                           CALL SHIFT_Z
00013f 940e 0171                           CALL TRACE_BULLET
                                 
000141 eaa2                                LDI XL, 0xA2 ; BOSS GUN !
000142 e346                                LDI R20, 54 ; 2nd bottom row
000143 940e 0380                           CALL SHIFT_Z
000145 940e 0171                           CALL TRACE_BULLET
                                 
000147 eaa5                                LDI XL, 0xA5 ; BOSS GUN !
000148 e24c                                LDI R20, 44 ; 3rd bottom row
000149 940e 0380                           CALL SHIFT_Z
00014b 940e 0171                           CALL TRACE_BULLET
                                 
00014d eaa8                                LDI XL, 0xA8 ; BOSS GUN !
00014e e242                                LDI R20, 34 ; 4th bottom row
00014f 940e 0380                           CALL SHIFT_Z
000151 940e 0171                           CALL TRACE_BULLET
                                 
000153 eaab                                LDI XL, 0xAB ; BOSS GUN !
                                 
000154 e148                                LDI R20, 24 ; 5th bottom row
000155 940e 0380                           CALL SHIFT_Z
000157 940e 0171                           CALL TRACE_BULLET
                                 
000159 eaae                                LDI XL, 0xAE ; BOSS GUN !
00015a e04e                                LDI R20, 14 ; 6th bottom row
00015b 940e 0380                           CALL SHIFT_Z
00015d 940e 0171                           CALL TRACE_BULLET
                                 
00015f eba1                                LDI XL, 0xB1 ; BOSS GUN !
000160 e044                                LDI R20, 4 ; 7th bottom row
000161 940e 0380                           CALL SHIFT_Z
000163 940e 0171                           CALL TRACE_BULLET
000165 940e 030d                           CALL lifeline_to_screenbuff
                                 
                                 
000167 be2f                            finish_update:  OUT SREG, R2
000168 914f                      					POP DummyReg
000169 902f                      					POP R2
00016a 914f                      					POP R20
00016b 912f                      					POP R18
00016c 91df                      					POP YH
00016d 91cf                      					POP YL
00016e 91ff                      					POP ZH
00016f 91ef                      					POP ZL
000170 9508                      					RET
                                 
                                 TRACE_BULLET:
000171 8108                            LD R16, Y ; ship bullet
000172 911c                            LD R17, X ; boss bullet
                                 
                                       ; --------------
                                       ; ---- check if bullets are met ----
000173 3000                            CPI R16, 0x00
000174 f021                            BREQ continue
000175 2f40                            MOV dummyReg, R16
000176 1b41                            SUB dummyReg, R17
000177 3040                            CPI dummyReg, 0x00
000178 f1b1                            BREQ bullets_collapse
                                       ; --- continue ----
000179 2f20                            continue: MOV R18, R16
00017a 2b21                            OR R18, R17
00017b 9322                            ST -Z, R18;storing bullet
                                 
00017c 0f11                            LSL R17 ; shift boss bullet to the left
00017d 931d                            ST X+, R17
00017e f428                            BRCC shipNotHit
                                 
                                 
                                       ; ---- Check if ship is hit
00017f 95e3                            INC ZL
000180 8120                            LD R18, Z
000181 312f                            CPI R18, shipGun
000182 f181                            BREQ shipDamaged
000183 95ea                            DEC ZL
                                       ; --------------
                                 
000184 9488                            shipNotHit:CLC
000185 9506                            LSR R16 ; shift ship bullet to the right
000186 9309                            ST Y+, R16
000187 f410                            BRCC next ; if carry is set write to the next byte
000188 e800                            LDI R16, 0x80 ;shifting 1 to next byte of bullet path
000189 8308                            ST Y, R16
                                 
                                       ; next byte
00018a 8108                            next: LD R16, Y
00018b 911c                                LD R17, X
00018c 2f20                                MOV R18, R16
00018d 2b01                                OR R16, R17
00018e 9302                                ST -Z, R16
                                 
00018f 9526                                LSR R18
000190 9329                                ST Y+, R18
000191 f410                                BRCC bossBullet
000192 e800                                LDI R16, 0x80
000193 8308                                ST Y, R16
                                           ; move the boss bultt to the next byte if carry is set
000194 0f11                                bossBullet:  LSL R17
000195 931c                                    ST X, R17
000196 f418                                    BRCC next3
000197 e011                                    LDI R17, 0x01
000198 931e                                    ST -X, R17
000199 95a3                                    INC XL
                                 
                                           ; last byte
00019a 95a3                              next3: INC XL
00019b 8108                                 LD R16, Y
00019c 911c                                 LD R17, X
00019d 2f20                                 MOV R18, R16
00019e 2b01                                 OR R16, R17
00019f 9302                                 ST -Z, R16
                                 
0001a0 9526                                 LSR R18
0001a1 9329                                 ST Y+, R18
0001a2 f428                                 BRCC boss_not_hit
                                 
                                           ; ---- Check if boss is hit
0001a3 95ea                                DEC ZL
0001a4 8120                                LD R18, Z
0001a5 3f29                                CPI R18, MonsterGunPat
0001a6 f0b9                                BREQ bossDamaged
0001a7 95e3                                INC ZL
                                           ; --------------
                                 
                                            boss_not_hit:
0001a8 9488                                  CLC
0001a9 0f11                                  LSL R17
0001aa 931c                                  ST X, R17
0001ab f410                                  BRCC finish_trace ; problem here regarding X
0001ac e011                                    LDI R17, 0x01
0001ad 931e                                 ST -X, R17  ; move the boss bultt to the next byte if carry is set
                                 
                                 
                                 
0001ae 9508                              finish_trace: RET
                                         ; -- if bullets collapse => reset ---
0001af e000                              bullets_collapse: LDI R16, 0x00
0001b0 8308                                        ST Y, R16
0001b1 930c                                        ST X, R16
0001b2 9508                                        RET
                                         ; --- if ship is hit by boss bullet -------
0001b3 9120 0381                         shipDamaged: LDS R18, ship_life
0001b5 0f22                                     LSL R18
0001b6 f019                                     BREQ game_over
0001b7 9320 0381                                STS ship_life, R18
0001b9 9508                                     RET
                                 
0001ba e043                                     game_over: LDI DummyReg, over_screen
0001bb 9340 0383                                     STS SCREEN_STATE, DummyReg
0001bd 9508                                          RET
                                 
                                          ; ----- Check if boss is hit by ship bullet ---------------
0001be 9120 0382                          bossDamaged:  LDS R18, boss_life
0001c0 9526                                     LSR R18
0001c1 f019                                     BREQ game_victory
0001c2 9320 0382                                STS boss_life, R18
0001c4 9508                                     RET
                                 
0001c5 e044                                     game_victory: LDI DummyReg, win_screen
0001c6 9340 0383                                     STS SCREEN_STATE, DummyReg
0001c8 9508                                          RET
                                 
                                 
0001c9 93ef                      SHOOT: PUSH ZL
0001ca 93ff                           PUSH ZH
0001cb 93cf                      	 PUSH YL
0001cc 93df                      	 PUSH YH
0001cd 922f                           PUSH R2
0001ce b62f                           IN R2, SREG
0001cf e0ea                           LDI ZL, 0x0A
0001d0 e0d2                      	 LDI YH, 0x02
0001d1 e5c0                           LDI YL, 0x50
                                 
0001d2 a901                           LDD R16, Z+49
0001d3 d021                           RCALL SHIP_FIRE
                                 
0001d4 a107                           LDD R16, Z+39
0001d5 d01f                           RCALL SHIP_FIRE
                                 
0001d6 8d05                           LDD R16, Z+29
0001d7 d01d                           RCALL SHIP_FIRE
                                 
0001d8 8903                           LDD R16, Z+19
0001d9 d01b                           RCALL SHIP_FIRE
                                 
0001da 8501                           LDD R16, Z+9
0001db d019                           RCALL SHIP_FIRE
                                 
                                 
0001dc e440                           LDI R20, 64 ; 1St bottom row
0001dd 940e 0380                      CALL SHIFT_Z
0001df 8100                           LD R16, Z
0001e0 d014                           RCALL SHIP_FIRE
0001e1 e0ea                           LDI ZL, 0x0A
                                 
0001e2 a906                           LDD R16, Z+54
0001e3 d011                           RCALL SHIP_FIRE
                                 
0001e4 a504                           LDD R16, Z+44
0001e5 d00f                           RCALL SHIP_FIRE
                                 
0001e6 a102                           LDD R16, Z+34
0001e7 d00d                           RCALL SHIP_FIRE
                                 
0001e8 8d00                           LDD R16, Z+24
0001e9 d00b                           RCALL SHIP_FIRE
                                 
0001ea 8506                           LDD R16, Z+14
0001eb d009                           RCALL SHIP_FIRE
                                 
0001ec 8104                           LDD R16, Z+4
0001ed d007                           RCALL SHIP_FIRE
                                 
0001ee be2f                           finish_shooting: OUT SREG, R2
0001ef 902f                                  POP R2
0001f0 91df                      			POP YH
0001f1 91cf                      			POP YL
0001f2 91ff                                  POP ZH
0001f3 91ef                                  POP ZL
0001f4 9508                                  RET
                                 
0001f5 310f                      SHIP_FIRE: CPI R16, ShipGun
0001f6 f421                             BRNE DONT_FIRE
0001f7 8108                             LD R16, Y
0001f8 e810                            LDI R17, 0x80
0001f9 2b01                             OR R16, R17
0001fa 8308                             ST Y, R16
0001fb 95c3                             DONT_FIRE: INC YL
0001fc 95c3                                   INC YL
0001fd 95c3                                  INC YL
0001fe 9508                                  RET
                                 
0001ff e0b2                      BOSS_SHOOT:   LDI XH, 0x02
000200 93ef                              PUSH ZL
000201 93ff                              PUSH ZH
000202 932f                                PUSH R18
000203 922f                                PUSH R2
000204 b62f                              IN R2, SREG
                                 
000205 9140 0388                     LDS DummyReg, RANDOM_NUMBER
                                 
000207 304b                              CPI DummyReg, 11
000208 f059                              BREQ PAT1
000209 304f                              CPI DummyReg, 15
00020a f059                              BREQ PAT2
00020b 3043                              CPI DummyReg, 3
00020c f059                              BREQ PAT3
00020d 3041                              CPI DummyReg, 1
00020e f059                              BREQ PAT4
00020f 3047                              CPI DummyReg, 7
000210 f059                              BREQ PAT5
000211 3049                              CPI DummyReg, 9
000212 f059                              BREQ PAT6
                                 
                                         ;LDI BOSS_SHIPCOUNTER, 6 ; reset
000213 c012                      		rjmp exit_boss_shoot
                                 
000214 e9a2                              PAT1: LDI XL, 0x92
000215 c009                                  RJMP boss_fire
000216 e9a5                              PAT2: LDI XL, 0x95
000217 c007                                  RJMP boss_fire
000218 e9ae                              PAT3: LDI XL, 0x9E
000219 c005                                  RJMP boss_fire
00021a eaa1                              PAT4: LDI XL, 0xA1
00021b c003                                  RJMP boss_fire
00021c eaaa                              PAT5: LDI XL, 0xAA
00021d c001                                  RJMP boss_fire
00021e eaad                              PAT6: LDI XL, 0xAD
                                 
00021f 910c                              boss_fire: LD R16, X
000220 e011                              LDI R17, 0x01
000221 2b01                              OR R16, R17
000222 930c                              ST X, R16
                                 
                                         ;CALL UPDATE_BULLETSTATE
000223 e020                            LDI R18, 0
000224 9320 0380                       STS boss_shoot_status, R18
                                 
000226 be2f                           exit_boss_shoot: OUT SREG, R2
000227 902f                            POP R2
000228 912f                            POP R18
000229 91ff                            POP ZH
00022a 91ef                            POP ZL
                                 
00022b 9508                            RET
                                 
                                 MOVE_DOWN:
00022c 93ef                        PUSH ZL
00022d 93ff                        PUSH ZH
00022e 934f                        PUSH DummyReg
                                 
00022f e0f1                        LDI ZH, 0x01
                                 
000230 e0ee                        LDI ZL, 0x0E ;ROW 1, lower block
000231 8130                        LD PAT_COL1, Z
                                 
000232 e1e8                        LDI ZL, 0x18 ;ROW 2, lower block
000233 8140                        LD DummyReg, Z
000234 e0ee                        LDI ZL, 0x0E
000235 8340                        ST Z, DummyReg
                                 
000236 e2e2                        LDI ZL, 0x22 ;ROW 3, lower block
000237 8140                        LD DummyReg, Z
000238 e1e8                        LDI ZL, 0x18
000239 8340                        ST Z, DummyReg
                                 
00023a e2ec                        LDI ZL, 0x2C ;ROW 4, lower block
00023b 8140                        LD DummyReg, Z
00023c e2e2                        LDI ZL, 0x22
00023d 8340                        ST Z, DummyReg
                                 
00023e e3e6                        LDI ZL, 0x36 ;ROW 5, lower block
00023f 8140                        LD DummyReg, Z
000240 e2ec                        LDI ZL, 0x2C
000241 8340                        ST Z, DummyReg
                                 
000242 e4e0                        LDI ZL, 0x40 ;ROW 6, lower block
000243 8140                        LD DummyReg, Z
000244 e3e6                        LDI ZL, 0x36
000245 8340                        ST Z, DummyReg
                                 
000246 e4ea                        LDI ZL, 0x4A ;ROW 7, lower block
000247 8140                        LD DummyReg, Z
000248 e4e0                        LDI ZL, 0x40
000249 8340                        ST Z, DummyReg
                                 
00024a e1e3                        LDI ZL, 0x13 ;ROW 1, upper block
00024b 8140                        LD DummyReg, Z
00024c e4ea                        LDI ZL, 0x4A
00024d 8340                        ST Z, DummyReg
                                 
00024e e1ed                        LDI ZL, 0x1D ;ROW 2, upper block
00024f 8140                        LD DummyReg, Z
000250 e1e3                        LDI ZL, 0x13
000251 8340                        ST Z, DummyReg
                                 
000252 e2e7                        LDI ZL, 0x27 ;ROW 3, upper block
000253 8140                        LD DummyReg, Z
000254 e1ed                        LDI ZL, 0x1D
000255 8340                        ST Z, DummyReg
                                 
000256 e3e1                        LDI ZL, 0x31 ;ROW 4, upper block
000257 8140                        LD DummyReg, Z
000258 e2e7                        LDI ZL, 0x27
000259 8340                        ST Z, DummyReg
                                 
00025a e3eb                        LDI ZL, 0x3B ;ROW 5, upper block
00025b 8140                        LD DummyReg, Z
00025c e3e1                        LDI ZL, 0x31
00025d 8340                        ST Z, DummyReg
                                 
00025e e4e5                        LDI ZL, 0x45 ;ROW 6, upper block
00025f 8140                        LD DummyReg, Z
000260 e3eb                        LDI ZL, 0x3B
000261 8340                        ST Z, DummyReg
                                 
000262 e4ef                        LDI ZL, 0x4F ;ROW 7, upper block
000263 8140                        LD DummyReg, Z
000264 e4e5                        LDI ZL, 0x45
000265 8340                        ST Z, DummyReg
                                 
000266 e4ef                        LDI ZL, 0x4F ;ROW 7, upper block
000267 8330                        ST Z, PAT_COL1
                                 
                                   ;Restoring Z
000268 e0e0                        LDI ZL, 0x00
                                 
000269 914f                        POP DummyReg
00026a 91ff                        POP ZH
00026b 91ef                        POP ZL
00026c 9508                      RET
                                 
                                 MOVE_UP:
00026d 93ef                        PUSH ZL
00026e 93ff                        PUSH ZH
00026f 934f                        PUSH DummyReg
                                 
000270 e0f1                        LDI ZH, 0x01
                                 
000271 e4ef                        LDI ZL, 0x4F ;ROW 7, upper block
000272 8130                        LD PAT_COL1, Z
                                 
000273 e4e5                        LDI ZL, 0x45 ;ROW 6, upper block
000274 8140                        LD DummyReg, Z
000275 e4ef                        LDI ZL, 0x4F
000276 8340                        ST Z, DummyReg
                                 
000277 e3eb                        LDI ZL, 0x3B ;ROW 5, upper block
000278 8140                        LD DummyReg, Z
000279 e4e5                        LDI ZL, 0x45
00027a 8340                        ST Z, DummyReg
                                 
00027b e3e1                        LDI ZL, 0x31 ;ROW 4, upper block
00027c 8140                        LD DummyReg, Z
00027d e3eb                        LDI ZL, 0x3B
00027e 8340                        ST Z, DummyReg
                                 
00027f e2e7                        LDI ZL, 0x27 ;ROW 3, upper block
000280 8140                        LD DummyReg, Z
000281 e3e1                        LDI ZL, 0x31
000282 8340                        ST Z, DummyReg
                                 
000283 e1ed                        LDI ZL, 0x1D ;ROW 2, upper block
000284 8140                        LD DummyReg, Z
000285 e2e7                        LDI ZL, 0x27
000286 8340                        ST Z, DummyReg
                                 
000287 e1e3                        LDI ZL, 0x13 ;ROW 1, upper block
000288 8140                        LD DummyReg, Z
000289 e1ed                        LDI ZL, 0x1D
00028a 8340                        ST Z, DummyReg
                                 
00028b e4ea                        LDI ZL, 0x4A ;ROW 7, lower block
00028c 8140                        LD DummyReg, Z
00028d e1e3                        LDI ZL, 0x13
00028e 8340                        ST Z, DummyReg
                                 
00028f e4e0                        LDI ZL, 0x40 ;ROW 6, lower block
000290 8140                        LD DummyReg, Z
000291 e4ea                        LDI ZL, 0x4A
000292 8340                        ST Z, DummyReg
                                 
000293 e3e6                        LDI ZL, 0x36 ;ROW 5, lower block
000294 8140                        LD DummyReg, Z
000295 e4e0                        LDI ZL, 0x40
000296 8340                        ST Z, DummyReg
                                 
000297 e2ec                        LDI ZL, 0x2C ;ROW 4, lower block
000298 8140                        LD DummyReg, Z
000299 e3e6                        LDI ZL, 0x36
00029a 8340                        ST Z, DummyReg
                                 
00029b e2e2                        LDI ZL, 0x22 ;ROW 3, lower block
00029c 8140                        LD DummyReg, Z
00029d e2ec                        LDI ZL, 0x2C
00029e 8340                        ST Z, DummyReg
                                 
00029f e1e8                        LDI ZL, 0x18 ;ROW 2, lower block
0002a0 8140                        LD DummyReg, Z
0002a1 e2e2                        LDI ZL, 0x22
0002a2 8340                        ST Z, DummyReg
                                 
0002a3 e0ee                        LDI ZL, 0x0E ;ROW 1, lower block
0002a4 8140                        LD DummyReg, Z
0002a5 e1e8                        LDI ZL, 0x18
0002a6 8340                        ST Z, DummyReg
                                 
0002a7 e0ee                        LDI ZL, 0x0E ;ROW 1, lower block
0002a8 8330                        ST Z, PAT_COL1
                                 
                                   ;Restoring Z
0002a9 e0e0                        LDI ZL, 0x00
0002aa 914f                        POP DummyReg
0002ab 91ff                        POP ZH
0002ac 91ef                        POP ZL
0002ad 9508                      RET
                                 
                                 load_game_play_start:
0002ae e0e0                        LDI ZL, 0x00
0002af e0f1                        LDI ZH, 0x01
                                   ;oth ROW (Not displayed - dummy)
0002b0 ef09                        LDI R16, MonsterNotGunPat
0002b1 9300 0212                   STS 0x212, R16
0002b3 e10f                        LDI R16, 0b00011111
0002b4 9300 0213                   STS 0x213, R16
0002b6 e100                        LDI R16, ShipEnd
0002b7 9300 0214                   STS 0x214, R16
0002b9 940e 0317                   CALL InitScreenState
                                 
                                   ;1st ROW
0002bb e10f                        LDI R16, 0b00011111
0002bc 9300 0212                   STS 0x212, R16
0002be ef09                        LDI R16, MonsterGunPat
0002bf 9300 0213                   STS 0x213, R16
0002c1 e000                        LDI R16, 0b00000000
0002c2 9300 0214                   STS 0x214, R16
0002c4 940e 0317                   CALL InitScreenState
                                 
                                   ;2nd ROW
0002c6 e10f                        LDI R16, 0b00011111
0002c7 9300 0212                   STS 0x212, R16
0002c9 e10f                        LDI R16, 0b00011111
0002ca 9300 0213                   STS 0x213, R16
0002cc e000                        LDI R16, 0b00000000
0002cd 9300 0214                   STS 0x214, R16
0002cf 940e 0317                   CALL InitScreenState
                                 
                                   ;3rd ROW
0002d1 ef09                        LDI R16, MonsterNotGunPat
0002d2 9300 0212                   STS 0x212, R16
0002d4 e10f                        LDI R16, 0b00011111
0002d5 9300 0213                   STS 0x213, R16
0002d7 e100                        LDI R16, ShipEnd
0002d8 9300 0214                   STS 0x214, R16
0002da 940e 0317                   CALL InitScreenState
                                 
                                   ;4th ROW
0002dc ef09                        LDI R16, MonsterGunPat
0002dd 9300 0212                   STS 0x212, R16
0002df ef09                        LDI R16, MonsterNotGunPat
0002e0 9300 0213                   STS 0x213, R16
0002e2 e30e                        LDI R16, ShipMiddle
0002e3 9300 0214                   STS 0x214, R16
0002e5 940e 0317                   CALL InitScreenState
                                 
                                   ;5th ROW
0002e7 e10f                        LDI R16, 0b00011111
0002e8 9300 0212                   STS 0x212, R16
0002ea ef09                        LDI R16, MonsterGunPat
0002eb 9300 0213                   STS 0x213, R16
0002ed e10f                        LDI R16, ShipGun
0002ee 9300 0214                   STS 0x214, R16
0002f0 940e 0317                   CALL InitScreenState
                                 
                                   ;6th ROW
                                   SECOND_ROW:
0002f2 e10f                        LDI R16, 0b00011111
0002f3 9300 0212                   STS 0x212, R16
0002f5 e10f                        LDI R16, 0b00011111
0002f6 9300 0213                   STS 0x213, R16
0002f8 e30e                        LDI R16, ShipMiddle
0002f9 9300 0214                   STS 0x214, R16
0002fb 940e 0317                   CALL InitScreenState
                                 
                                   ; 7th ROW
0002fd ef09                        LDI R16, MonsterNotGunPat
0002fe 9300 0212                   STS 0x212, R16
000300 e10f                        LDI R16, 0b00011111
000301 9300 0213                   STS 0x213, R16
000303 e100                        LDI R16, ShipEnd
000304 9300 0214                   STS 0x214, R16
000306 940e 0317                   CALL InitScreenState
                                 
                                   ;Loading initial life line display
000308 940e 030d                   CALL lifeline_to_screenbuff
                                 
00030a e0e0                        LDI ZL, 0x00 ; Reset
00030b e0f1                        LDI ZH, 0x01
                                 
00030c 9508                      RET
                                 lifeline_to_screenbuff:
00030d 9140 0381                   LDS DummyReg, ship_life
00030f e0f1                        LDI ZH, 0x01
000310 e4ee                        LDI ZL, ShipLifeLine
000311 8340                        ST Z, DummyReg
000312 9140 0382                   LDS DummyReg, boss_life
000314 e4ec                        LDI ZL, BossLifeLine
000315 8340                        ST Z, DummyReg
000316 9508                      RET
                                 
                                 InitScreenState:
000317 9120 0212                   LDS R18,  0x212
000319 9321                        ST Z+, R18
                                 
00031a e020                        LDI R18, 0x00
00031b e014                        LDI R17, 4
                                 
                                   LOOP_BUFF:
00031c 9321                          ST Z+, R18
00031d 951a                          DEC R17
00031e f7e9                        BRNE LOOP_BUFF
00031f 9120 0213                   LDS R18, 0x213
000321 9321                        ST Z+, R18
000322 e020                        LDI R18, 0x00
000323 e013                        LDI R17, 3
                                   LOOP_BUFF1_:
000324 9321                          ST Z+, R18
000325 951a                          DEC R17
000326 f7e9                        BRNE LOOP_BUFF1_
000327 9120 0214                   LDS R18, 0x214
000329 9321                        ST Z+, R18
00032a 9508                      RET ; Return to caller
                                 
                                 ;keyboard part
00032b ef00                      CONTEXT_SWITCH: LDI R16, 0xF0  ; Copy 0b1111 0000 to R16
00032c e01f                                LDI R17, 0x0F  ; Copy 0b0000 1111 to R17
                                 
                                 
                                 
00032d b90b                                OUT PORTD, R16 ; Set PORTD to R16
00032e b91a                                    OUT DDRD, R17  ; Set DDRD to R17
00032f 9508                                RET ; Return to caller
                                 ;keyboard part
000330 e00f                      RESET_CONTEXT: LDI R16, 0x0F ; keyboard set
000331 ef10                               LDI R17, 0xF0
                                 
000332 b90b                               OUT PORTD, R16
000333 b91a                                 OUT DDRD, R17
000334 9508                               RET ; Return to caller
                                 
                                 
                                 ;Funtion to shift column data on for a pattern
                                 execute_col_loop:
000335 9140 0383                   LDS DummyReg, SCREEN_STATE
000337 3042                        CPI DummyReg, game_screen
000338 f119                        BREQ screenbuff_display
000339 c000                        RJMP charbuff_display
                                 
                                   charbuff_display:
                                     ;increment Z till RowIndex for a character is reached
00033a 9110 0386                     LDS Local_index1, RowIndex
                                     Loop_Z:
00033c 9135                            LPM PAT_COL1, Z+
00033d 951a                            DEC Local_index1
00033e f7e9                          BRNE Loop_Z
                                 
00033f e120                          LDI Local_index2, 16  ;index to shift screen 16 times for every screen block
                                     Col_loop2:
                                       ;shift 5bit Column pattern into Shift Reg
000340 e015                            LDI Local_index1, 5
                                       Col_loop3:
000341 982b                              CBI PORTB,3 ;pixel_off
000342 fd30                              SBRC PAT_COL1, 0 ;pixel turned off if pattern's LSB is 0
000343 9a2b                              SBI PORTB,3 ;pixel on
000344 982d                              CBI PORTB, 5 ;falling edge of shift-reg clock
000345 9a2d                              SBI PORTB, 5 ;rising edge of clk
000346 9536                              LSR PAT_COL1 ; right shifting pattern for next bit
000347 951a                              DEC Local_index1
000348 f7c1                            BRNE Col_loop3
                                 
                                       ;Increment Z pointer by 8 to point to same row in next character
000349 e018                            LDI Local_index1,8
                                       Loop_Z2:
00034a 9135                              LPM PAT_COL1,Z+
00034b 951a                              DEC Local_index1
00034c f7e9                            BRNE Loop_Z2
00034d 952a                            DEC Local_index2
00034e f789                          BRNE col_loop2
                                 
                                     ;Restoring Z pointer address before next row access
                                 
00034f e120                          LDI Local_index2, 16  ;index to shift screen 16 times for every screen block
                                     rev_loop1:
                                       ;Decrement Z pointer by 8 to point to same row in next character
000350 e018                            LDI Local_index1,8
                                       rev_loop2:
000351 9132                              LD PAT_COL1, -Z
000352 951a                              DEC Local_index1
000353 f7e9                            BRNE rev_loop2
000354 952a                            DEC Local_index2
000355 f7d1                          BRNE rev_loop1
                                 
                                     ;increment Z till RowIndex for a character is reached
000356 9110 0386                     LDS Local_index1, RowIndex
                                     rev_loop3:
000358 9132                            LD PAT_COL1, -Z
000359 951a                            DEC Local_index1
00035a f7e9                          BRNE rev_loop3
00035b 9508                        RET
                                 
                                   screenbuff_display:
00035c e02a                          LDI Local_index2, 10  ;index to shift screen 80 times for every screen block
                                     Col_loop4:
                                       ;shift 5bit Column pattern into Shift Reg
00035d 8130                            LD PAT_COL1, Z
00035e e018                            LDI Local_index1, 8
                                       Col_loop5:
00035f 982b                              CBI PORTB,3 ;pixel_off
000360 fd30                              SBRC PAT_COL1, 0 ;pixel turned off if pattern's LSB is 0
000361 9a2b                              SBI PORTB,3 ;pixel on
000362 982d                              CBI PORTB, 5 ;falling edge of shift-reg clock
000363 9a2d                              SBI PORTB, 5 ;rising edge of clk
000364 9536                              LSR PAT_COL1 ; right shifting pattern for next bit
000365 951a                              DEC Local_index1
000366 f7c1                            BRNE Col_loop5
000367 9131                            LD PAT_COL1, Z+
000368 952a                            DEC Local_index2
000369 f799                          BRNE Col_loop4
00036a 9508                        RET
                                 
                                 ;function to shift row data for a pattern
                                 execute_row_loop:
00036b e018                        LDI Local_index1, 0x08
00036c 9488                        CLC
                                   LoopRow:
00036d 982b                          CBI PORTB, 3
00036e 9140 0386                     LDS DummyReg, RowIndex
000370 1714                          CP Local_index1,DummyReg
000371 f409                          BRNE Row_not_on
000372 9a2b                          SBI PORTB, 3
                                     Row_not_on:
000373 982d                            CBI PORTB, 5
000374 9a2d                            SBI PORTB, 5
000375 951a                          DEC Local_index1
000376 f7b1                        BRNE LoopRow
000377 9508                      RET
                                 
                                 ;function to latch shift register data to output
                                 latch_shift_reg:
000378 982c                        CBI PORTB, 4
000379 9a2c                        SBI PORTB, 4
00037a ef1f                        LDI Local_index1, 255 ;index for delay loop
                                   delay_loop:
00037b 0000                          NOP
00037c 951a                          DEC Local_index1
00037d f7e9                        BRNE delay_loop
00037e 982c                        CBI PORTB, 4
00037f 9508                      RET
                                 
000380 e0ea                      SHIFT_Z: LDI ZL, 0x0A
000381 e0f1                             LDI ZH, 0x01
000382 95e3                              INC_LOOP: INC ZL
000383 954a                                DEC R20
000384 f7e9                                BRNE INC_LOOP
                                 
000385 9508                              RET
                                 
000386 e614                      BULLET_DELAY: LDI Local_index1, 100
000387 0000                        BLOOP:  NOP
000388 efcf                        LDI R28, 0xFF
000389 0000                          BNESTED: NOP
00038a 95ca                              DEC R28
00038b f7e9                              BRNE BNESTED
00038c 951a                        DEC Local_index1
00038d f7c9                        BRNE BLOOP
00038e 9508                        RET
                                 
00038f e518                      DISPLAY_INTERMEDIATE_STATE: LDI R17, 88
000390 982b                                 CBI PORTB, 3
000391 982d                                 SEND_DATA: CBI PORTB, 5
000392 9a2d                                      SBI PORTB, 5
000393 951a                                      DEC R17
000394 f7e1                                      BRNE SEND_DATA
000395 982c                                CBI PORTB, 4
000396 9a2c                                SBI PORTB, 4
000397 982c                                CBI PORTB, 4
000398 9508                                RET
                                 
000399 e0e0                      CLEAR_SCREEN: LDI ZL, 0x00
00039a e0f1                      			  LDI ZH, 0x01
00039b e000                      			  LDI R16, 0
00039c e518                      			  LDI R17, 88
00039d 9301                      			  clear_screen_loop: ST Z+, R16
00039e 951a                      								 DEC R17
00039f f7e9                      								 BRNE clear_screen_loop
                                 
0003a0 9508                      			  RET
                                 
                                 ;R0 and R24 re reserved for this timer interrupt
                                 ;Please use them elsewhere cautiously
                                 Timer2Interrupt:
0003a1 920f                        PUSH R0
0003a2 921f                        PUSH R1
0003a3 b60f                        IN R0, SREG
                                 
                                   ;IN R1, PINB
                                   ;BST R1, 0
                                   ;BRTS silence
                                 
0003a4 9180 0387                   LDS R24, BUZZ_PATTERN
0003a6 378b                        CPI R24, BTN8_PATTERN
0003a7 f029                        BREQ MoveKeyPressed
0003a8 3b8b                        CPI R24, BTN5_PATTERN
0003a9 f041                        BREQ ShootKeyPressed
0003aa 3d8b                        CPI R24, BTN2_PATTERN
0003ab f009                        BREQ MoveKeyPressed
0003ac c00a                        RJMP DefaultSound
                                 
                                   MoveKeyPressed:
0003ad e28e                          LDI R24, 0x2E
0003ae 9380 00b2                     STS TCNT2, R24
0003b0 9a19                          SBI PINB, 1 ; toggle output of PB1 by setting PINB,1
0003b1 c00e                          rjmp exit_timer2
                                   ShootKeyPressed:
0003b2 ef88                          LDI R24, 248
0003b3 9380 00b2                     STS TCNT2, R24
0003b5 9a19                          SBI PINB, 1 ; toggle output of PB1 by setting PINB,1
0003b6 c009                          rjmp exit_timer2
                                   DefaultSound:
0003b7 ed8f                          LDI R24, 0xDF
                                     ;LD R24, Y
0003b8 9380 00b2                 	STS TCNT2, R24
                                     ;SBI PINB, 1 ; toggle output of PB1 by setting PINB,1
0003ba 9828                        CBI PORTB, 0 ; sshut the buzzer
0003bb c004                         rjmp exit_timer2
                                 
0003bc 9828                        silence: CBI PORTB, 0
0003bd ee8f                      		   LDI R24, 0xEF
0003be 9380 00b2                 		   STS TCNT2, R24
                                   exit_timer2: 
0003c0 be0f                      	   OUT SREG, R0
0003c1 900f                             POP R0
0003c2 901f                             POP R1
0003c3 9518                              RETI
                                 
0003c4 922f                      Timer1Interrupt: PUSH R2
0003c5 932f                              PUSH R18
0003c6 930f                      		PUSH R16
0003c7 931f                      		PUSH R17
0003c8 934f                      		PUSH DummyReg
                                 
0003c9 b62f                      		IN R2, SREG
                                 
0003ca ef0f                      		LDI R16, 0xFF
0003cb ee1f                              LDI R17, 0xEF
0003cc 9300 0084                         STS TCNT1L,R16
0003ce 9310 0085                         STS TCNT1H,R17
                                 
0003d0 9100 0383                 		LDS R16, SCREEN_STATE
0003d2 3001                      		CPI R16, start_screen
0003d3 f081                      		BREQ exit_timer1
                                 		
                                 
0003d4 e021                              LDI R18, 1
0003d5 9320 0380                         STS boss_shoot_status, R18
                                 
                                 		; ----- Generate next random number ---------
                                         ;DEC BOSS_SHIPCOUNTER
0003d7 9100 0388                 		LDS R16, RANDOM_NUMBER
0003d9 9140 0388                 		 LDS DummyReg, RANDOM_NUMBER
0003db 9506                      		 LSR R16
0003dc 2740                      		 EOR DummyReg, R16
0003dd 7041                      		 ANDI DummyReg, 1 ; newly generated random bit
                                 
0003de 0f44                      		 LSL DummyReg
0003df 0f44                      		 LSL DummyReg
0003e0 0f44                      		 LSL DummyReg
                                 
0003e1 2b40                      		 OR DummyReg, R16
0003e2 9340 0388                 		 STS RANDOM_NUMBER, DummyReg
                                 
                                 		;LD R18, Y+
                                 
                                 		;LD R18, Y
                                 		;CPI R18, 1
                                 		;BRNE exit_timer1
                                 
                                 		;LDI YL, LOW(NotesTable<<1)
                                 		;LDI YH, HIGH(NotesTable<<1)
                                 
0003e4 be2f                      		exit_timer1: OUT SREG, R2
0003e5 914f                      					POP DummyReg
0003e6 911f                      					POP R17
0003e7 910f                      					POP R16
0003e8 912f                      					POP R18
0003e9 902f                      					POP R2
0003ea 9518                      					RETI
                                 
                                 Timer0interrupt: 
0003eb 931f                      	     PUSH R17
0003ec 932f                      		 PUSH R18
0003ed 922f                      		 PUSH R2
0003ee b62f                      		 IN R2, SREG
                                 
0003ef e011                      		 LDI R17, 1
0003f0 bd16                               OUT TCNT0,R17
                                 		 
                                 ;        ;CALL DISPLAY_INTERMEDIATE_STATE
0003f1 940e 0110                          CALL UPDATE_BULLETSTATE
                                 	 
                                 	    ; ---- Read the decision from adcInterrupt and write to UP_STATE_TIMED and DOWN_STATE_TIMED
0003f3 e011                      		LDI R17, 1
0003f4 9120 0391                 		LDS R18, MOVE_STATE
0003f6 2721                      		EOR R18, R17
0003f7 9320 0391                 		STS MOVE_STATE, R18
                                 
                                 		 
0003f9 9110 0390                 		 LDS R17, DOWN_STATE
0003fb 3011                      		 CPI R17, 1
0003fc f431                      		 BRNE dont_go_down
0003fd e010                      		 LDI R17, 0
0003fe 9310 0390                 		 STS DOWN_STATE, R17
000400 e011                      		 LDI R17, 1
000401 9310 0392                 		 STS DOWN_STATE_TIMED, R17
000403 9110 0389                 		 dont_go_down: LDS R17, UP_STATE
000405 3011                      					  CPI R17, 1
000406 f431                      					 BRNE dont_go_up
000407 e011                      					 LDI R17, 1
000408 9310 0393                 					 STS UP_STATE_TIMED, R17
00040a e010                      					 LDI R17, 0
00040b 9310 0389                 					 STS UP_STATE, R17
                                 		 dont_go_up: 	
                                 ;        ;CALL CHECK_STATE
                                 ;        LDI ZH,0x01
                                 ;        LDI ZL,0x00
                                         ; CBI PORTC, 2
00040d be2f                      		OUT SREG, R2
00040e 902f                      		POP R2
00040f 912f                      		POP R18
000410 911f                      		POP R17
000411 9518                               RETI
                                 
                                 JoystickInterrupt:
000412 920f                      		  PUSH R0
000413 934f                      		  PUSH DummyReg
000414 b60f                      		  IN R0, SREG
                                 
000415 9140 0383                           LDS DummyReg, SCREEN_STATE
000417 3042                                CPI DummyReg, game_screen ; while playing can't switch state here
000418 f409                                BRNE next_state
                                 
000419 c00c                      		  rjmp exit_joystick_interrupt
                                 
00041a 9140 0384                           next_state: LDS DummyReg, JOY_STK_STATE   ;Stores last state of joystick for change after two actions on interrupt
00041c ff40                                SBRS DummyReg, 0        ; skip state increase if previous state was joy stick not pressed
00041d 940e 044e                           CALL increment_state
00041f 9140 0384                           LDS DummyReg, JOY_STK_STATE
000421 9543                                INC DummyReg
000422 9340 0384                           STS JOY_STK_STATE, DummyReg
000424 e000                                  LDI R16, 0x00
000425 bb0b                                  OUT PCIFR, R16 ; reset interrupt
                                           
000426 be0f                      		 exit_joystick_interrupt: OUT SREG, R0
000427 914f                      		  POP DummyReg
000428 900f                      		  POP R0
000429 9518                      		  RETI
                                 
00042a 930f                      AdcInterrupt: PUSH R16
00042b 931f                      			  PUSH R17
00042c 922f                      			  PUSH R2
00042d b62f                      			  IN R2, SREG
                                 
00042e 9110 0391                 			  LDS R17, MOVE_STATE
000430 3010                      			  CPI R17, 0
000431 f0a1                      			  BREQ quit
                                 
                                 
000432 9100 0078                 			  LDS R16, ADCL
000434 9110 0079                 			  LDS R17, ADCH
                                 
000436 331c                      			  CPI R17, 60
000437 f050                      			  BRLO trigger_up
                                 
000438 9a43                      		SBI PORTC, 3
                                 
000439 3c18                      		CPI R17, 200
00043a f028                      		BRLO no_trigger
                                 
00043b 9842                      		CBI PORTC, 2
                                 		; - triggger a move down -
00043c e001                      		LDI R16, 1 
00043d 9300 0390                 		STS DOWN_STATE, R16
                                 	
00043f c006                      		rjmp quit
                                 
000440 9a42                      		no_trigger:  SBI PORTC, 2
000441 c004                      				rjmp quit
                                 
000442 9843                      		trigger_up:    CBI PORTC, 3
                                 		 			; - triggger a move up -
000443 e001                      					LDI R16, 1
000444 9300 0389                 					STS UP_STATE, R16
                                 
000446 ee0b                      		quit:	LDI R16, 0b1110_1011 ;[ADEN,ADSC,ADATE,ADIF,_,ADIE,ADPS2,ADPS1,ADPS0]
000447 9300 007a                 				STS ADCSRA, R16 ;START ANALOG TO DIGITAL CONVERSION
                                 					
000449 be2f                      				OUT SREG, R2
00044a 902f                      				POP R2
00044b 911f                      				POP R17
00044c 910f                      				POP R16
00044d 9518                      				RETI
                                 
                                 increment_state:
00044e 9140 0383                   LDS DummyReg, SCREEN_STATE
000450 3041                        CPI DummyReg, start_screen
000451 f021                        BREQ to_next_state
                                   ;CPI DummyReg, game_screen
                                   ;BREQ to_next_state
000452 3043                        CPI DummyReg, over_screen
000453 f081                        BREQ to_start_state
000454 3044                        CPI DummyReg, win_screen
000455 f071                        BREQ to_start_state
                                 
                                   to_next_state:
000456 9543                          INC DummyReg
000457 9340 0383                     STS SCREEN_STATE, DummyReg
000459 e0b2                      	LDI XH, 0x02
00045a e0d2                      LDI YH, 0x02
00045b e5c0                      LDI YL, 0x50
00045c e9a0                      LDI XL, 0x90
                                 
00045d e114                      LDI local_index1, 20
00045e e000                      LDI R16, 0x00
00045f 8308                      INIT_BULLETS: ST Y, R16
000460 930c                              ST X, R16
000461 951a                              DEC local_index1
000462 f7e1                              BRNE INIT_BULLETS
000463 9508                          RET
                                   to_start_state:
000464 e041                          LDI DummyReg, start_screen
000465 9340 0383                     STS SCREEN_STATE, DummyReg
000467 9508                          RET
                                 
                                 ;character memory table
                                 ;Stores >START!
                                 ;     ----
                                 CharTable1:
000468 0000
000469 0000
00046a 0000
00046b 0000                      .DB 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000 ;Nothing
00046c 0000
00046d 0000
00046e 0000
00046f 0000                      .DB 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000 ;Nothing
000470 0000
000471 1f00
000472 0000
000473 0000                      .DB 0b00000, 0b00000, 0b00000, 0b11111, 0b00000, 0b00000, 0b00000, 0b00000 ;line
000474 0000
000475 1f00
000476 0000
000477 0000                      .DB 0b00000, 0b00000, 0b00000, 0b11111, 0b00000, 0b00000, 0b00000, 0b00000 ;line
000478 0000
000479 1f00
00047a 0000
00047b 0000                      .DB 0b00000, 0b00000, 0b00000, 0b11111, 0b00000, 0b00000, 0b00000, 0b00000 ;line
00047c 0000
00047d 1f00
00047e 0000
00047f 0000                      .DB 0b00000, 0b00000, 0b00000, 0b11111, 0b00000, 0b00000, 0b00000, 0b00000 ;line
000480 0000
000481 0000
000482 0000
000483 0000                      .DB 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000 ;Nothing
000484 0000
000485 0000
000486 0000
000487 0000                      .DB 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000 ;Nothing
000488 0000
000489 0000
00048a 0000
00048b 0000                      .DB 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000 ;Nothing
00048c 0404
00048d 0404
00048e 0004
00048f 0004                      .DB 0b00100, 0b00100, 0b00100, 0b00100, 0b00100, 0b00000, 0b00100, 0b00000 ;exclamation
000490 040e
000491 0404
000492 0404
000493 0004                      .DB 0b01110, 0b00100, 0b00100, 0b00100, 0b00100, 0b00100, 0b00100, 0b00000 ;T
000494 090e
000495 0e09
000496 0a0c
000497 0009                      .DB 0b01110, 0b01001, 0b01001, 0b01110, 0b01100, 0b01010, 0b01001, 0b00000 ;R
000498 0906
000499 0f09
00049a 0909
00049b 0009                      .DB 0b00110, 0b01001, 0b01001, 0b01111, 0b01001, 0b01001, 0b01001, 0b00000 ;A
00049c 040e
00049d 0404
00049e 0404
00049f 0004                      .DB 0b01110, 0b00100, 0b00100, 0b00100, 0b00100, 0b00100, 0b00100, 0b00000 ;T
0004a0 0807
0004a1 0608
0004a2 0101
0004a3 000e                      .DB 0b00111, 0b01000, 0b01000, 0b00110, 0b00001, 0b00001, 0b01110, 0b00000 ;S
0004a4 0400
0004a5 0102
0004a6 0402
0004a7 0000                      .DB 0b00000, 0b00100, 0b00010, 0b00001, 0b00010, 0b00100, 0b00000, 0b00000 ;small arrow
0004a8 0000
0004a9 0000
0004aa 0000
0004ab 0000                      .DB 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000 ;Nothing
                                 
                                 CharTable2:
0004ac 090e
0004ad 0e09
0004ae 0a0c
0004af 0009                      .DB 0b01110, 0b01001, 0b01001, 0b01110, 0b01100, 0b01010, 0b01001, 0b00000 ;R
0004b0 080f
0004b1 0f08
0004b2 0808
0004b3 000f                      .DB 0b01111, 0b01000, 0b01000, 0b01111, 0b01000, 0b01000, 0b01111, 0b00000 ;E
0004b4 1111
0004b5 1111
0004b6 0a11
0004b7 0004                      .DB 0b10001, 0b10001, 0b10001, 0b10001, 0b10001, 0b01010, 0b00100, 0b00000 ;V
0004b8 0906
0004b9 0909
0004ba 0909
0004bb 0006                      .DB 0b00110, 0b01001, 0b01001, 0b01001, 0b01001, 0b01001, 0b00110, 0b00000 ;0
0004bc 0000
0004bd 0000
0004be 0000
0004bf 0000                      .DB 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000 ;Nothing
0004c0 0400
0004c1 0102
0004c2 0402
0004c3 0000                      .DB 0b00000, 0b00100, 0b00010, 0b00001, 0b00010, 0b00100, 0b00000, 0b00000 ;small arrow
0004c4 0400
0004c5 0102
0004c6 0402
0004c7 0000                      .DB 0b00000, 0b00100, 0b00010, 0b00001, 0b00010, 0b00100, 0b00000, 0b00000 ;small arrow
0004c8 0000
0004c9 0000
0004ca 0000
0004cb 0000                      .DB 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000 ;Nothing
0004cc 0000
0004cd 0000
0004ce 0000
0004cf 0000                      .DB 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000 ;Nothing
0004d0 0400
0004d1 0102
0004d2 0402
0004d3 0000                      .DB 0b00000, 0b00100, 0b00010, 0b00001, 0b00010, 0b00100, 0b00000, 0b00000 ;small arrow
0004d4 0400
0004d5 0102
0004d6 0402
0004d7 0000                      .DB 0b00000, 0b00100, 0b00010, 0b00001, 0b00010, 0b00100, 0b00000, 0b00000 ;small arrow
0004d8 0000
0004d9 0000
0004da 0000
0004db 0000                      .DB 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000 ;Nothing
0004dc 080f
0004dd 0f08
0004de 0808
0004df 000f                      .DB 0b01111, 0b01000, 0b01000, 0b01111, 0b01000, 0b01000, 0b01111, 0b00000 ;E
0004e0 1b11
0004e1 1115
0004e2 1111
0004e3 0011                      .DB 0b10001, 0b11011, 0b10101, 0b10001, 0b10001, 0b10001, 0b10001, 0b00000 ;M
0004e4 0906
0004e5 0f09
0004e6 0909
0004e7 0009                      .DB 0b00110, 0b01001, 0b01001, 0b01111, 0b01001, 0b01001, 0b01001, 0b00000 ;A
0004e8 0906
0004e9 0b08
0004ea 0909
0004eb 0006                      .DB 0b00110, 0b01001, 0b01000, 0b01011, 0b01001, 0b01001, 0b00110, 0b00000 ;G
                                 
                                 CharTable3:
0004ec 0000
0004ed 0000
0004ee 0000
0004ef 0000                      .DB 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000 ;Nothing
0004f0 0400
0004f1 1b0e
0004f2 040e
0004f3 0000                      .DB 0b00000, 0b00100, 0b01110, 0b11011, 0b01110, 0b00100, 0b00000, 0b00000 ;Diamond
0004f4 0400
0004f5 1b0e
0004f6 040e
0004f7 0000                      .DB 0b00000, 0b00100, 0b01110, 0b11011, 0b01110, 0b00100, 0b00000, 0b00000 ;Diamond
0004f8 0400
0004f9 1b0e
0004fa 040e
0004fb 0000                      .DB 0b00000, 0b00100, 0b01110, 0b11011, 0b01110, 0b00100, 0b00000, 0b00000 ;Diamond
0004fc 0400
0004fd 1b0e
0004fe 040e
0004ff 0000                      .DB 0b00000, 0b00100, 0b01110, 0b11011, 0b01110, 0b00100, 0b00000, 0b00000 ;Diamond
000500 0400
000501 1b0e
000502 040e
000503 0000                      .DB 0b00000, 0b00100, 0b01110, 0b11011, 0b01110, 0b00100, 0b00000, 0b00000 ;Diamond
000504 0400
000505 1b0e
000506 040e
000507 0000                      .DB 0b00000, 0b00100, 0b01110, 0b11011, 0b01110, 0b00100, 0b00000, 0b00000 ;Diamond
000508 0000
000509 0000
00050a 0000
00050b 0000                      .DB 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000 ;Nothing
00050c 1111
00050d 1519
00050e 1113
00050f 1011                      .DB 0b10001, 0b10001, 0b11001, 0b10101, 0b10011, 0b10001, 0b10001, 0b10000 ;N
000510 040e
000511 0404
000512 0404
000513 000e                      .DB 0b01110, 0b00100, 0b00100, 0b00100, 0b00100, 0b00100, 0b01110, 0b00000 ;I
000514 1111
000515 1111
000516 1b15
000517 0011                      .DB 0b10001, 0b10001, 0b10001, 0b10001, 0b10101, 0b11011, 0b10001, 0b00000 ;W
000518 0000
000519 0000
00051a 0000
00051b 0000                      .DB 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000 ;Nothing
00051c 0000
00051d 0000
00051e 0000
00051f 0000                      .DB 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000 ;Nothing
000520 0909
000521 0909
000522 0909
000523 0006                      .DB 0b01001, 0b01001, 0b01001, 0b01001, 0b01001, 0b01001, 0b00110, 0b00000 ;U
000524 0906
000525 0909
000526 0909
000527 0006                      .DB 0b00110, 0b01001, 0b01001, 0b01001, 0b01001, 0b01001, 0b00110, 0b00000 ;0
000528 0a11
000529 0404
00052a 0404
00052b 0404                      .DB 0b10001, 0b01010, 0b00100, 0b00100, 0b00100, 0b00100, 0b00100, 0b00100 ;Y
                                 
                                 
                                 NotesTable: ; 100 for silence and 1 to reset pointer
00052c f4f4
00052d f464
00052e 6464
00052f 64f4                      .DB 244, 244, 100, 244, 100, 100, 244, 100
000530 64f6
000531 64ec
000532 64f1
000533 eee8                      .DB 246, 100, 236, 100, 241, 100, 232, 238
000534 f064
000535 eeef
000536 f4ec
000537 64f6                      .DB 100, 240, 239, 238, 236, 244, 246, 100
000538 f4f7
000539 64f6
00053a f1f4
00053b 01f2                      .DB 247, 244, 246, 100, 244, 241, 242, 1
00053c f164
00053d ec64
00053e 64e8
00053f 64ee                      .DB 100, 241, 100, 236, 232, 100, 238, 100
000540 64ee
000541 64f0
000542 eeef
000543 f4ec                      .DB 238, 100, 240, 100, 239, 238, 236, 244
000544 64f6
000545 f401
000546 64f6
000547 f1f4                      .DB 246, 100, 257, 244, 246, 100, 244, 241
000548 f0f2
000549 0164
00054a 0101
00054b 0101                      .DB 242, 240, 100, 1, 1, 1, 1, 1


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega328P" register use summary:
x  :  12 y  :  12 z  :  87 r0 :   8 r1 :   2 r2 :  24 r3 :   0 r4 :   0 
r5 :   0 r6 :   0 r7 :   0 r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 
r13:   0 r14:   0 r15:   0 r16: 155 r17:  90 r18:  67 r19:  16 r20: 164 
r21:   0 r22:   0 r23:   0 r24:  12 r25:   1 r26:  21 r27:   3 r28:  12 
r29:   7 r30:  86 r31:  21 
Registers used: 19 out of 35 (54.3%)

"ATmega328P" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   0 add   :   0 adiw  :   0 and   :   0 
andi  :   1 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   6 brcs  :   0 break :   0 breq  :  34 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   2 brlt  :   0 brmi  :   0 
brne  :  26 brpl  :   0 brsh  :   0 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :  50 cbi   :  19 cbr   :   0 
clc   :   3 clh   :   0 cli   :   0 cln   :   0 clr   :   0 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :   1 cpc   :   0 
cpi   :  39 cpse  :   0 dec   :  22 eor   :   2 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :   0 ijmp  :   0 in    :  10 inc   :  10 jmp   :   0 
ld    :  43 ldd   :  11 ldi   : 235 lds   :  32 lpm   :   2 lsl   :   7 
lsr   :   7 mov   :   4 movw  :   0 mul   :   0 muls  :   0 mulsu :   0 
neg   :   0 nop   :   3 or    :   7 ori   :   0 out   :  19 pop   :  38 
push  :  38 rcall :  14 ret   :  41 reti  :   5 rjmp  :  21 rol   :   0 
ror   :   0 sbc   :   0 sbci  :   0 sbi   :  23 sbic  :   0 sbis  :   0 
sbiw  :   0 sbr   :   0 sbrc  :   2 sbrs  :   1 sec   :   0 seh   :   0 
sei   :   1 sen   :   0 ser   :   0 ses   :   0 set   :   0 sev   :   0 
sez   :   0 sleep :   0 spm   :   0 st    :  55 std   :   0 sts   :  87 
sub   :   1 subi  :   0 swap  :   0 tst   :   0 wdr   :   0 
Instructions used: 38 out of 113 (33.6%)

"ATmega328P" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000a98   2182    456   2638   32768   8.1%
[.dseg] 0x000100 0x000100      0      0      0    2048   0.0%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 0 warnings
