
AVRASM ver. 2.2.8  C:\Users\Slash\Documents\SME\ships_design\AssemblerApplication1\main.asm Sun May 01 08:36:17 2022

[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.6.364\avrasm\inc\m328Pdef.inc'
C:\Users\Slash\Documents\SME\ships_design\AssemblerApplication1\main.asm(10): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.6.364\avrasm\inc\m328pdef.inc'
[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.6.364\avrasm\inc\m328Pdef.inc'
C:\Users\Slash\Documents\SME\ships_design\AssemblerApplication1\main.asm(10): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.6.364\avrasm\inc\m328pdef.inc'
                                 
                                 ;
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega328P.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m328Pdef.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega328P
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega328P
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M328PDEF_INC_
                                 #define _M328PDEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega328P
                                 #pragma AVRPART ADMIN PART_NAME ATmega328P
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x95
                                 .equ	SIGNATURE_002	= 0x0f
                                 
                                 #pragma AVRPART CORE CORE_VERSION V2E
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	UDR0	= 0xc6	; MEMORY MAPPED
                                 .equ	UBRR0L	= 0xc4	; MEMORY MAPPED
                                 .equ	UBRR0H	= 0xc5	; MEMORY MAPPED
                                 .equ	UCSR0C	= 0xc2	; MEMORY MAPPED
                                 .equ	UCSR0B	= 0xc1	; MEMORY MAPPED
                                 .equ	UCSR0A	= 0xc0	; MEMORY MAPPED
                                 .equ	TWAMR	= 0xbd	; MEMORY MAPPED
                                 .equ	TWCR	= 0xbc	; MEMORY MAPPED
                                 .equ	TWDR	= 0xbb	; MEMORY MAPPED
                                 .equ	TWAR	= 0xba	; MEMORY MAPPED
                                 .equ	TWSR	= 0xb9	; MEMORY MAPPED
                                 .equ	TWBR	= 0xb8	; MEMORY MAPPED
                                 .equ	ASSR	= 0xb6	; MEMORY MAPPED
                                 .equ	OCR2B	= 0xb4	; MEMORY MAPPED
                                 .equ	OCR2A	= 0xb3	; MEMORY MAPPED
                                 .equ	TCNT2	= 0xb2	; MEMORY MAPPED
                                 .equ	TCCR2B	= 0xb1	; MEMORY MAPPED
                                 .equ	TCCR2A	= 0xb0	; MEMORY MAPPED
                                 .equ	OCR1BL	= 0x8a	; MEMORY MAPPED
                                 .equ	OCR1BH	= 0x8b	; MEMORY MAPPED
                                 .equ	OCR1AL	= 0x88	; MEMORY MAPPED
                                 .equ	OCR1AH	= 0x89	; MEMORY MAPPED
                                 .equ	ICR1L	= 0x86	; MEMORY MAPPED
                                 .equ	ICR1H	= 0x87	; MEMORY MAPPED
                                 .equ	TCNT1L	= 0x84	; MEMORY MAPPED
                                 .equ	TCNT1H	= 0x85	; MEMORY MAPPED
                                 .equ	TCCR1C	= 0x82	; MEMORY MAPPED
                                 .equ	TCCR1B	= 0x81	; MEMORY MAPPED
                                 .equ	TCCR1A	= 0x80	; MEMORY MAPPED
                                 .equ	DIDR1	= 0x7f	; MEMORY MAPPED
                                 .equ	DIDR0	= 0x7e	; MEMORY MAPPED
                                 .equ	ADMUX	= 0x7c	; MEMORY MAPPED
                                 .equ	ADCSRB	= 0x7b	; MEMORY MAPPED
                                 .equ	ADCSRA	= 0x7a	; MEMORY MAPPED
                                 .equ	ADCH	= 0x79	; MEMORY MAPPED
                                 .equ	ADCL	= 0x78	; MEMORY MAPPED
                                 .equ	TIMSK2	= 0x70	; MEMORY MAPPED
                                 .equ	TIMSK1	= 0x6f	; MEMORY MAPPED
                                 .equ	TIMSK0	= 0x6e	; MEMORY MAPPED
                                 .equ	PCMSK1	= 0x6c	; MEMORY MAPPED
                                 .equ	PCMSK2	= 0x6d	; MEMORY MAPPED
                                 .equ	PCMSK0	= 0x6b	; MEMORY MAPPED
                                 .equ	EICRA	= 0x69	; MEMORY MAPPED
                                 .equ	PCICR	= 0x68	; MEMORY MAPPED
                                 .equ	OSCCAL	= 0x66	; MEMORY MAPPED
                                 .equ	PRR	= 0x64	; MEMORY MAPPED
                                 .equ	CLKPR	= 0x61	; MEMORY MAPPED
                                 .equ	WDTCSR	= 0x60	; MEMORY MAPPED
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	SPMCSR	= 0x37
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUSR	= 0x34
                                 .equ	SMCR	= 0x33
                                 .equ	ACSR	= 0x30
                                 .equ	SPDR	= 0x2e
                                 .equ	SPSR	= 0x2d
                                 .equ	SPCR	= 0x2c
                                 .equ	GPIOR2	= 0x2b
                                 .equ	GPIOR1	= 0x2a
                                 .equ	OCR0B	= 0x28
                                 .equ	OCR0A	= 0x27
                                 .equ	TCNT0	= 0x26
                                 .equ	TCCR0B	= 0x25
                                 .equ	TCCR0A	= 0x24
                                 .equ	GTCCR	= 0x23
                                 .equ	EEARH	= 0x22
                                 .equ	EEARL	= 0x21
                                 .equ	EEDR	= 0x20
                                 .equ	EECR	= 0x1f
                                 .equ	GPIOR0	= 0x1e
                                 .equ	EIMSK	= 0x1d
                                 .equ	EIFR	= 0x1c
                                 .equ	PCIFR	= 0x1b
                                 .equ	TIFR2	= 0x17
                                 .equ	TIFR1	= 0x16
                                 .equ	TIFR0	= 0x15
                                 .equ	PORTD	= 0x0b
                                 .equ	DDRD	= 0x0a
                                 .equ	PIND	= 0x09
                                 .equ	PORTC	= 0x08
                                 .equ	DDRC	= 0x07
                                 .equ	PINC	= 0x06
                                 .equ	PORTB	= 0x05
                                 .equ	DDRB	= 0x04
                                 .equ	PINB	= 0x03
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** USART0 ***********************
                                 ; UDR0 - USART I/O Data Register
                                 .equ	UDR0_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR0_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR0_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR0_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR0_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR0_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR0_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR0_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR0A - USART Control and Status Register A
                                 .equ	MPCM0	= 0	; Multi-processor Communication Mode
                                 .equ	U2X0	= 1	; Double the USART transmission speed
                                 .equ	UPE0	= 2	; Parity Error
                                 .equ	DOR0	= 3	; Data overRun
                                 .equ	FE0	= 4	; Framing Error
                                 .equ	UDRE0	= 5	; USART Data Register Empty
                                 .equ	TXC0	= 6	; USART Transmitt Complete
                                 .equ	RXC0	= 7	; USART Receive Complete
                                 
                                 ; UCSR0B - USART Control and Status Register B
                                 .equ	TXB80	= 0	; Transmit Data Bit 8
                                 .equ	RXB80	= 1	; Receive Data Bit 8
                                 .equ	UCSZ02	= 2	; Character Size
                                 .equ	TXEN0	= 3	; Transmitter Enable
                                 .equ	RXEN0	= 4	; Receiver Enable
                                 .equ	UDRIE0	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE0	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE0	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR0C - USART Control and Status Register C
                                 .equ	UCPOL0	= 0	; Clock Polarity
                                 .equ	UCSZ00	= 1	; Character Size
                                 .equ	UCPHA0	= UCSZ00	; For compatibility
                                 .equ	UCSZ01	= 2	; Character Size
                                 .equ	UDORD0	= UCSZ01	; For compatibility
                                 .equ	USBS0	= 3	; Stop Bit Select
                                 .equ	UPM00	= 4	; Parity Mode Bit 0
                                 .equ	UPM01	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL00	= 6	; USART Mode Select
                                 .equ	UMSEL0	= UMSEL00	; For compatibility
                                 .equ	UMSEL01	= 7	; USART Mode Select
                                 .equ	UMSEL1	= UMSEL01	; For compatibility
                                 
                                 ; UBRR0H - USART Baud Rate Register High Byte
                                 .equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR0L - USART Baud Rate Register Low Byte
                                 .equ	_UBRR0	= 0	; USART Baud Rate Register bit 0
                                 .equ	_UBRR1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** TWI **************************
                                 ; TWAMR - TWI (Slave) Address Mask Register
                                 .equ	TWAM0	= 1	; 
                                 .equ	TWAMR0	= TWAM0	; For compatibility
                                 .equ	TWAM1	= 2	; 
                                 .equ	TWAMR1	= TWAM1	; For compatibility
                                 .equ	TWAM2	= 3	; 
                                 .equ	TWAMR2	= TWAM2	; For compatibility
                                 .equ	TWAM3	= 4	; 
                                 .equ	TWAMR3	= TWAM3	; For compatibility
                                 .equ	TWAM4	= 5	; 
                                 .equ	TWAMR4	= TWAM4	; For compatibility
                                 .equ	TWAM5	= 6	; 
                                 .equ	TWAMR5	= TWAM5	; For compatibility
                                 .equ	TWAM6	= 7	; 
                                 .equ	TWAMR6	= TWAM6	; For compatibility
                                 
                                 ; TWBR - TWI Bit Rate register
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	TWPS0	= 0	; TWI Prescaler
                                 .equ	TWPS1	= 1	; TWI Prescaler
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	TWS7	= 7	; TWI Status
                                 
                                 ; TWDR - TWI Data register
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK1 - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE1	= 0	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1A	= 1	; Timer/Counter1 Output CompareA Match Interrupt Enable
                                 .equ	OCIE1B	= 2	; Timer/Counter1 Output CompareB Match Interrupt Enable
                                 .equ	ICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR1 - Timer/Counter Interrupt Flag register
                                 .equ	TOV1	= 0	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1A	= 1	; Output Compare Flag 1A
                                 .equ	OCF1B	= 2	; Output Compare Flag 1B
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode
                                 .equ	WGM11	= 1	; Waveform Generation Mode
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Comparet Ouput Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 ; TCCR1C - Timer/Counter1 Control Register C
                                 .equ	FOC1B	= 6	; 
                                 .equ	FOC1A	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 .equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TIMSK2 - Timer/Counter Interrupt Mask register
                                 .equ	TOIE2	= 0	; Timer/Counter2 Overflow Interrupt Enable
                                 .equ	TOIE2A	= TOIE2	; For compatibility
                                 .equ	OCIE2A	= 1	; Timer/Counter2 Output Compare Match A Interrupt Enable
                                 .equ	OCIE2B	= 2	; Timer/Counter2 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR2 - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 0	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2A	= 1	; Output Compare Flag 2A
                                 .equ	OCF2B	= 2	; Output Compare Flag 2B
                                 
                                 ; TCCR2A - Timer/Counter2 Control Register A
                                 .equ	WGM20	= 0	; Waveform Genration Mode
                                 .equ	WGM21	= 1	; Waveform Genration Mode
                                 .equ	COM2B0	= 4	; Compare Output Mode bit 0
                                 .equ	COM2B1	= 5	; Compare Output Mode bit 1
                                 .equ	COM2A0	= 6	; Compare Output Mode bit 1
                                 .equ	COM2A1	= 7	; Compare Output Mode bit 1
                                 
                                 ; TCCR2B - Timer/Counter2 Control Register B
                                 .equ	CS20	= 0	; Clock Select bit 0
                                 .equ	CS21	= 1	; Clock Select bit 1
                                 .equ	CS22	= 2	; Clock Select bit 2
                                 .equ	WGM22	= 3	; Waveform Generation Mode
                                 .equ	FOC2B	= 6	; Force Output Compare B
                                 .equ	FOC2A	= 7	; Force Output Compare A
                                 
                                 ; TCNT2 - Timer/Counter2
                                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                                 
                                 ; OCR2A - Timer/Counter2 Output Compare Register A
                                 .equ	OCR2A_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2A_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2A_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2A_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2A_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2A_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2A_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2A_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; OCR2B - Timer/Counter2 Output Compare Register B
                                 .equ	OCR2B_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2B_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2B_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2B_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2B_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2B_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2B_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2B_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; ASSR - Asynchronous Status Register
                                 .equ	TCR2BUB	= 0	; Timer/Counter Control Register2 Update Busy
                                 .equ	TCR2AUB	= 1	; Timer/Counter Control Register2 Update Busy
                                 .equ	OCR2BUB	= 2	; Output Compare Register 2 Update Busy
                                 .equ	OCR2AUB	= 3	; Output Compare Register2 Update Busy
                                 .equ	TCN2UB	= 4	; Timer/Counter2 Update Busy
                                 .equ	AS2	= 5	; Asynchronous Timer/Counter2
                                 .equ	EXCLK	= 6	; Enable External Clock Input
                                 
                                 ; GTCCR - General Timer Counter Control register
                                 .equ	PSRASY	= 1	; Prescaler Reset Timer/Counter2
                                 .equ	PSR2	= PSRASY	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register A
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADATE	= 5	; ADC  Auto Trigger Enable
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCSRB - The ADC Control and Status register B
                                 .equ	ADTS0	= 0	; ADC Auto Trigger Source bit 0
                                 .equ	ADTS1	= 1	; ADC Auto Trigger Source bit 1
                                 .equ	ADTS2	= 2	; ADC Auto Trigger Source bit 2
                                 .equ	ACME	= 6	; 
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 ; DIDR0 - Digital Input Disable Register
                                 .equ	ADC0D	= 0	; 
                                 .equ	ADC1D	= 1	; 
                                 .equ	ADC2D	= 2	; 
                                 .equ	ADC3D	= 3	; 
                                 .equ	ADC4D	= 4	; 
                                 .equ	ADC5D	= 5	; 
                                 
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 ; DIDR1 - Digital Input Disable Register 1
                                 .equ	AIN0D	= 0	; AIN0 Digital Input Disable
                                 .equ	AIN1D	= 1	; AIN1 Digital Input Disable
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TIMSK0 - Timer/Counter0 Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0A	= 1	; Timer/Counter0 Output Compare Match A Interrupt Enable
                                 .equ	OCIE0B	= 2	; Timer/Counter0 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR0 - Timer/Counter0 Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0A	= 1	; Timer/Counter0 Output Compare Flag 0A
                                 .equ	OCF0B	= 2	; Timer/Counter0 Output Compare Flag 0B
                                 
                                 ; TCCR0A - Timer/Counter  Control Register A
                                 .equ	WGM00	= 0	; Waveform Generation Mode
                                 .equ	WGM01	= 1	; Waveform Generation Mode
                                 .equ	COM0B0	= 4	; Compare Output Mode, Fast PWm
                                 .equ	COM0B1	= 5	; Compare Output Mode, Fast PWm
                                 .equ	COM0A0	= 6	; Compare Output Mode, Phase Correct PWM Mode
                                 .equ	COM0A1	= 7	; Compare Output Mode, Phase Correct PWM Mode
                                 
                                 ; TCCR0B - Timer/Counter Control Register B
                                 .equ	CS00	= 0	; Clock Select
                                 .equ	CS01	= 1	; Clock Select
                                 .equ	CS02	= 2	; Clock Select
                                 .equ	WGM02	= 3	; 
                                 .equ	FOC0B	= 6	; Force Output Compare B
                                 .equ	FOC0A	= 7	; Force Output Compare A
                                 
                                 ; TCNT0 - Timer/Counter0
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0A - Timer/Counter0 Output Compare Register
                                 .equ	OCR0A_0	= 0	; 
                                 .equ	OCR0A_1	= 1	; 
                                 .equ	OCR0A_2	= 2	; 
                                 .equ	OCR0A_3	= 3	; 
                                 .equ	OCR0A_4	= 4	; 
                                 .equ	OCR0A_5	= 5	; 
                                 .equ	OCR0A_6	= 6	; 
                                 .equ	OCR0A_7	= 7	; 
                                 
                                 ; OCR0B - Timer/Counter0 Output Compare Register
                                 .equ	OCR0B_0	= 0	; 
                                 .equ	OCR0B_1	= 1	; 
                                 .equ	OCR0B_2	= 2	; 
                                 .equ	OCR0B_3	= 3	; 
                                 .equ	OCR0B_4	= 4	; 
                                 .equ	OCR0B_5	= 5	; 
                                 .equ	OCR0B_6	= 6	; 
                                 .equ	OCR0B_7	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 ;.equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	PSR10	= PSRSYNC	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; EICRA - External Interrupt Control Register
                                 .equ	ISC00	= 0	; External Interrupt Sense Control 0 Bit 0
                                 .equ	ISC01	= 1	; External Interrupt Sense Control 0 Bit 1
                                 .equ	ISC10	= 2	; External Interrupt Sense Control 1 Bit 0
                                 .equ	ISC11	= 3	; External Interrupt Sense Control 1 Bit 1
                                 
                                 ; EIMSK - External Interrupt Mask Register
                                 .equ	INT0	= 0	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 1	; External Interrupt Request 1 Enable
                                 
                                 ; EIFR - External Interrupt Flag Register
                                 .equ	INTF0	= 0	; External Interrupt Flag 0
                                 .equ	INTF1	= 1	; External Interrupt Flag 1
                                 
                                 ; PCICR - Pin Change Interrupt Control Register
                                 .equ	PCIE0	= 0	; Pin Change Interrupt Enable 0
                                 .equ	PCIE1	= 1	; Pin Change Interrupt Enable 1
                                 .equ	PCIE2	= 2	; Pin Change Interrupt Enable 2
                                 
                                 ; PCMSK2 - Pin Change Mask Register 2
                                 .equ	PCINT16	= 0	; Pin Change Enable Mask 16
                                 .equ	PCINT17	= 1	; Pin Change Enable Mask 17
                                 .equ	PCINT18	= 2	; Pin Change Enable Mask 18
                                 .equ	PCINT19	= 3	; Pin Change Enable Mask 19
                                 .equ	PCINT20	= 4	; Pin Change Enable Mask 20
                                 .equ	PCINT21	= 5	; Pin Change Enable Mask 21
                                 .equ	PCINT22	= 6	; Pin Change Enable Mask 22
                                 .equ	PCINT23	= 7	; Pin Change Enable Mask 23
                                 
                                 ; PCMSK1 - Pin Change Mask Register 1
                                 .equ	PCINT8	= 0	; Pin Change Enable Mask 8
                                 .equ	PCINT9	= 1	; Pin Change Enable Mask 9
                                 .equ	PCINT10	= 2	; Pin Change Enable Mask 10
                                 .equ	PCINT11	= 3	; Pin Change Enable Mask 11
                                 .equ	PCINT12	= 4	; Pin Change Enable Mask 12
                                 .equ	PCINT13	= 5	; Pin Change Enable Mask 13
                                 .equ	PCINT14	= 6	; Pin Change Enable Mask 14
                                 
                                 ; PCMSK0 - Pin Change Mask Register 0
                                 .equ	PCINT0	= 0	; Pin Change Enable Mask 0
                                 .equ	PCINT1	= 1	; Pin Change Enable Mask 1
                                 .equ	PCINT2	= 2	; Pin Change Enable Mask 2
                                 .equ	PCINT3	= 3	; Pin Change Enable Mask 3
                                 .equ	PCINT4	= 4	; Pin Change Enable Mask 4
                                 .equ	PCINT5	= 5	; Pin Change Enable Mask 5
                                 .equ	PCINT6	= 6	; Pin Change Enable Mask 6
                                 .equ	PCINT7	= 7	; Pin Change Enable Mask 7
                                 
                                 ; PCIFR - Pin Change Interrupt Flag Register
                                 .equ	PCIF0	= 0	; Pin Change Interrupt Flag 0
                                 .equ	PCIF1	= 1	; Pin Change Interrupt Flag 1
                                 .equ	PCIF2	= 2	; Pin Change Interrupt Flag 2
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCSR - Watchdog Timer Control Register
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDCE	= 4	; Watchdog Change Enable
                                 .equ	WDP3	= 5	; Watchdog Timer Prescaler Bit 3
                                 .equ	WDIE	= 6	; Watchdog Timeout Interrupt Enable
                                 .equ	WDIF	= 7	; Watchdog Timeout Interrupt Flag
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; CLKPR - Clock Prescale Register
                                 .equ	CLKPS0	= 0	; Clock Prescaler Select Bit 0
                                 .equ	CLKPS1	= 1	; Clock Prescaler Select Bit 1
                                 .equ	CLKPS2	= 2	; Clock Prescaler Select Bit 2
                                 .equ	CLKPS3	= 3	; Clock Prescaler Select Bit 3
                                 .equ	CLKPCE	= 7	; Clock Prescaler Change Enable
                                 
                                 ; SPMCSR - Store Program Memory Control and Status Register
                                 .equ    SELFPRGEN = 0; Added for backwards compatibility
                                 .equ	SPMEN	= 0	; Store Program Memory
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read-While-Write section read enable
                                 .equ    SIGRD   = 5 ; Signature Row Read
                                 .equ	RWWSB	= 6	; Read-While-Write Section Busy
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	IVCE	= 0	; 
                                 .equ	IVSEL	= 1	; 
                                 .equ	PUD	= 4	; 
                                 .equ	BODSE	= 5	; BOD Sleep Enable
                                 .equ	BODS	= 6	; BOD Sleep
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	EXTREF	= EXTRF	; For compatibility
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 
                                 ; SMCR - Sleep Mode Control Register
                                 .equ	SE	= 0	; Sleep Enable
                                 .equ	SM0	= 1	; Sleep Mode Select Bit 0
                                 .equ	SM1	= 2	; Sleep Mode Select Bit 1
                                 .equ	SM2	= 3	; Sleep Mode Select Bit 2
                                 
                                 ; GPIOR2 - General Purpose I/O Register 2
                                 .equ	GPIOR20	= 0	; 
                                 .equ	GPIOR21	= 1	; 
                                 .equ	GPIOR22	= 2	; 
                                 .equ	GPIOR23	= 3	; 
                                 .equ	GPIOR24	= 4	; 
                                 .equ	GPIOR25	= 5	; 
                                 .equ	GPIOR26	= 6	; 
                                 .equ	GPIOR27	= 7	; 
                                 
                                 ; GPIOR1 - General Purpose I/O Register 1
                                 .equ	GPIOR10	= 0	; 
                                 .equ	GPIOR11	= 1	; 
                                 .equ	GPIOR12	= 2	; 
                                 .equ	GPIOR13	= 3	; 
                                 .equ	GPIOR14	= 4	; 
                                 .equ	GPIOR15	= 5	; 
                                 .equ	GPIOR16	= 6	; 
                                 .equ	GPIOR17	= 7	; 
                                 
                                 ; GPIOR0 - General Purpose I/O Register 0
                                 .equ	GPIOR00	= 0	; 
                                 .equ	GPIOR01	= 1	; 
                                 .equ	GPIOR02	= 2	; 
                                 .equ	GPIOR03	= 3	; 
                                 .equ	GPIOR04	= 4	; 
                                 .equ	GPIOR05	= 5	; 
                                 .equ	GPIOR06	= 6	; 
                                 .equ	GPIOR07	= 7	; 
                                 
                                 ; PRR - Power Reduction Register
                                 .equ	PRADC	= 0	; Power Reduction ADC
                                 .equ	PRUSART0	= 1	; Power Reduction USART
                                 .equ	PRSPI	= 2	; Power Reduction Serial Peripheral Interface
                                 .equ	PRTIM1	= 3	; Power Reduction Timer/Counter1
                                 .equ	PRTIM0	= 5	; Power Reduction Timer/Counter0
                                 .equ	PRTIM2	= 6	; Power Reduction Timer/Counter2
                                 .equ	PRTWI	= 7	; Power Reduction TWI
                                 
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEARL - EEPROM Address Register Low Byte
                                 .equ	EEAR0	= 0	; EEPROM Read/Write Access Bit 0
                                 .equ	EEAR1	= 1	; EEPROM Read/Write Access Bit 1
                                 .equ	EEAR2	= 2	; EEPROM Read/Write Access Bit 2
                                 .equ	EEAR3	= 3	; EEPROM Read/Write Access Bit 3
                                 .equ	EEAR4	= 4	; EEPROM Read/Write Access Bit 4
                                 .equ	EEAR5	= 5	; EEPROM Read/Write Access Bit 5
                                 .equ	EEAR6	= 6	; EEPROM Read/Write Access Bit 6
                                 .equ	EEAR7	= 7	; EEPROM Read/Write Access Bit 7
                                 
                                 ; EEARH - EEPROM Address Register High Byte
                                 .equ	EEAR8	= 0	; EEPROM Read/Write Access Bit 8
                                 .equ	EEAR9	= 1	; EEPROM Read/Write Access Bit 9
                                 
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEPE	= 1	; EEPROM Write Enable
                                 .equ	EEMPE	= 2	; EEPROM Master Write Enable
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 .equ	EEPM0	= 4	; EEPROM Programming Mode Bit 0
                                 .equ	EEPM1	= 5	; EEPROM Programming Mode Bit 1
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	SUT0	= 4	; Select start-up time
                                 .equ	SUT1	= 5	; Select start-up time
                                 .equ	CKOUT	= 6	; Clock output
                                 .equ	CKDIV8	= 7	; Divide clock by 8
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select reset vector
                                 .equ	BOOTSZ0	= 1	; Select boot size
                                 .equ	BOOTSZ1	= 2	; Select boot size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	WDTON	= 4	; Watchdog Timer Always On
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	DWEN	= 6	; debugWIRE Enable
                                 .equ	RSTDISBL	= 7	; External reset disable
                                 
                                 ; EXTENDED fuse bits
                                 .equ	BODLEVEL0	= 0	; Brown-out Detector trigger level
                                 .equ	BODLEVEL1	= 1	; Brown-out Detector trigger level
                                 .equ	BODLEVEL2	= 2	; Brown-out Detector trigger level
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x3fff	; Note: Word address
                                 .equ	IOEND	= 0x00ff
                                 .equ	SRAM_START	= 0x0100
                                 .equ	SRAM_SIZE	= 2048
                                 .equ	RAMEND	= 0x08ff
                                 .equ	XRAMEND	= 0x0000
                                 .equ	E2END	= 0x03ff
                                 .equ	EEPROMEND	= 0x03ff
                                 .equ	EEADRBITS	= 10
                                 #pragma AVRPART MEMORY PROG_FLASH 32768
                                 #pragma AVRPART MEMORY EEPROM 1024
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 2048
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0x3800
                                 .equ	NRWW_STOP_ADDR	= 0x3fff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0x37ff
                                 .equ	PAGESIZE	= 64
                                 .equ	FIRSTBOOTSTART	= 0x3f00
                                 .equ	SECONDBOOTSTART	= 0x3e00
                                 .equ	THIRDBOOTSTART	= 0x3c00
                                 .equ	FOURTHBOOTSTART	= 0x3800
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	PCI0addr	= 0x0006	; Pin Change Interrupt Request 0
                                 .equ	PCI1addr	= 0x0008	; Pin Change Interrupt Request 0
                                 .equ	PCI2addr	= 0x000a	; Pin Change Interrupt Request 1
                                 .equ	WDTaddr	= 0x000c	; Watchdog Time-out Interrupt
                                 .equ	OC2Aaddr	= 0x000e	; Timer/Counter2 Compare Match A
                                 .equ	OC2Baddr	= 0x0010	; Timer/Counter2 Compare Match A
                                 .equ	OVF2addr	= 0x0012	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x0014	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x0016	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x0018	; Timer/Counter1 Compare Match B
                                 .equ	OVF1addr	= 0x001a	; Timer/Counter1 Overflow
                                 .equ	OC0Aaddr	= 0x001c	; TimerCounter0 Compare Match A
                                 .equ	OC0Baddr	= 0x001e	; TimerCounter0 Compare Match B
                                 .equ	OVF0addr	= 0x0020	; Timer/Couner0 Overflow
                                 .equ	SPIaddr	= 0x0022	; SPI Serial Transfer Complete
                                 .equ	URXCaddr	= 0x0024	; USART Rx Complete
                                 .equ	UDREaddr	= 0x0026	; USART, Data Register Empty
                                 .equ	UTXCaddr	= 0x0028	; USART Tx Complete
                                 .equ	ADCCaddr	= 0x002a	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x002c	; EEPROM Ready
                                 .equ	ACIaddr	= 0x002e	; Analog Comparator
                                 .equ	TWIaddr	= 0x0030	; Two-wire Serial Interface
                                 .equ	SPMRaddr	= 0x0032	; Store Program Memory Read
                                 
                                 .equ	INT_VECTORS_SIZE	= 52	; size in words
                                 
                                 #endif  /* _M328PDEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 ; UC GAME PROJECT
                                 ;
                                 ; Created: 24-04-2022 10:35:44
                                 ; Authors : Deeksha - Aimen
                                 ;
                                 
                                 
                                 ; Definition file of the ATmega328P
                                 .INCLUDE "m328pdef.inc"
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega328P.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m328Pdef.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega328P
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega328P
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M328PDEF_INC_
                                 #endif  /* _M328PDEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 ; Boot
                                 .ORG 0x0000 ; 
000000 c020                      RJMP Init ; First instruction that is executed by the microcontroller
                                 
                                 ;macro
                                 .DEF Local_index1	= R17
                                 .DEF local_index2	= R18
                                 .DEF PAT_COL1		= R19 ;Temporary Pattern for column
                                 .DEF DummyReg		= R20
                                 .DEF STATE_MACHINE	= R21 ;Stores state of game  00 : start
                                 												;01 : game over
                                 .DEF LAST_JOY		= R22 ; Stores last state of joystick  
                                 .DEF RowIndex		= R23 ; Index used to count the row number
                                 .DEF LAST_KEY		= R24 ; global var to store state of keyboard last 
                                 .DEF BOSS_SHIPCOUNTER = R25 ; Current active gun index of the boss
                                 
                                 .EQU MonsterNotGunPat = 0b11111001
                                 .EQU MonsterGunPat = 0b11111001
                                 .EQU ShipGun = 0b0011111
                                 .EQU ShipMiddle = 0b00111110
                                 .EQU ShipEnd = 0b0010000
                                 
                                 ;keyboard patterns
                                 .EQU BTN8_PATTERN = 0b01111011 ; Button 8 pressed pattern
                                 .EQU BTN7_PATTERN = 0b01110111 ; Button 7 pressed pattern
                                 .EQU BTN5_PATTERN = 0b10111011 ; Button 5 pressed pattern
                                 .EQU BTN4_PATTERN = 0b10110111 ; Button 4 pressed pattern
                                 .EQU BTN2_PATTERN = 0b11011011 ; Button 2 pressed pattern
                                 .EQU NOBTN_PATTERN =  0b11111111 ; No button preesed pattern
                                 .EQU OTHER_PATTERN = 0b00110011 ; Pattern for the rest of the buttons
                                 
                                 ; Interrupts
                                 .ORG 0x0006
000006 c2cc                      rjmp JoystickInterrupt
                                 
                                 .org 0x001A
00001a c288                      rjmp TimerInterrupt
                                 
                                 
                                 .ORG 0x0020
000020 c2a8                      rjmp Timer0interrupt
                                 Init: 
                                 ; Configure output pin PB3
000021 9a23                      SBI DDRB, 3 ; Pin PB3 is an output: Data pin SDI (Serial Data In)
000022 9a24                      SBI DDRB, 4 ; Pin PB4 is an output: Latch/Output pin: LE(Latch Enable) + OE(Output Enable)
000023 9a25                      SBI DDRB, 5 ; Pin PB5 is an output: Clock pin CLK
                                 
                                 ; Configure input joystick pin PB2
000024 9822                      CBI DDRB,2;	pin an input switch
000025 9a2a                      SBI PORTB,2;Enable the pull-up resistor
                                 
                                 ;enabling keyboard input
000026 e00f                      LDI R16, 0x0F
000027 ef10                      LDI R17, 0xF0
000028 b91a                      OUT DDRD, R17 
000029 b90b                      OUT PORTD, R16 ; Init keyboard. set all rows to ground and cols to 1 
                                 
                                 ;LED 
00002a 9a3a                      SBI DDRC, 2
00002b 9a42                      SBI PORTC,2
                                 
                                 ;Initializing state machine
00002c e051                      LDI STATE_MACHINE, 0x01
00002d e060                      LDI LAST_JOY, 0x00
00002e e080                      LDI LAST_KEY, 0x00
                                 
                                 ;CALL init_screen
00002f 940e 01c9                 CALL Load_game_play_start
                                 
000031 9478                      SEI ;Set golabl interrupt
                                 ; timerinterrupt	/* Timer interrupt enabled inside machine state*/
                                 
000032 e004                      LDI R16, 0x04
000033 9300 0081                 STS TCCR1B, R16 ;prescaler timer 1
000035 e005                      LDI R16, 0x05
000036 bd05                      OUT TCCR0B, R16 ;prescaler timer 0
                                  
                                 ; Joystick interrupt
000037 e001                      LDI R16, 0x01
000038 e014                      LDI R17, 4
000039 9300 0068                 STS PCICR, R16
00003b 9310 006b                 STS PCMSK0, R17
                                 
                                 ; INIT BOSS ACTIVE GUN COUNTER = it has 6 guns
00003d e096                      LDI BOSS_SHIPCOUNTER, 6
                                 
                                 ;Main Function
00003e 940e 0048                 Main: CALL display
                                 	;CALL state_machine_update
000040 940e 0052                 	CALL load_screen_state
000042 e060                      	LDI LAST_JOY, 0x00
000043 9a42                      	SBI PORTC,2
000044 cff9                      RJMP Main
                                 
                                 init_screen:
000045 e0f6                      	LDI ZH, high(CharTable2<<1)
000046 e3ea                      	LDI ZL, low(CharTable2<<1)
000047 9508                      RET
                                 
                                 Display:
000048 e078                      	LDI RowIndex, 0x08 ;index for send1row
                                 	Send1Row:
000049 940e 0244                 		CALL execute_col_loop
00004b 940e 0277                 		CALL execute_row_loop
00004d 940e 0282                 		CALL Latch_shift_reg
00004f 957a                      		DEC RowIndex
000050 f7c1                      	BRNE Send1Row
000051 9508                      RET
                                 
                                 Load_screen_state:
000052 3051                      	CPI STATE_MACHINE, 0x01 ;Joystick went off 
000053 f069                      	BREQ state_0 ; 
000054 3052                      	CPI STATE_MACHINE, 0x02 ;Joystick went off 
000055 f059                      	BREQ state_0 ; 	
000056 3053                      	CPI STATE_MACHINE, 0x03 ;Joystick went off - on - off 
000057 f089                      	BREQ State_1 ; game display
000058 3054                      	CPI STATE_MACHINE, 0x04 ;Joystick went off - on - off 
000059 f079                      	BREQ State_1 ; game display
00005a 3055                      	CPI STATE_MACHINE, 0x05 ;Joystick went off - on - off - on - off
00005b f0b9                      	BREQ State_2 ; game over display
00005c 3056                      	CPI STATE_MACHINE, 0x06 ;Joystick went off - on - off - on - off
00005d f0a9                      	BREQ State_2 ; game over display
00005e 3057                      	CPI STATE_MACHINE, 0x07 ;Joystick went off - on - off - on - off - on - off
00005f f0d9                      	BREQ Reset_state ; reset to start display
000060 9508                      	RET 	
                                 
                                 	State_0: ;START
000061 e0f5                      		LDI ZH, high(CharTable1<<1) 
000062 ebe2                      		LDI ZL, low(CharTable1<<1)
                                 
000063 e000                      		LDI R16, 0x00
000064 9300 006f                 		STS TIMSK1, R16 ;timer1 interrupt disable
000066 9300 006e                 		STS TIMSK0, R16 ; timer0 interrupt disable
000068 9508                      		RET
                                 	State_1: ;GAME PLAY
000069 e001                      		LDI R16, 0x01
00006a 9300 006f                 		STS TIMSK1, R16 ;timer1 interrupt enable
00006c 9300 006e                 		STS TIMSK0, R16 ; timer0 interrupt enable
                                 
00006e 940e 0080                 		CALL CHECK_STATE
                                 		;CALL BULLET_DELAY
                                 
000070 e0f1                      		LDI ZH,0x01
000071 e0e0                      		LDI ZL,0x00
000072 9508                      		RET
                                 	State_2: ; GAME OVER
000073 e000                      		LDI R16, 0x00
000074 9300 006f                 		STS TIMSK1, R16 ;timer1 interrupt disable
000076 9300 006e                 		STS TIMSK0, R16 ; timer0 interrupt disable
000078 e0f6                      		LDI ZH, high(CharTable2<<1)
000079 e3ea                      		LDI ZL, low(CharTable2<<1)
00007a 9508                      		RET	
                                 	Reset_state:
00007b e000                      	    LDI R16, 0x00
00007c 9300 006f                 		STS TIMSK1, R16 ;timer1 interrupt disable
00007e e051                      		LDI STATE_MACHINE, 0x01
00007f 9508                      		RET			
                                 
                                 
                                 CHECK_STATE: 
000080 b129                      			 IN R18,PIND ; Copy PIND into R18
000081 d1b8                      		     RCALL CONTEXT_SWITCH ; Call context switch (RCALL takes less instruction cycles than CALL)
000082 b139                      		     IN R19,PIND ; Copy PIND into R19
000083 d1bb                      		     RCALL RESET_CONTEXT ; Call reset context 
000084 2b23                      		     OR R18,R19 ; R18 OR R19 and store the result in R18
                                 
000085 3d2b                      		     CPI R18,BTN2_PATTERN ; If button 2 is pressed
000086 f039                      			 BREQ state_plus_2
                                 
000087 372b                           		 CPI R18,BTN8_PATTERN ; If button 8 is pressed
000088 f039                      		     BREQ state_plus_8
                                 
000089 3b2b                      			 CPI R18,BTN5_PATTERN ; If button 5 is pressed
00008a f039                      		     BREQ state_plus_5
                                 
                                 
00008b 3f2f                      			 CPI R18,NOBTN_PATTERN ; If no button is pressed
00008c f039                      			 BREQ reset_key_state
00008d 9508                      			 RET
                                 
                                 			 state_plus_2:
00008e e082                      				LDI LAST_KEY, 0x02
00008f 9508                      			 RET
                                 
                                 			 state_plus_8:
000090 e084                      				LDI LAST_KEY, 0x04
000091 9508                      			 RET
                                 
                                 			 state_plus_5:
000092 e086                      				LDI LAST_KEY, 0x06
000093 9508                      			 RET
                                 
                                 			 reset_key_state:
000094 3082                      				CPI LAST_KEY,0x02 ; If button 2 is pressed
000095 f029                      				BREQ go_down
000096 3084                      				CPI LAST_KEY,0x04 ; if button 8 is pressed
000097 f039                      				BREQ go_up
000098 3086                      				CPI LAST_KEY,0x06 ; if button 5 is pressed
000099 f049                      				BREQ ship_shoot
00009a 9508                      			 RET
                                 
                                 			 go_down:
00009b e080                      				LDI LAST_KEY,0x00
00009c 940e 0153                 				CALL MOVE_DOWN
00009e 9508                      			 RET
                                 
                                 			 go_up:
00009f e080                      				LDI LAST_KEY,0x00
0000a0 940e 018e                 				CALL MOVE_UP
0000a2 9508                      			 RET
                                 
                                 			 ship_shoot:
0000a3 e080                      				LDI LAST_KEY,0x00
0000a4 940e 012a                 				CALL SHOOT
0000a6 9508                      			 RET
                                 
0000a7 e0ea                      UPDATE_BULLETSTATE: LDI ZL, 0x0A
0000a8 e0d2                      					LDI YH, 0x02
0000a9 e0b2                      					LDI XH, 0x02
                                 
0000aa e5c0                      					LDI YL, 0x50 ; Ship bullet
0000ab e9a0                      					LDI XL, 0x90 ; Boss bullet	
                                 					
                                 
0000ac e341                      				    LDI R20, 49 ; 1St upper row                   ;xxxxxxx  x  
0000ad 940e 028a                 					CALL SHIFT_Z
0000af 940e 00f4                 					CALL TRACE_BULLET
                                 
0000b1 e9a3                      					LDI XL, 0x93 ; BOSS GUN!
                                 					
0000b2 e247                      					LDI R20, 39 ; 2nd upper row                   ;xxxxxxx  x
0000b3 940e 028a                 					CALL SHIFT_Z
0000b5 940e 00f4                 					CALL TRACE_BULLET
                                 
0000b7 e9a6                      					LDI XL, 0x96 ; BOSS GUN !
0000b8 e14d                      					LDI R20, 29 ; 3rd upper row                    ;xxxxx      
0000b9 940e 028a                 					CALL SHIFT_Z
0000bb 940e 00f4                 					CALL TRACE_BULLET
                                 					
0000bd e9a9                      					LDI XL, 0x99 ; BOSS GUN !
0000be e143                      					LDI R20, 19 ; 4th upper row				     ;xxxxx 
0000bf 940e 028a                 					CALL SHIFT_Z
0000c1 940e 00f4                 					CALL TRACE_BULLET
                                 
0000c3 e9ac                      					LDI XL, 0x9C ; BOSS GUN !
0000c4 e049                      					LDI R20, 9 ; 5th upper row				      ;xxxxxxx  x
0000c5 940e 028a                 					CALL SHIFT_Z
0000c7 940e 00f4                 					CALL TRACE_BULLET
                                 
0000c9 e9af                      					LDI XL, 0x9F ; BOSS GUN !
0000ca e440                      					LDI R20, 64 ; 1St bottom row
0000cb 940e 028a                 					CALL SHIFT_Z
0000cd 940e 00f4                 					CALL TRACE_BULLET
                                 
0000cf eaa2                      					LDI XL, 0xA2 ; BOSS GUN !
0000d0 e346                      					LDI R20, 54 ; 2nd bottom row
0000d1 940e 028a                 					CALL SHIFT_Z
0000d3 940e 00f4                 					CALL TRACE_BULLET
                                 
0000d5 eaa5                      					LDI XL, 0xA5 ; BOSS GUN !
0000d6 e24c                      					LDI R20, 44 ; 3rd bottom row
0000d7 940e 028a                 					CALL SHIFT_Z
0000d9 940e 00f4                 					CALL TRACE_BULLET
                                 
0000db eaa8                      					LDI XL, 0xA8 ; BOSS GUN !
0000dc e242                      					LDI R20, 34 ; 4th bottom row
0000dd 940e 028a                 					CALL SHIFT_Z
0000df 940e 00f4                 					CALL TRACE_BULLET
                                 
0000e1 eaab                      					LDI XL, 0xAB ; BOSS GUN !
                                 
0000e2 e148                      					LDI R20, 24 ; 5th bottom row
0000e3 940e 028a                 					CALL SHIFT_Z
0000e5 940e 00f4                 					CALL TRACE_BULLET
                                 
0000e7 eaae                      					LDI XL, 0xAE ; BOSS GUN !
0000e8 e04e                      					LDI R20, 14 ; 6th bottom row
0000e9 940e 028a                 					CALL SHIFT_Z
0000eb 940e 00f4                 					CALL TRACE_BULLET
                                 
0000ed eba1                      					LDI XL, 0xB1 ; BOSS GUN !
0000ee e044                      					LDI R20, 4 ; 7th bottom row
0000ef 940e 028a                 					CALL SHIFT_Z
0000f1 940e 00f4                 					CALL TRACE_BULLET
                                 							 
                                 			
0000f3 9508                      			finish_update: RET
                                 
0000f4 8108                      TRACE_BULLET: LD R16, Y
0000f5 911c                      			LD R17, X
                                 			; ---- check if bullets are met ----
0000f6 3000                      			CPI R16, 0x00
0000f7 f021                      			BREQ continue
0000f8 2f40                      			MOV dummyReg, R16 
0000f9 1b41                      			SUB dummyReg, R17
0000fa 3040                      			CPI dummyReg, 0x00
0000fb f151                      			BREQ bullets_collapse
                                 			; --- continue ----
0000fc 2f20                      			continue: MOV R18, R16
0000fd 2b21                      			OR R18, R17
0000fe 9322                      			ST -Z, R18
                                 
0000ff 0f11                      			LSL R17 ; shift boss bullet to the left
000100 931d                      			ST X+, R17
000101 9488                      			CLC
000102 9506                      			LSR R16 ; shift ship bullet to the right
000103 9309                      			ST Y+, R16
                                 
000104 f410                      			BRCC next ; if carry is set write to the next byte 
000105 e800                      			LDI R16, 0x80
000106 8308                      			ST Y, R16
                                 
                                 			; next byte
000107 8108                      			next: LD R16, Y
000108 911c                      				  LD R17, X
000109 2f20                      				  MOV R18, R16
00010a 2b01                      				  OR R16, R17
00010b 9302                      				  ST -Z, R16
                                 
00010c 9526                      				  LSR R18
00010d 9329                      				  ST Y+, R18
00010e f410                      				  BRCC next2
00010f e800                      				  LDI R16, 0x80
000110 8308                      				  ST Y, R16
                                 					; move the boss bultt to the next byte if carry is set
000111 0f11                      				  next2:  LSL R17
000112 931c                      						  ST X, R17
000113 f418                      						  BRCC next3
000114 e011                      						  LDI R17, 0x01
000115 931e                      						  ST -X, R17
000116 95a3                      						  INC XL
                                 
                                 					; last byte
000117 95a3                      			  next3: INC XL		 
000118 8108                      					 LD R16, Y
000119 911c                      					 LD R17, X
00011a 2f20                      					 MOV R18, R16
00011b 2b01                      					 OR R16, R17
00011c 9302                      					 ST -Z, R16
                                 
00011d 9526                      					 LSR R18
00011e 9329                      					 ST Y+, R18
00011f 9488                      					 CLC
000120 0f11                      					 LSL R17
000121 931c                      					 ST X, R17
000122 f410                      					 BRCC finish_trace ; problem here regarding X
000123 e011                      					 LDI R17, 0x01
000124 931e                      					 ST -X, R17	 ; move the boss bultt to the next byte if carry is set
                                 							
                                 							
                                 
000125 9508                      				finish_trace: RET
                                 				; -- if bullets collapse => reset ---
000126 e000                      				bullets_collapse: LDI R16, 0x00
000127 8308                      								  ST Y, R16
000128 930c                      								  ST X, R16
000129 9508                      								  RET
                                 										 
                                 										 		
                                 
00012a e0ea                      SHOOT: LDI ZL, 0x0A
00012b e5c0                      	   LDI YL, 0x50
                                 
00012c a901                      	   LDD R16, Z+49
00012d d01b                      	   RCALL SHIP_FIRE
                                 
00012e a107                      	   LDD R16, Z+39
00012f d019                      	   RCALL SHIP_FIRE
                                 
000130 8d05                      	   LDD R16, Z+29
000131 d017                      	   RCALL SHIP_FIRE
                                 
000132 8903                      	   LDD R16, Z+19
000133 d015                      	   RCALL SHIP_FIRE
                                 
000134 8501                      	   LDD R16, Z+9
000135 d013                      	   RCALL SHIP_FIRE
                                 
                                 	   
000136 e440                      	   LDI R20, 64 ; 1St bottom row
000137 940e 028a                 	   CALL SHIFT_Z
000139 8100                      	   LD R16, Z
00013a d00e                      	   RCALL SHIP_FIRE
00013b e0ea                      	   LDI ZL, 0x0A
                                 
00013c a906                      	   LDD R16, Z+54
00013d d00b                      	   RCALL SHIP_FIRE
                                 
00013e a504                      	   LDD R16, Z+44
00013f d009                      	   RCALL SHIP_FIRE
                                 
000140 a102                      	   LDD R16, Z+34
000141 d007                      	   RCALL SHIP_FIRE
                                 
000142 8d00                      	   LDD R16, Z+24
000143 d005                      	   RCALL SHIP_FIRE
                                 	   
000144 8506                      	   LDD R16, Z+14
000145 d003                      	   RCALL SHIP_FIRE
                                 
000146 8104                      	   LDD R16, Z+4
000147 d001                      	   RCALL SHIP_FIRE
                                 
000148 9508                      	   finish_shooting: RET
                                 
000149 310f                      SHIP_FIRE: CPI R16, ShipGun
00014a f421                      		   BRNE DONT_FIRE
00014b 8108                      		   LD R16, Y
00014c e810                      		  LDI R17, 0x80
00014d 2b01                      		   OR R16, R17
00014e 8308                      		   ST Y, R16
00014f 95c3                      		   DONT_FIRE: INC YL
000150 95c3                      					   INC YL
000151 95c3                      					  INC YL
000152 9508                      					  RET
                                 MOVE_DOWN:
                                 
000153 e0f1                      	LDI ZH, 0x01
                                 
000154 e0ee                      	LDI ZL, 0x0E ;ROW 1, lower block
000155 8130                      	LD PAT_COL1, Z
                                 	
000156 e1e8                      	LDI ZL, 0x18 ;ROW 2, lower block
000157 8140                      	LD DummyReg, Z
000158 e0ee                      	LDI ZL, 0x0E
000159 8340                      	ST Z, DummyReg
                                 
00015a e2e2                      	LDI ZL, 0x22 ;ROW 3, lower block
00015b 8140                      	LD DummyReg, Z
00015c e1e8                      	LDI ZL, 0x18
00015d 8340                      	ST Z, DummyReg
                                 
00015e e2ec                      	LDI ZL, 0x2C ;ROW 4, lower block
00015f 8140                      	LD DummyReg, Z
000160 e2e2                      	LDI ZL, 0x22
000161 8340                      	ST Z, DummyReg
                                 
000162 e3e6                      	LDI ZL, 0x36 ;ROW 5, lower block
000163 8140                      	LD DummyReg, Z
000164 e2ec                      	LDI ZL, 0x2C
000165 8340                      	ST Z, DummyReg
                                 
000166 e4e0                      	LDI ZL, 0x40 ;ROW 6, lower block
000167 8140                      	LD DummyReg, Z
000168 e3e6                      	LDI ZL, 0x36
000169 8340                      	ST Z, DummyReg
                                 
00016a e4ea                      	LDI ZL, 0x4A ;ROW 7, lower block
00016b 8140                      	LD DummyReg, Z
00016c e4e0                      	LDI ZL, 0x40
00016d 8340                      	ST Z, DummyReg
                                 
00016e e1e3                      	LDI ZL, 0x13 ;ROW 1, upper block
00016f 8140                      	LD DummyReg, Z
000170 e4ea                      	LDI ZL, 0x4A
000171 8340                      	ST Z, DummyReg
                                 
000172 e1ed                      	LDI ZL, 0x1D ;ROW 2, upper block
000173 8140                      	LD DummyReg, Z
000174 e1e3                      	LDI ZL, 0x13
000175 8340                      	ST Z, DummyReg
                                 
000176 e2e7                      	LDI ZL, 0x27 ;ROW 3, upper block
000177 8140                      	LD DummyReg, Z
000178 e1ed                      	LDI ZL, 0x1D
000179 8340                      	ST Z, DummyReg
                                 
00017a e3e1                      	LDI ZL, 0x31 ;ROW 4, upper block
00017b 8140                      	LD DummyReg, Z
00017c e2e7                      	LDI ZL, 0x27
00017d 8340                      	ST Z, DummyReg
                                 
00017e e3eb                      	LDI ZL, 0x3B ;ROW 5, upper block
00017f 8140                      	LD DummyReg, Z
000180 e3e1                      	LDI ZL, 0x31
000181 8340                      	ST Z, DummyReg
                                 
000182 e4e5                      	LDI ZL, 0x45 ;ROW 6, upper block
000183 8140                      	LD DummyReg, Z
000184 e3eb                      	LDI ZL, 0x3B
000185 8340                      	ST Z, DummyReg
                                 
000186 e4ef                      	LDI ZL, 0x4F ;ROW 7, upper block
000187 8140                      	LD DummyReg, Z
000188 e4e5                      	LDI ZL, 0x45
000189 8340                      	ST Z, DummyReg
                                 
00018a e4ef                      	LDI ZL, 0x4F ;ROW 7, upper block
00018b 8330                      	ST Z, PAT_COL1
                                 
                                 	;Restoring Z
00018c e0e0                      	LDI ZL, 0x00
                                 
00018d 9508                      RET
                                 
                                 MOVE_UP:
                                 
00018e e0f1                      	LDI ZH, 0x01
                                 
00018f e4ef                      	LDI ZL, 0x4F ;ROW 7, upper block
000190 8130                      	LD PAT_COL1, Z
                                 	
000191 e4e5                      	LDI ZL, 0x45 ;ROW 6, upper block
000192 8140                      	LD DummyReg, Z
000193 e4ef                      	LDI ZL, 0x4F
000194 8340                      	ST Z, DummyReg
                                 
000195 e3eb                      	LDI ZL, 0x3B ;ROW 5, upper block
000196 8140                      	LD DummyReg, Z
000197 e4e5                      	LDI ZL, 0x45
000198 8340                      	ST Z, DummyReg
                                 
000199 e3e1                      	LDI ZL, 0x31 ;ROW 4, upper block
00019a 8140                      	LD DummyReg, Z
00019b e3eb                      	LDI ZL, 0x3B
00019c 8340                      	ST Z, DummyReg
                                 
00019d e2e7                      	LDI ZL, 0x27 ;ROW 3, upper block
00019e 8140                      	LD DummyReg, Z
00019f e3e1                      	LDI ZL, 0x31
0001a0 8340                      	ST Z, DummyReg
                                 
0001a1 e1ed                      	LDI ZL, 0x1D ;ROW 2, upper block
0001a2 8140                      	LD DummyReg, Z
0001a3 e2e7                      	LDI ZL, 0x27
0001a4 8340                      	ST Z, DummyReg
                                 
0001a5 e1e3                      	LDI ZL, 0x13 ;ROW 1, upper block
0001a6 8140                      	LD DummyReg, Z
0001a7 e1ed                      	LDI ZL, 0x1D
0001a8 8340                      	ST Z, DummyReg
                                 
0001a9 e4ea                      	LDI ZL, 0x4A ;ROW 7, lower block
0001aa 8140                      	LD DummyReg, Z
0001ab e1e3                      	LDI ZL, 0x13
0001ac 8340                      	ST Z, DummyReg
                                 
0001ad e4e0                      	LDI ZL, 0x40 ;ROW 6, lower block
0001ae 8140                      	LD DummyReg, Z
0001af e4ea                      	LDI ZL, 0x4A
0001b0 8340                      	ST Z, DummyReg
                                 
0001b1 e3e6                      	LDI ZL, 0x36 ;ROW 5, lower block
0001b2 8140                      	LD DummyReg, Z
0001b3 e4e0                      	LDI ZL, 0x40
0001b4 8340                      	ST Z, DummyReg
                                 
0001b5 e2ec                      	LDI ZL, 0x2C ;ROW 4, lower block
0001b6 8140                      	LD DummyReg, Z
0001b7 e3e6                      	LDI ZL, 0x36
0001b8 8340                      	ST Z, DummyReg
                                 
0001b9 e2e2                      	LDI ZL, 0x22 ;ROW 3, lower block
0001ba 8140                      	LD DummyReg, Z
0001bb e2ec                      	LDI ZL, 0x2C
0001bc 8340                      	ST Z, DummyReg
                                 
0001bd e1e8                      	LDI ZL, 0x18 ;ROW 2, lower block
0001be 8140                      	LD DummyReg, Z
0001bf e2e2                      	LDI ZL, 0x22
0001c0 8340                      	ST Z, DummyReg
                                 
0001c1 e0ee                      	LDI ZL, 0x0E ;ROW 1, lower block
0001c2 8140                      	LD DummyReg, Z
0001c3 e1e8                      	LDI ZL, 0x18
0001c4 8340                      	ST Z, DummyReg
                                 
0001c5 e0ee                      	LDI ZL, 0x0E ;ROW 1, lower block
0001c6 8330                      	ST Z, PAT_COL1
                                 
                                 	;Restoring Z
0001c7 e0e0                      	LDI ZL, 0x00
                                 
0001c8 9508                      RET
                                 
                                 
                                 
                                 
                                 
                                 load_game_play_start:
0001c9 e0e0                      	LDI ZL, 0x00
0001ca e0f1                      	LDI ZH, 0x01
                                 	;oth ROW (Not displayed - dummy)
0001cb ef09                      	LDI R16, MonsterNotGunPat
0001cc 9300 0212                 	STS 0x212, R16
0001ce e10f                      	LDI R16, 0b00011111
0001cf 9300 0213                 	STS 0x213, R16
0001d1 e100                      	LDI R16, ShipEnd
0001d2 9300 0214                 	STS 0x214, R16
0001d4 940e 0226                 	CALL InitScreenState
                                 
                                 	;1st ROW
0001d6 e10f                      	LDI R16, 0b00011111
0001d7 9300 0212                 	STS 0x212, R16
0001d9 ef09                      	LDI R16, MonsterGunPat
0001da 9300 0213                 	STS 0x213, R16
0001dc e000                      	LDI R16, 0b00000000
0001dd 9300 0214                 	STS 0x214, R16
0001df 940e 0226                 	CALL InitScreenState 
                                 
                                 	;2nd ROW
0001e1 e10f                      	LDI R16, 0b00011111
0001e2 9300 0212                 	STS 0x212, R16
0001e4 e10f                      	LDI R16, 0b00011111
0001e5 9300 0213                 	STS 0x213, R16
0001e7 e000                      	LDI R16, 0b00000000
0001e8 9300 0214                 	STS 0x214, R16
0001ea 940e 0226                 	CALL InitScreenState
                                 
                                 	;3rd ROW
0001ec ef09                      	LDI R16, MonsterNotGunPat
0001ed 9300 0212                 	STS 0x212, R16
0001ef e10f                      	LDI R16, 0b00011111
0001f0 9300 0213                 	STS 0x213, R16
0001f2 e100                      	LDI R16, ShipEnd
0001f3 9300 0214                 	STS 0x214, R16
0001f5 940e 0226                 	CALL InitScreenState
                                 
                                 	;4th ROW
0001f7 ef09                      	LDI R16, MonsterGunPat
0001f8 9300 0212                 	STS 0x212, R16
0001fa ef09                      	LDI R16, MonsterNotGunPat
0001fb 9300 0213                 	STS 0x213, R16
0001fd e30e                      	LDI R16, ShipMiddle
0001fe 9300 0214                 	STS 0x214, R16
000200 940e 0226                 	CALL InitScreenState
                                 
                                 	;5th ROW
000202 e10f                      	LDI R16, 0b00011111
000203 9300 0212                 	STS 0x212, R16
000205 ef09                      	LDI R16, MonsterGunPat
000206 9300 0213                 	STS 0x213, R16
000208 e10f                      	LDI R16, ShipGun
000209 9300 0214                 	STS 0x214, R16
00020b 940e 0226                 	CALL InitScreenState
                                 
                                 	;6th ROW
                                 	SECOND_ROW: 
00020d e10f                      	LDI R16, 0b00011111
00020e 9300 0212                 	STS 0x212, R16
000210 e10f                      	LDI R16, 0b00011111
000211 9300 0213                 	STS 0x213, R16
000213 e30e                      	LDI R16, ShipMiddle
000214 9300 0214                 	STS 0x214, R16
000216 940e 0226                 	CALL InitScreenState
                                 
                                 	; 7th ROW
000218 ef09                      	LDI R16, MonsterNotGunPat
000219 9300 0212                 	STS 0x212, R16
00021b e10f                      	LDI R16, 0b00011111
00021c 9300 0213                 	STS 0x213, R16
00021e e100                      	LDI R16, ShipEnd
00021f 9300 0214                 	STS 0x214, R16
000221 940e 0226                 	CALL InitScreenState
                                  
000223 e0e0                      	LDI ZL, 0x00 ; Reset
000224 e0f1                      	LDI ZH, 0x01
                                 
000225 9508                      RET
                                 
                                 InitScreenState: 
000226 9120 0212                 	LDS R18,  0x212
000228 9321                      	ST Z+, R18
                                 
000229 e020                      	LDI R18, 0x00
00022a e014                      	LDI R17, 4
                                 
                                 	LOOP_BUFF: 
00022b 9321                      		ST Z+, R18
00022c 951a                      		DEC R17
00022d f7e9                      	BRNE LOOP_BUFF
00022e 9120 0213                 	LDS R18, 0x213
000230 9321                      	ST Z+, R18
000231 e020                      	LDI R18, 0x00
000232 e013                      	LDI R17, 3
                                 	LOOP_BUFF1_: 
000233 9321                      		ST Z+, R18
000234 951a                      		DEC R17
000235 f7e9                      	BRNE LOOP_BUFF1_
000236 9120 0214                 	LDS R18, 0x214
000238 9321                      	ST Z+, R18
000239 9508                      RET ; Return to caller
                                 
                                 ;keyboard part
00023a ef00                      CONTEXT_SWITCH: LDI R16, 0xF0  ; Copy 0b1111 0000 to R16
00023b e01f                      			    LDI R17, 0x0F  ; Copy 0b0000 1111 to R17
                                 
                                 
                                 
00023c b90b                      			    OUT PORTD, R16 ; Set PORTD to R16
00023d b91a                      	            OUT DDRD, R17  ; Set DDRD to R17  	
00023e 9508                      			    RET ; Return to caller
                                 ;keyboard part
00023f e00f                      RESET_CONTEXT: LDI R16, 0x0F ; keyboard set
000240 ef10                      			   LDI R17, 0xF0
                                 
000241 b90b                      			   OUT PORTD, R16
000242 b91a                      		       OUT DDRD, R17
000243 9508                      			   RET ; Return to caller
                                 
                                 
                                 ;Funtion to shift column data on for a pattern
                                 execute_col_loop:
000244 3053                      	CPI STATE_MACHINE, 0x03 ;Joystick went off - on - off 
000245 f111                      	BREQ screenbuff_display ; game display
000246 3054                      	CPI STATE_MACHINE, 0x04 ;Joystick went off - on - off 
000247 f101                      	BREQ screenbuff_display ; game display
                                 	;CPI STATE_MACHINE, 0x05 ;Joystick went off - on - off 
                                 	;BREQ screenbuff_display ; game display
                                 	;CPI STATE_MACHINE, 0x06 ;Joystick went off - on - off 
                                 	;BREQ screenbuff_display ; game display
                                 	
                                 	;else display charbuffer:
                                 	charcuffer_display:
                                 		;increment Z till RowIndex for a character is reached
000248 2f17                      		MOV Local_index1, RowIndex
                                 		Loop_Z:
000249 9135                      			LPM PAT_COL1, Z+
00024a 951a                      			DEC Local_index1
00024b f7e9                      		BRNE Loop_Z
                                 
00024c e120                      	 	LDI Local_index2, 16  ;index to shift screen 16 times for every screen block
                                 		Col_loop2:		
                                 			;shift 5bit Column pattern into Shift Reg
00024d e015                      			LDI Local_index1, 5	
                                 			Col_loop3: 
00024e 982b                      				CBI PORTB,3 ;pixel_off
00024f fd30                      				SBRC PAT_COL1, 0 ;pixel turned off if pattern's LSB is 0
000250 9a2b                      				SBI PORTB,3	;pixel on
000251 982d                      				CBI PORTB, 5 ;falling edge of shift-reg clock
000252 9a2d                      				SBI PORTB, 5 ;rising edge of clk
000253 9536                      				LSR PAT_COL1 ; right shifting pattern for next bit
000254 951a                      				DEC Local_index1
000255 f7c1                      			BRNE Col_loop3
                                 
                                 			;Increment Z pointer by 8 to point to same row in next character
000256 e018                      			LDI Local_index1,8
                                 			Loop_Z2:
000257 9135                      				LPM PAT_COL1,Z+
000258 951a                      				DEC Local_index1
000259 f7e9                      			BRNE Loop_Z2
00025a 952a                      			DEC Local_index2
00025b f789                      		BRNE col_loop2
                                 
                                 		;Restoring Z pointer address before next row access
                                 
00025c e120                      		LDI Local_index2, 16  ;index to shift screen 16 times for every screen block
                                 		rev_loop1:
                                 			;Decrement Z pointer by 8 to point to same row in next character
00025d e018                      			LDI Local_index1,8
                                 			rev_loop2:
00025e 9132                      				LD PAT_COL1, -Z
00025f 951a                      				DEC Local_index1
000260 f7e9                      			BRNE rev_loop2
000261 952a                      			DEC Local_index2
000262 f7d1                      		BRNE rev_loop1
                                 	
                                 		;increment Z till RowIndex for a character is reached
000263 2f17                      		MOV Local_index1, RowIndex
                                 		rev_loop3:
000264 9132                      			LD PAT_COL1, -Z
000265 951a                      			DEC Local_index1
000266 f7e9                      		BRNE rev_loop3
000267 9508                      	RET
                                 
                                 	screenbuff_display:
000268 e02a                      		LDI Local_index2, 10  ;index to shift screen 80 times for every screen block
                                 		Col_loop4:
                                 			;shift 5bit Column pattern into Shift Reg
000269 8130                      			LD PAT_COL1, Z
00026a e018                      			LDI Local_index1, 8	
                                 			Col_loop5: 
00026b 982b                      				CBI PORTB,3 ;pixel_off
00026c fd30                      				SBRC PAT_COL1, 0 ;pixel turned off if pattern's LSB is 0
00026d 9a2b                      				SBI PORTB,3	;pixel on
00026e 982d                      				CBI PORTB, 5 ;falling edge of shift-reg clock
00026f 9a2d                      				SBI PORTB, 5 ;rising edge of clk
000270 9536                      				LSR PAT_COL1 ; right shifting pattern for next bit
000271 951a                      				DEC Local_index1
000272 f7c1                      			BRNE Col_loop5
000273 9131                      			LD PAT_COL1, Z+	
000274 952a                      			DEC Local_index2
000275 f799                      		BRNE Col_loop4
000276 9508                      	RET
                                 
                                 ;function to shift row data for a pattern
                                 execute_row_loop:
000277 e018                      	LDI Local_index1, 0x08 
000278 9488                      	CLC
                                 	LoopRow:
000279 982b                      		CBI PORTB, 3 
00027a 1717                      		CP Local_index1,RowIndex
00027b f409                      		BRNE Row_not_on
00027c 9a2b                      		SBI PORTB, 3 
                                 		Row_not_on: 
00027d 982d                      			CBI PORTB, 5 
00027e 9a2d                      			SBI PORTB, 5
00027f 951a                      		DEC Local_index1 
000280 f7c1                      	BRNE LoopRow
000281 9508                      RET
                                 
                                 ;function to latch shift register data to output
                                 latch_shift_reg:
000282 982c                      	CBI PORTB, 4
000283 9a2c                      	SBI PORTB, 4 
000284 ef1f                      	LDI Local_index1, 255 ;index for delay loop
                                 	delay_loop:
000285 0000                      		NOP
000286 951a                      		DEC Local_index1
000287 f7e9                      	BRNE delay_loop
000288 982c                      	CBI PORTB, 4
000289 9508                      RET
                                 
00028a e0ea                      SHIFT_Z: LDI ZL, 0x0A
00028b e0f1                      		   LDI ZH, 0x01
00028c 95e3                      		    INC_LOOP: INC ZL
00028d 954a                      					DEC R20
00028e f7e9                      					BRNE INC_LOOP
                                 			
00028f 9508                      		    RET
                                 
000290 e011                      BULLET_DELAY: LDI Local_index1, 1
000291 0000                      	BLOOP:  NOP
000292 efcf                      	LDI R28, 0xFF
000293 0000                      		BNESTED: NOP
000294 95ca                      				DEC R28
000295 f7e9                      				BRNE BNESTED
000296 951a                      	DEC Local_index1
000297 f7c9                      	BRNE BLOOP
000298 9508                      	RET
                                 
000299 e518                      DISPLAY_INTERMEDIATE_STATE: LDI R17, 88
00029a 982b                      				   CBI PORTB, 3
00029b 982d                      				   SEND_DATA: CBI PORTB, 5
00029c 9a2d                      							  SBI PORTB, 5
00029d 951a                      							  DEC R17
00029e f7e1                      							  BRNE SEND_DATA
00029f 982c                      					CBI PORTB, 4
0002a0 9a2c                      					SBI PORTB, 4
0002a1 982c                      					CBI PORTB, 4
                                 					
                                 				  
0002a2 9508                      					RET
                                 
0002a3 ef0f                      TimerInterrupt: LDI R16, 0xFF
0002a4 ea1f                      				LDI R17, 0XAF
0002a5 9300 0084                 				STS TCNT1L,R16
0002a7 9310 0085                 				STS TCNT1H,R17
                                 				
0002a9 e0b2                      				LDI XH, 0x02
                                 
                                 				
0002aa 3096                      				CPI BOSS_SHIPCOUNTER, 6
0002ab f061                      				BREQ PAT1
0002ac 3095                      				CPI BOSS_SHIPCOUNTER, 5
0002ad f061                      				BREQ PAT2
0002ae 3094                      				CPI BOSS_SHIPCOUNTER, 4
0002af f061                      				BREQ PAT3
0002b0 3093                      				CPI BOSS_SHIPCOUNTER, 3
0002b1 f061                      				BREQ PAT4
0002b2 3092                      				CPI BOSS_SHIPCOUNTER, 2
0002b3 f061                      				BREQ PAT5
0002b4 3091                      				CPI BOSS_SHIPCOUNTER, 1
0002b5 f061                      				BREQ PAT6
                                 
0002b6 e096                      				LDI BOSS_SHIPCOUNTER, 6 ; reset
0002b7 9518                      				RETI
                                 
0002b8 e9a2                      				PAT1: LDI XL, 0x92
0002b9 c009                      					  RJMP boss_fire
0002ba e9a5                      				PAT2: LDI XL, 0x95
0002bb c007                      					  RJMP boss_fire
0002bc e9ae                      				PAT3: LDI XL, 0x9E
0002bd c005                      					  RJMP boss_fire
0002be eaa1                      				PAT4: LDI XL, 0xA1
0002bf c003                      					  RJMP boss_fire
0002c0 eaaa                      				PAT5: LDI XL, 0xAA
0002c1 c001                      					  RJMP boss_fire
0002c2 eaad                      				PAT6: LDI XL, 0xAD
                                 
0002c3 910c                      				boss_fire: LD R16, X
0002c4 e011                      				LDI R17, 0x01
0002c5 2b01                      				OR R16, R17
0002c6 930c                      				ST X, R16
0002c7 959a                      				DEC BOSS_SHIPCOUNTER
0002c8 9518                      				RETI
                                 
0002c9 e011                      Timer0interrupt: LDI R17, 1
0002ca bd16                      				 OUT TCNT0,R17
0002cb 940e 0299                 				 CALL DISPLAY_INTERMEDIATE_STATE
0002cd 940e 00a7                 				 CALL UPDATE_BULLETSTATE
0002cf e0e0                      				 LDI ZL, 0x00
0002d0 940e 0048                 				 CALL display
                                 				 ;CBI PORTC, 2
0002d2 9518                      				 RETI
                                 
                                 JoystickInterrupt: ;CBI PORTC, 2
0002d3 ff60                      				   SBRS LAST_JOY, 0 ;skip state change if previous JS state was same as on
0002d4 9553                      				   INC STATE_MACHINE
0002d5 e061                      				   LDI LAST_JOY,0x01
0002d6 e000                      				   LDI R16, 0x00
0002d7 bb0b                      				   OUT PCIFR, R16 ; reset
0002d8 9518                      				   RETI
                                 
                                 ;character memory table
                                 ;Stores >START!
                                 ;		  ----
                                 CharTable1:
0002d9 0000
0002da 0000
0002db 0000
0002dc 0000                      .DB 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000 ;Nothing
0002dd 0000
0002de 0000
0002df 0000
0002e0 0000                      .DB 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000 ;Nothing
0002e1 0000
0002e2 1f00
0002e3 0000
0002e4 0000                      .DB 0b00000, 0b00000, 0b00000, 0b11111, 0b00000, 0b00000, 0b00000, 0b00000 ;line
0002e5 0000
0002e6 1f00
0002e7 0000
0002e8 0000                      .DB 0b00000, 0b00000, 0b00000, 0b11111, 0b00000, 0b00000, 0b00000, 0b00000 ;line
0002e9 0000
0002ea 1f00
0002eb 0000
0002ec 0000                      .DB 0b00000, 0b00000, 0b00000, 0b11111, 0b00000, 0b00000, 0b00000, 0b00000 ;line
0002ed 0000
0002ee 1f00
0002ef 0000
0002f0 0000                      .DB 0b00000, 0b00000, 0b00000, 0b11111, 0b00000, 0b00000, 0b00000, 0b00000 ;line
0002f1 0000
0002f2 0000
0002f3 0000
0002f4 0000                      .DB 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000 ;Nothing
0002f5 0000
0002f6 0000
0002f7 0000
0002f8 0000                      .DB 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000 ;Nothing
0002f9 0000
0002fa 0000
0002fb 0000
0002fc 0000                      .DB 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000 ;Nothing
0002fd 0404
0002fe 0404
0002ff 0004
000300 0004                      .DB 0b00100, 0b00100, 0b00100, 0b00100, 0b00100, 0b00000, 0b00100, 0b00000 ;exclamation
000301 040e
000302 0404
000303 0404
000304 0004                      .DB 0b01110, 0b00100, 0b00100, 0b00100, 0b00100, 0b00100, 0b00100, 0b00000 ;T
000305 090e
000306 0e09
000307 0a0c
000308 0009                      .DB 0b01110, 0b01001, 0b01001, 0b01110, 0b01100, 0b01010, 0b01001, 0b00000 ;R
000309 0906
00030a 0f09
00030b 0909
00030c 0009                      .DB 0b00110, 0b01001, 0b01001, 0b01111, 0b01001, 0b01001, 0b01001, 0b00000 ;A
00030d 040e
00030e 0404
00030f 0404
000310 0004                      .DB 0b01110, 0b00100, 0b00100, 0b00100, 0b00100, 0b00100, 0b00100, 0b00000 ;T
000311 0807
000312 0608
000313 0101
000314 000e                      .DB 0b00111, 0b01000, 0b01000, 0b00110, 0b00001, 0b00001, 0b01110, 0b00000 ;S
000315 0400
000316 0102
000317 0402
000318 0000                      .DB 0b00000, 0b00100, 0b00010, 0b00001, 0b00010, 0b00100, 0b00000, 0b00000 ;small arrow
000319 0000
00031a 0000
00031b 0000
00031c 0000                      .DB 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000 ;Nothing
                                 
                                 CharTable2:
00031d 090e
00031e 0e09
00031f 0a0c
000320 0009                      .DB 0b01110, 0b01001, 0b01001, 0b01110, 0b01100, 0b01010, 0b01001, 0b00000 ;R
000321 080f
000322 0f08
000323 0808
000324 000f                      .DB 0b01111, 0b01000, 0b01000, 0b01111, 0b01000, 0b01000, 0b01111, 0b00000 ;E
000325 1111
000326 1111
000327 0a11
000328 0004                      .DB 0b10001, 0b10001, 0b10001, 0b10001, 0b10001, 0b01010, 0b00100, 0b00000 ;V
000329 0906
00032a 0909
00032b 0909
00032c 0006                      .DB 0b00110, 0b01001, 0b01001, 0b01001, 0b01001, 0b01001, 0b00110, 0b00000 ;0
00032d 0000
00032e 0000
00032f 0000
000330 0000                      .DB 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000 ;Nothing
000331 0400
000332 0102
000333 0402
000334 0000                      .DB 0b00000, 0b00100, 0b00010, 0b00001, 0b00010, 0b00100, 0b00000, 0b00000 ;small arrow
000335 0400
000336 0102
000337 0402
000338 0000                      .DB 0b00000, 0b00100, 0b00010, 0b00001, 0b00010, 0b00100, 0b00000, 0b00000 ;small arrow
000339 0000
00033a 0000
00033b 0000
00033c 0000                      .DB 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000 ;Nothing
00033d 0000
00033e 0000
00033f 0000
000340 0000                      .DB 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000 ;Nothing
000341 0400
000342 0102
000343 0402
000344 0000                      .DB 0b00000, 0b00100, 0b00010, 0b00001, 0b00010, 0b00100, 0b00000, 0b00000 ;small arrow
000345 0400
000346 0102
000347 0402
000348 0000                      .DB 0b00000, 0b00100, 0b00010, 0b00001, 0b00010, 0b00100, 0b00000, 0b00000 ;small arrow
000349 0000
00034a 0000
00034b 0000
00034c 0000                      .DB 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000 ;Nothing
00034d 080f
00034e 0f08
00034f 0808
000350 000f                      .DB 0b01111, 0b01000, 0b01000, 0b01111, 0b01000, 0b01000, 0b01111, 0b00000 ;E
000351 1b11
000352 1115
000353 1111
000354 0011                      .DB 0b10001, 0b11011, 0b10101, 0b10001, 0b10001, 0b10001, 0b10001, 0b00000 ;M
000355 0906
000356 0f09
000357 0909
000358 0009                      .DB 0b00110, 0b01001, 0b01001, 0b01111, 0b01001, 0b01001, 0b01001, 0b00000 ;A
000359 0906
00035a 0b08
00035b 0909
00035c 0006                      .DB 0b00110, 0b01001, 0b01000, 0b01011, 0b01001, 0b01001, 0b00110, 0b00000 ;G
                                 
                                 CharTable3:
00035d 0400
00035e 0102
00035f 0402
000360 0000                      .DB 0b00000, 0b00100, 0b00010, 0b00001, 0b00010, 0b00100, 0b00000, 0b00000 ;small arrow
000361 0400
000362 0102
000363 0402
000364 0000                      .DB 0b00000, 0b00100, 0b00010, 0b00001, 0b00010, 0b00100, 0b00000, 0b00000 ;small arrow
000365 080f
000366 0f08
000367 0808
000368 000f                      .DB 0b01111, 0b01000, 0b01000, 0b01111, 0b01000, 0b01000, 0b01111, 0b00000 ;E
000369 1b11
00036a 1115
00036b 1111
00036c 0011                      .DB 0b10001, 0b11011, 0b10101, 0b10001, 0b10001, 0b10001, 0b10001, 0b00000 ;M
00036d 0906
00036e 0f09
00036f 0909
000370 0009                      .DB 0b00110, 0b01001, 0b01001, 0b01111, 0b01001, 0b01001, 0b01001, 0b00000 ;A
000371 0906
000372 0b08
000373 0909
000374 0006                      .DB 0b00110, 0b01001, 0b01000, 0b01011, 0b01001, 0b01001, 0b00110, 0b00000 ;G
000375 0400
000376 0102
000377 0402
000378 0000                      .DB 0b00000, 0b00100, 0b00010, 0b00001, 0b00010, 0b00100, 0b00000, 0b00000 ;small arrow
000379 0400
00037a 0102
00037b 0402
00037c 0000                      .DB 0b00000, 0b00100, 0b00010, 0b00001, 0b00010, 0b00100, 0b00000, 0b00000 ;small arrow
00037d 0400
00037e 0102
00037f 0402
000380 0000                      .DB 0b00000, 0b00100, 0b00010, 0b00001, 0b00010, 0b00100, 0b00000, 0b00000 ;small arrow
000381 0400
000382 0102
000383 0402
000384 0000                      .DB 0b00000, 0b00100, 0b00010, 0b00001, 0b00010, 0b00100, 0b00000, 0b00000 ;small arrow
000385 080f
000386 0f08
000387 0808
000388 000f                      .DB 0b01111, 0b01000, 0b01000, 0b01111, 0b01000, 0b01000, 0b01111, 0b00000 ;E
000389 1b11
00038a 1115
00038b 1111
00038c 0011                      .DB 0b10001, 0b11011, 0b10101, 0b10001, 0b10001, 0b10001, 0b10001, 0b00000 ;M
00038d 0906
00038e 0f09
00038f 0909
000390 0009                      .DB 0b00110, 0b01001, 0b01001, 0b01111, 0b01001, 0b01001, 0b01001, 0b00000 ;A
000391 0906
000392 0b08
000393 0909
000394 0006                      .DB 0b00110, 0b01001, 0b01000, 0b01011, 0b01001, 0b01001, 0b00110, 0b00000 ;G
000395 0400
000396 0102
000397 0402
000398 0000                      .DB 0b00000, 0b00100, 0b00010, 0b00001, 0b00010, 0b00100, 0b00000, 0b00000 ;small arrow
000399 0400
00039a 0102
00039b 0402
00039c 0000                      .DB 0b00000, 0b00100, 0b00010, 0b00001, 0b00010, 0b00100, 0b00000, 0b00000 ;small arrow
00039d 0000
00039e 0000
00039f 0000
0003a0 0000                      .DB 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000 ;Nothing
0003a1 0000
0003a2 0000
0003a3 0000


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega328P" register use summary:
x  :  11 y  :  11 z  :  82 r0 :   0 r1 :   0 r2 :   0 r3 :   0 r4 :   0 
r5 :   0 r6 :   0 r7 :   0 r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 
r13:   0 r14:   0 r15:   0 r16: 115 r17:  58 r18:  31 r19:  16 r20:  69 
r21:  12 r22:   4 r23:   5 r24:  10 r25:   9 r26:  20 r27:   2 r28:   7 
r29:   1 r30:  70 r31:   9 
Registers used: 19 out of 35 (54.3%)

"ATmega328P" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   0 add   :   0 adiw  :   0 and   :   0 
andi  :   0 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   4 brcs  :   0 break :   0 breq  :  24 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 brlt  :   0 brmi  :   0 
brne  :  20 brpl  :   0 brsh  :   0 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :  46 cbi   :  13 cbr   :   0 
clc   :   3 clh   :   0 cli   :   0 cln   :   0 clr   :   0 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :   1 cpc   :   0 
cpi   :  25 cpse  :   0 dec   :  19 eor   :   0 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :   0 ijmp  :   0 in    :   2 inc   :   7 jmp   :   0 
ld    :  41 ldd   :  11 ldi   : 194 lds   :   3 lpm   :   2 lsl   :   3 
lsr   :   5 mov   :   6 movw  :   0 mul   :   0 muls  :   0 mulsu :   0 
neg   :   0 nop   :   3 or    :   6 ori   :   0 out   :   9 pop   :   0 
push  :   0 rcall :  14 ret   :  33 reti  :   4 rjmp  :  10 rol   :   0 
ror   :   0 sbc   :   0 sbci  :   0 sbi   :  16 sbic  :   0 sbis  :   0 
sbiw  :   0 sbr   :   0 sbrc  :   2 sbrs  :   1 sec   :   0 seh   :   0 
sei   :   1 sen   :   0 ser   :   0 ses   :   0 set   :   0 sev   :   0 
sez   :   0 sleep :   0 spm   :   0 st    :  50 std   :   0 sts   :  36 
sub   :   1 subi  :   0 swap  :   0 tst   :   0 wdr   :   0 
Instructions used: 33 out of 113 (29.2%)

"ATmega328P" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00074a   1400    408   1808   32768   5.5%
[.dseg] 0x000100 0x000100      0      0      0    2048   0.0%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 0 warnings
