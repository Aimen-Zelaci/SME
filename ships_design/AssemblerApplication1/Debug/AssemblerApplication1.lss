
AVRASM ver. 2.2.8  C:\Users\Slash\Documents\SME\ships_design\AssemblerApplication1\main.asm Sun Apr 24 19:35:37 2022

[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.6.364\avrasm\inc\m328Pdef.inc'
C:\Users\Slash\Documents\SME\ships_design\AssemblerApplication1\main.asm(1): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.6.364\avrasm\inc\m328pdef.inc'
[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.6.364\avrasm\inc\m328Pdef.inc'
C:\Users\Slash\Documents\SME\ships_design\AssemblerApplication1\main.asm(1): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.6.364\avrasm\inc\m328pdef.inc'
                                 
                                 .INCLUDE "m328pdef.inc"
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega328P.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m328Pdef.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega328P
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega328P
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M328PDEF_INC_
                                 #define _M328PDEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega328P
                                 #pragma AVRPART ADMIN PART_NAME ATmega328P
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x95
                                 .equ	SIGNATURE_002	= 0x0f
                                 
                                 #pragma AVRPART CORE CORE_VERSION V2E
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	UDR0	= 0xc6	; MEMORY MAPPED
                                 .equ	UBRR0L	= 0xc4	; MEMORY MAPPED
                                 .equ	UBRR0H	= 0xc5	; MEMORY MAPPED
                                 .equ	UCSR0C	= 0xc2	; MEMORY MAPPED
                                 .equ	UCSR0B	= 0xc1	; MEMORY MAPPED
                                 .equ	UCSR0A	= 0xc0	; MEMORY MAPPED
                                 .equ	TWAMR	= 0xbd	; MEMORY MAPPED
                                 .equ	TWCR	= 0xbc	; MEMORY MAPPED
                                 .equ	TWDR	= 0xbb	; MEMORY MAPPED
                                 .equ	TWAR	= 0xba	; MEMORY MAPPED
                                 .equ	TWSR	= 0xb9	; MEMORY MAPPED
                                 .equ	TWBR	= 0xb8	; MEMORY MAPPED
                                 .equ	ASSR	= 0xb6	; MEMORY MAPPED
                                 .equ	OCR2B	= 0xb4	; MEMORY MAPPED
                                 .equ	OCR2A	= 0xb3	; MEMORY MAPPED
                                 .equ	TCNT2	= 0xb2	; MEMORY MAPPED
                                 .equ	TCCR2B	= 0xb1	; MEMORY MAPPED
                                 .equ	TCCR2A	= 0xb0	; MEMORY MAPPED
                                 .equ	OCR1BL	= 0x8a	; MEMORY MAPPED
                                 .equ	OCR1BH	= 0x8b	; MEMORY MAPPED
                                 .equ	OCR1AL	= 0x88	; MEMORY MAPPED
                                 .equ	OCR1AH	= 0x89	; MEMORY MAPPED
                                 .equ	ICR1L	= 0x86	; MEMORY MAPPED
                                 .equ	ICR1H	= 0x87	; MEMORY MAPPED
                                 .equ	TCNT1L	= 0x84	; MEMORY MAPPED
                                 .equ	TCNT1H	= 0x85	; MEMORY MAPPED
                                 .equ	TCCR1C	= 0x82	; MEMORY MAPPED
                                 .equ	TCCR1B	= 0x81	; MEMORY MAPPED
                                 .equ	TCCR1A	= 0x80	; MEMORY MAPPED
                                 .equ	DIDR1	= 0x7f	; MEMORY MAPPED
                                 .equ	DIDR0	= 0x7e	; MEMORY MAPPED
                                 .equ	ADMUX	= 0x7c	; MEMORY MAPPED
                                 .equ	ADCSRB	= 0x7b	; MEMORY MAPPED
                                 .equ	ADCSRA	= 0x7a	; MEMORY MAPPED
                                 .equ	ADCH	= 0x79	; MEMORY MAPPED
                                 .equ	ADCL	= 0x78	; MEMORY MAPPED
                                 .equ	TIMSK2	= 0x70	; MEMORY MAPPED
                                 .equ	TIMSK1	= 0x6f	; MEMORY MAPPED
                                 .equ	TIMSK0	= 0x6e	; MEMORY MAPPED
                                 .equ	PCMSK1	= 0x6c	; MEMORY MAPPED
                                 .equ	PCMSK2	= 0x6d	; MEMORY MAPPED
                                 .equ	PCMSK0	= 0x6b	; MEMORY MAPPED
                                 .equ	EICRA	= 0x69	; MEMORY MAPPED
                                 .equ	PCICR	= 0x68	; MEMORY MAPPED
                                 .equ	OSCCAL	= 0x66	; MEMORY MAPPED
                                 .equ	PRR	= 0x64	; MEMORY MAPPED
                                 .equ	CLKPR	= 0x61	; MEMORY MAPPED
                                 .equ	WDTCSR	= 0x60	; MEMORY MAPPED
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	SPMCSR	= 0x37
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUSR	= 0x34
                                 .equ	SMCR	= 0x33
                                 .equ	ACSR	= 0x30
                                 .equ	SPDR	= 0x2e
                                 .equ	SPSR	= 0x2d
                                 .equ	SPCR	= 0x2c
                                 .equ	GPIOR2	= 0x2b
                                 .equ	GPIOR1	= 0x2a
                                 .equ	OCR0B	= 0x28
                                 .equ	OCR0A	= 0x27
                                 .equ	TCNT0	= 0x26
                                 .equ	TCCR0B	= 0x25
                                 .equ	TCCR0A	= 0x24
                                 .equ	GTCCR	= 0x23
                                 .equ	EEARH	= 0x22
                                 .equ	EEARL	= 0x21
                                 .equ	EEDR	= 0x20
                                 .equ	EECR	= 0x1f
                                 .equ	GPIOR0	= 0x1e
                                 .equ	EIMSK	= 0x1d
                                 .equ	EIFR	= 0x1c
                                 .equ	PCIFR	= 0x1b
                                 .equ	TIFR2	= 0x17
                                 .equ	TIFR1	= 0x16
                                 .equ	TIFR0	= 0x15
                                 .equ	PORTD	= 0x0b
                                 .equ	DDRD	= 0x0a
                                 .equ	PIND	= 0x09
                                 .equ	PORTC	= 0x08
                                 .equ	DDRC	= 0x07
                                 .equ	PINC	= 0x06
                                 .equ	PORTB	= 0x05
                                 .equ	DDRB	= 0x04
                                 .equ	PINB	= 0x03
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** USART0 ***********************
                                 ; UDR0 - USART I/O Data Register
                                 .equ	UDR0_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR0_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR0_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR0_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR0_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR0_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR0_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR0_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR0A - USART Control and Status Register A
                                 .equ	MPCM0	= 0	; Multi-processor Communication Mode
                                 .equ	U2X0	= 1	; Double the USART transmission speed
                                 .equ	UPE0	= 2	; Parity Error
                                 .equ	DOR0	= 3	; Data overRun
                                 .equ	FE0	= 4	; Framing Error
                                 .equ	UDRE0	= 5	; USART Data Register Empty
                                 .equ	TXC0	= 6	; USART Transmitt Complete
                                 .equ	RXC0	= 7	; USART Receive Complete
                                 
                                 ; UCSR0B - USART Control and Status Register B
                                 .equ	TXB80	= 0	; Transmit Data Bit 8
                                 .equ	RXB80	= 1	; Receive Data Bit 8
                                 .equ	UCSZ02	= 2	; Character Size
                                 .equ	TXEN0	= 3	; Transmitter Enable
                                 .equ	RXEN0	= 4	; Receiver Enable
                                 .equ	UDRIE0	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE0	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE0	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR0C - USART Control and Status Register C
                                 .equ	UCPOL0	= 0	; Clock Polarity
                                 .equ	UCSZ00	= 1	; Character Size
                                 .equ	UCPHA0	= UCSZ00	; For compatibility
                                 .equ	UCSZ01	= 2	; Character Size
                                 .equ	UDORD0	= UCSZ01	; For compatibility
                                 .equ	USBS0	= 3	; Stop Bit Select
                                 .equ	UPM00	= 4	; Parity Mode Bit 0
                                 .equ	UPM01	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL00	= 6	; USART Mode Select
                                 .equ	UMSEL0	= UMSEL00	; For compatibility
                                 .equ	UMSEL01	= 7	; USART Mode Select
                                 .equ	UMSEL1	= UMSEL01	; For compatibility
                                 
                                 ; UBRR0H - USART Baud Rate Register High Byte
                                 .equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR0L - USART Baud Rate Register Low Byte
                                 .equ	_UBRR0	= 0	; USART Baud Rate Register bit 0
                                 .equ	_UBRR1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** TWI **************************
                                 ; TWAMR - TWI (Slave) Address Mask Register
                                 .equ	TWAM0	= 1	; 
                                 .equ	TWAMR0	= TWAM0	; For compatibility
                                 .equ	TWAM1	= 2	; 
                                 .equ	TWAMR1	= TWAM1	; For compatibility
                                 .equ	TWAM2	= 3	; 
                                 .equ	TWAMR2	= TWAM2	; For compatibility
                                 .equ	TWAM3	= 4	; 
                                 .equ	TWAMR3	= TWAM3	; For compatibility
                                 .equ	TWAM4	= 5	; 
                                 .equ	TWAMR4	= TWAM4	; For compatibility
                                 .equ	TWAM5	= 6	; 
                                 .equ	TWAMR5	= TWAM5	; For compatibility
                                 .equ	TWAM6	= 7	; 
                                 .equ	TWAMR6	= TWAM6	; For compatibility
                                 
                                 ; TWBR - TWI Bit Rate register
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	TWPS0	= 0	; TWI Prescaler
                                 .equ	TWPS1	= 1	; TWI Prescaler
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	TWS7	= 7	; TWI Status
                                 
                                 ; TWDR - TWI Data register
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK1 - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE1	= 0	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1A	= 1	; Timer/Counter1 Output CompareA Match Interrupt Enable
                                 .equ	OCIE1B	= 2	; Timer/Counter1 Output CompareB Match Interrupt Enable
                                 .equ	ICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR1 - Timer/Counter Interrupt Flag register
                                 .equ	TOV1	= 0	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1A	= 1	; Output Compare Flag 1A
                                 .equ	OCF1B	= 2	; Output Compare Flag 1B
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode
                                 .equ	WGM11	= 1	; Waveform Generation Mode
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Comparet Ouput Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 ; TCCR1C - Timer/Counter1 Control Register C
                                 .equ	FOC1B	= 6	; 
                                 .equ	FOC1A	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 .equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TIMSK2 - Timer/Counter Interrupt Mask register
                                 .equ	TOIE2	= 0	; Timer/Counter2 Overflow Interrupt Enable
                                 .equ	TOIE2A	= TOIE2	; For compatibility
                                 .equ	OCIE2A	= 1	; Timer/Counter2 Output Compare Match A Interrupt Enable
                                 .equ	OCIE2B	= 2	; Timer/Counter2 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR2 - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 0	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2A	= 1	; Output Compare Flag 2A
                                 .equ	OCF2B	= 2	; Output Compare Flag 2B
                                 
                                 ; TCCR2A - Timer/Counter2 Control Register A
                                 .equ	WGM20	= 0	; Waveform Genration Mode
                                 .equ	WGM21	= 1	; Waveform Genration Mode
                                 .equ	COM2B0	= 4	; Compare Output Mode bit 0
                                 .equ	COM2B1	= 5	; Compare Output Mode bit 1
                                 .equ	COM2A0	= 6	; Compare Output Mode bit 1
                                 .equ	COM2A1	= 7	; Compare Output Mode bit 1
                                 
                                 ; TCCR2B - Timer/Counter2 Control Register B
                                 .equ	CS20	= 0	; Clock Select bit 0
                                 .equ	CS21	= 1	; Clock Select bit 1
                                 .equ	CS22	= 2	; Clock Select bit 2
                                 .equ	WGM22	= 3	; Waveform Generation Mode
                                 .equ	FOC2B	= 6	; Force Output Compare B
                                 .equ	FOC2A	= 7	; Force Output Compare A
                                 
                                 ; TCNT2 - Timer/Counter2
                                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                                 
                                 ; OCR2A - Timer/Counter2 Output Compare Register A
                                 .equ	OCR2A_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2A_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2A_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2A_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2A_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2A_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2A_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2A_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; OCR2B - Timer/Counter2 Output Compare Register B
                                 .equ	OCR2B_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2B_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2B_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2B_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2B_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2B_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2B_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2B_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; ASSR - Asynchronous Status Register
                                 .equ	TCR2BUB	= 0	; Timer/Counter Control Register2 Update Busy
                                 .equ	TCR2AUB	= 1	; Timer/Counter Control Register2 Update Busy
                                 .equ	OCR2BUB	= 2	; Output Compare Register 2 Update Busy
                                 .equ	OCR2AUB	= 3	; Output Compare Register2 Update Busy
                                 .equ	TCN2UB	= 4	; Timer/Counter2 Update Busy
                                 .equ	AS2	= 5	; Asynchronous Timer/Counter2
                                 .equ	EXCLK	= 6	; Enable External Clock Input
                                 
                                 ; GTCCR - General Timer Counter Control register
                                 .equ	PSRASY	= 1	; Prescaler Reset Timer/Counter2
                                 .equ	PSR2	= PSRASY	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register A
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADATE	= 5	; ADC  Auto Trigger Enable
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCSRB - The ADC Control and Status register B
                                 .equ	ADTS0	= 0	; ADC Auto Trigger Source bit 0
                                 .equ	ADTS1	= 1	; ADC Auto Trigger Source bit 1
                                 .equ	ADTS2	= 2	; ADC Auto Trigger Source bit 2
                                 .equ	ACME	= 6	; 
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 ; DIDR0 - Digital Input Disable Register
                                 .equ	ADC0D	= 0	; 
                                 .equ	ADC1D	= 1	; 
                                 .equ	ADC2D	= 2	; 
                                 .equ	ADC3D	= 3	; 
                                 .equ	ADC4D	= 4	; 
                                 .equ	ADC5D	= 5	; 
                                 
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 ; DIDR1 - Digital Input Disable Register 1
                                 .equ	AIN0D	= 0	; AIN0 Digital Input Disable
                                 .equ	AIN1D	= 1	; AIN1 Digital Input Disable
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TIMSK0 - Timer/Counter0 Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0A	= 1	; Timer/Counter0 Output Compare Match A Interrupt Enable
                                 .equ	OCIE0B	= 2	; Timer/Counter0 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR0 - Timer/Counter0 Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0A	= 1	; Timer/Counter0 Output Compare Flag 0A
                                 .equ	OCF0B	= 2	; Timer/Counter0 Output Compare Flag 0B
                                 
                                 ; TCCR0A - Timer/Counter  Control Register A
                                 .equ	WGM00	= 0	; Waveform Generation Mode
                                 .equ	WGM01	= 1	; Waveform Generation Mode
                                 .equ	COM0B0	= 4	; Compare Output Mode, Fast PWm
                                 .equ	COM0B1	= 5	; Compare Output Mode, Fast PWm
                                 .equ	COM0A0	= 6	; Compare Output Mode, Phase Correct PWM Mode
                                 .equ	COM0A1	= 7	; Compare Output Mode, Phase Correct PWM Mode
                                 
                                 ; TCCR0B - Timer/Counter Control Register B
                                 .equ	CS00	= 0	; Clock Select
                                 .equ	CS01	= 1	; Clock Select
                                 .equ	CS02	= 2	; Clock Select
                                 .equ	WGM02	= 3	; 
                                 .equ	FOC0B	= 6	; Force Output Compare B
                                 .equ	FOC0A	= 7	; Force Output Compare A
                                 
                                 ; TCNT0 - Timer/Counter0
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0A - Timer/Counter0 Output Compare Register
                                 .equ	OCR0A_0	= 0	; 
                                 .equ	OCR0A_1	= 1	; 
                                 .equ	OCR0A_2	= 2	; 
                                 .equ	OCR0A_3	= 3	; 
                                 .equ	OCR0A_4	= 4	; 
                                 .equ	OCR0A_5	= 5	; 
                                 .equ	OCR0A_6	= 6	; 
                                 .equ	OCR0A_7	= 7	; 
                                 
                                 ; OCR0B - Timer/Counter0 Output Compare Register
                                 .equ	OCR0B_0	= 0	; 
                                 .equ	OCR0B_1	= 1	; 
                                 .equ	OCR0B_2	= 2	; 
                                 .equ	OCR0B_3	= 3	; 
                                 .equ	OCR0B_4	= 4	; 
                                 .equ	OCR0B_5	= 5	; 
                                 .equ	OCR0B_6	= 6	; 
                                 .equ	OCR0B_7	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 ;.equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	PSR10	= PSRSYNC	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; EICRA - External Interrupt Control Register
                                 .equ	ISC00	= 0	; External Interrupt Sense Control 0 Bit 0
                                 .equ	ISC01	= 1	; External Interrupt Sense Control 0 Bit 1
                                 .equ	ISC10	= 2	; External Interrupt Sense Control 1 Bit 0
                                 .equ	ISC11	= 3	; External Interrupt Sense Control 1 Bit 1
                                 
                                 ; EIMSK - External Interrupt Mask Register
                                 .equ	INT0	= 0	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 1	; External Interrupt Request 1 Enable
                                 
                                 ; EIFR - External Interrupt Flag Register
                                 .equ	INTF0	= 0	; External Interrupt Flag 0
                                 .equ	INTF1	= 1	; External Interrupt Flag 1
                                 
                                 ; PCICR - Pin Change Interrupt Control Register
                                 .equ	PCIE0	= 0	; Pin Change Interrupt Enable 0
                                 .equ	PCIE1	= 1	; Pin Change Interrupt Enable 1
                                 .equ	PCIE2	= 2	; Pin Change Interrupt Enable 2
                                 
                                 ; PCMSK2 - Pin Change Mask Register 2
                                 .equ	PCINT16	= 0	; Pin Change Enable Mask 16
                                 .equ	PCINT17	= 1	; Pin Change Enable Mask 17
                                 .equ	PCINT18	= 2	; Pin Change Enable Mask 18
                                 .equ	PCINT19	= 3	; Pin Change Enable Mask 19
                                 .equ	PCINT20	= 4	; Pin Change Enable Mask 20
                                 .equ	PCINT21	= 5	; Pin Change Enable Mask 21
                                 .equ	PCINT22	= 6	; Pin Change Enable Mask 22
                                 .equ	PCINT23	= 7	; Pin Change Enable Mask 23
                                 
                                 ; PCMSK1 - Pin Change Mask Register 1
                                 .equ	PCINT8	= 0	; Pin Change Enable Mask 8
                                 .equ	PCINT9	= 1	; Pin Change Enable Mask 9
                                 .equ	PCINT10	= 2	; Pin Change Enable Mask 10
                                 .equ	PCINT11	= 3	; Pin Change Enable Mask 11
                                 .equ	PCINT12	= 4	; Pin Change Enable Mask 12
                                 .equ	PCINT13	= 5	; Pin Change Enable Mask 13
                                 .equ	PCINT14	= 6	; Pin Change Enable Mask 14
                                 
                                 ; PCMSK0 - Pin Change Mask Register 0
                                 .equ	PCINT0	= 0	; Pin Change Enable Mask 0
                                 .equ	PCINT1	= 1	; Pin Change Enable Mask 1
                                 .equ	PCINT2	= 2	; Pin Change Enable Mask 2
                                 .equ	PCINT3	= 3	; Pin Change Enable Mask 3
                                 .equ	PCINT4	= 4	; Pin Change Enable Mask 4
                                 .equ	PCINT5	= 5	; Pin Change Enable Mask 5
                                 .equ	PCINT6	= 6	; Pin Change Enable Mask 6
                                 .equ	PCINT7	= 7	; Pin Change Enable Mask 7
                                 
                                 ; PCIFR - Pin Change Interrupt Flag Register
                                 .equ	PCIF0	= 0	; Pin Change Interrupt Flag 0
                                 .equ	PCIF1	= 1	; Pin Change Interrupt Flag 1
                                 .equ	PCIF2	= 2	; Pin Change Interrupt Flag 2
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCSR - Watchdog Timer Control Register
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDCE	= 4	; Watchdog Change Enable
                                 .equ	WDP3	= 5	; Watchdog Timer Prescaler Bit 3
                                 .equ	WDIE	= 6	; Watchdog Timeout Interrupt Enable
                                 .equ	WDIF	= 7	; Watchdog Timeout Interrupt Flag
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; CLKPR - Clock Prescale Register
                                 .equ	CLKPS0	= 0	; Clock Prescaler Select Bit 0
                                 .equ	CLKPS1	= 1	; Clock Prescaler Select Bit 1
                                 .equ	CLKPS2	= 2	; Clock Prescaler Select Bit 2
                                 .equ	CLKPS3	= 3	; Clock Prescaler Select Bit 3
                                 .equ	CLKPCE	= 7	; Clock Prescaler Change Enable
                                 
                                 ; SPMCSR - Store Program Memory Control and Status Register
                                 .equ    SELFPRGEN = 0; Added for backwards compatibility
                                 .equ	SPMEN	= 0	; Store Program Memory
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read-While-Write section read enable
                                 .equ    SIGRD   = 5 ; Signature Row Read
                                 .equ	RWWSB	= 6	; Read-While-Write Section Busy
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	IVCE	= 0	; 
                                 .equ	IVSEL	= 1	; 
                                 .equ	PUD	= 4	; 
                                 .equ	BODSE	= 5	; BOD Sleep Enable
                                 .equ	BODS	= 6	; BOD Sleep
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	EXTREF	= EXTRF	; For compatibility
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 
                                 ; SMCR - Sleep Mode Control Register
                                 .equ	SE	= 0	; Sleep Enable
                                 .equ	SM0	= 1	; Sleep Mode Select Bit 0
                                 .equ	SM1	= 2	; Sleep Mode Select Bit 1
                                 .equ	SM2	= 3	; Sleep Mode Select Bit 2
                                 
                                 ; GPIOR2 - General Purpose I/O Register 2
                                 .equ	GPIOR20	= 0	; 
                                 .equ	GPIOR21	= 1	; 
                                 .equ	GPIOR22	= 2	; 
                                 .equ	GPIOR23	= 3	; 
                                 .equ	GPIOR24	= 4	; 
                                 .equ	GPIOR25	= 5	; 
                                 .equ	GPIOR26	= 6	; 
                                 .equ	GPIOR27	= 7	; 
                                 
                                 ; GPIOR1 - General Purpose I/O Register 1
                                 .equ	GPIOR10	= 0	; 
                                 .equ	GPIOR11	= 1	; 
                                 .equ	GPIOR12	= 2	; 
                                 .equ	GPIOR13	= 3	; 
                                 .equ	GPIOR14	= 4	; 
                                 .equ	GPIOR15	= 5	; 
                                 .equ	GPIOR16	= 6	; 
                                 .equ	GPIOR17	= 7	; 
                                 
                                 ; GPIOR0 - General Purpose I/O Register 0
                                 .equ	GPIOR00	= 0	; 
                                 .equ	GPIOR01	= 1	; 
                                 .equ	GPIOR02	= 2	; 
                                 .equ	GPIOR03	= 3	; 
                                 .equ	GPIOR04	= 4	; 
                                 .equ	GPIOR05	= 5	; 
                                 .equ	GPIOR06	= 6	; 
                                 .equ	GPIOR07	= 7	; 
                                 
                                 ; PRR - Power Reduction Register
                                 .equ	PRADC	= 0	; Power Reduction ADC
                                 .equ	PRUSART0	= 1	; Power Reduction USART
                                 .equ	PRSPI	= 2	; Power Reduction Serial Peripheral Interface
                                 .equ	PRTIM1	= 3	; Power Reduction Timer/Counter1
                                 .equ	PRTIM0	= 5	; Power Reduction Timer/Counter0
                                 .equ	PRTIM2	= 6	; Power Reduction Timer/Counter2
                                 .equ	PRTWI	= 7	; Power Reduction TWI
                                 
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEARL - EEPROM Address Register Low Byte
                                 .equ	EEAR0	= 0	; EEPROM Read/Write Access Bit 0
                                 .equ	EEAR1	= 1	; EEPROM Read/Write Access Bit 1
                                 .equ	EEAR2	= 2	; EEPROM Read/Write Access Bit 2
                                 .equ	EEAR3	= 3	; EEPROM Read/Write Access Bit 3
                                 .equ	EEAR4	= 4	; EEPROM Read/Write Access Bit 4
                                 .equ	EEAR5	= 5	; EEPROM Read/Write Access Bit 5
                                 .equ	EEAR6	= 6	; EEPROM Read/Write Access Bit 6
                                 .equ	EEAR7	= 7	; EEPROM Read/Write Access Bit 7
                                 
                                 ; EEARH - EEPROM Address Register High Byte
                                 .equ	EEAR8	= 0	; EEPROM Read/Write Access Bit 8
                                 .equ	EEAR9	= 1	; EEPROM Read/Write Access Bit 9
                                 
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEPE	= 1	; EEPROM Write Enable
                                 .equ	EEMPE	= 2	; EEPROM Master Write Enable
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 .equ	EEPM0	= 4	; EEPROM Programming Mode Bit 0
                                 .equ	EEPM1	= 5	; EEPROM Programming Mode Bit 1
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	SUT0	= 4	; Select start-up time
                                 .equ	SUT1	= 5	; Select start-up time
                                 .equ	CKOUT	= 6	; Clock output
                                 .equ	CKDIV8	= 7	; Divide clock by 8
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select reset vector
                                 .equ	BOOTSZ0	= 1	; Select boot size
                                 .equ	BOOTSZ1	= 2	; Select boot size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	WDTON	= 4	; Watchdog Timer Always On
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	DWEN	= 6	; debugWIRE Enable
                                 .equ	RSTDISBL	= 7	; External reset disable
                                 
                                 ; EXTENDED fuse bits
                                 .equ	BODLEVEL0	= 0	; Brown-out Detector trigger level
                                 .equ	BODLEVEL1	= 1	; Brown-out Detector trigger level
                                 .equ	BODLEVEL2	= 2	; Brown-out Detector trigger level
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x3fff	; Note: Word address
                                 .equ	IOEND	= 0x00ff
                                 .equ	SRAM_START	= 0x0100
                                 .equ	SRAM_SIZE	= 2048
                                 .equ	RAMEND	= 0x08ff
                                 .equ	XRAMEND	= 0x0000
                                 .equ	E2END	= 0x03ff
                                 .equ	EEPROMEND	= 0x03ff
                                 .equ	EEADRBITS	= 10
                                 #pragma AVRPART MEMORY PROG_FLASH 32768
                                 #pragma AVRPART MEMORY EEPROM 1024
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 2048
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0x3800
                                 .equ	NRWW_STOP_ADDR	= 0x3fff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0x37ff
                                 .equ	PAGESIZE	= 64
                                 .equ	FIRSTBOOTSTART	= 0x3f00
                                 .equ	SECONDBOOTSTART	= 0x3e00
                                 .equ	THIRDBOOTSTART	= 0x3c00
                                 .equ	FOURTHBOOTSTART	= 0x3800
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	PCI0addr	= 0x0006	; Pin Change Interrupt Request 0
                                 .equ	PCI1addr	= 0x0008	; Pin Change Interrupt Request 0
                                 .equ	PCI2addr	= 0x000a	; Pin Change Interrupt Request 1
                                 .equ	WDTaddr	= 0x000c	; Watchdog Time-out Interrupt
                                 .equ	OC2Aaddr	= 0x000e	; Timer/Counter2 Compare Match A
                                 .equ	OC2Baddr	= 0x0010	; Timer/Counter2 Compare Match A
                                 .equ	OVF2addr	= 0x0012	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x0014	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x0016	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x0018	; Timer/Counter1 Compare Match B
                                 .equ	OVF1addr	= 0x001a	; Timer/Counter1 Overflow
                                 .equ	OC0Aaddr	= 0x001c	; TimerCounter0 Compare Match A
                                 .equ	OC0Baddr	= 0x001e	; TimerCounter0 Compare Match B
                                 .equ	OVF0addr	= 0x0020	; Timer/Couner0 Overflow
                                 .equ	SPIaddr	= 0x0022	; SPI Serial Transfer Complete
                                 .equ	URXCaddr	= 0x0024	; USART Rx Complete
                                 .equ	UDREaddr	= 0x0026	; USART, Data Register Empty
                                 .equ	UTXCaddr	= 0x0028	; USART Tx Complete
                                 .equ	ADCCaddr	= 0x002a	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x002c	; EEPROM Ready
                                 .equ	ACIaddr	= 0x002e	; Analog Comparator
                                 .equ	TWIaddr	= 0x0030	; Two-wire Serial Interface
                                 .equ	SPMRaddr	= 0x0032	; Store Program Memory Read
                                 
                                 .equ	INT_VECTORS_SIZE	= 52	; size in words
                                 
                                 #endif  /* _M328PDEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega328P.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m328Pdef.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega328P
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega328P
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M328PDEF_INC_
                                 #endif  /* _M328PDEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 .org 0x0000
000000 c020                      rjmp init
                                 
                                 .org 0x0020
000020 c212                      rjmp TimerInterrupt
                                 
                                 
                                 
                                 .EQU MonsterNotGunPat = 0b11111001
                                 .EQU MonsterGunPat = 0b11111001
                                 .EQU ShipGun = 0b0011111
                                 .EQU ShipMiddle = 0b00111110
                                 .EQU ShipEnd = 0b0010000
                                 
                                 .EQU BTN8_PATTERN = 0b01111011 ; Button 8 pressed pattern
                                 .EQU BTN7_PATTERN = 0b01110111 ; Button 7 pressed pattern
                                 .EQU BTN5_PATTERN = 0b10111011 ; Button 5 pressed pattern
                                 .EQU BTN4_PATTERN = 0b10110111 ; Button 4 pressed pattern
                                 .EQU BTNA_PATTERN = 0b11100111 ; Button A pressed pattern
                                 .EQU BTN0_PATTERN = 0b11101110 ; Button 0 pressed pattern
                                 .EQU BTN1_PATTERN = 0b11010111 ; Button 1 pressed pattern
                                 .EQU NOBTN_PATTERN =  0b11111111 ; No button preesed pattern
                                 .EQU OTHER_PATTERN = 0b00110011 ; Pattern for the rest of the buttons
                                 
000021 9a3a                      init: SBI DDRC, 2
000022 9a42                      	  SBI PORTC,2
                                 
000023 e80f                      	  LDI R16, 0b10001111 ; keyboard set
000024 e710                      	  LDI R17, 0b01110000
000025 b91a                      	  OUT DDRD, R17 
000026 b90b                      	  OUT PORTD, R16 ; Init keyboard. set all rows to ground and cols to 1 
                                 
000027 ef0f                      	  LDI R16, 0xFF 
000028 b904                      	  OUT DDRB, R16 ; Set PORTB to out
                                 
000029 e051                      	  LDI R21, 0x01 ; initial row
                                 
00002a e0e0                      	  LDI ZL, 0x00
00002b e0f1                      	  LDI ZH, 0x01
                                 
                                 
00002c e008                      	 LDI R16, HIGH(RAMEND)
00002d bf0e                      	 OUT SPH, R16
00002e ef0f                      	 LDI R16, LOW(RAMEND)
00002f bf0d                      	 OUT SPL, R16
                                 
000030 9478                      	 SEI ;Set I bit to 1
                                 	
000031 e001                      	 LDI R16, 0x01
000032 9300 006e                 	 STS TIMSK0, R16 ;timer0 interrupt enable
                                 
000034 e005                       	 LDI R16, 0x05
000035 bd05                      	 OUT TCCR0B, R16 ;prescaler 1024
                                 
                                 
                                 
                                 ; 1ST ROW
000036 ef09                      LDI R16, MonsterNotGunPat
000037 9300 0212                 STS 0x212, R16
000039 e10f                      LDI R16, 0b00011111
00003a 9300 0213                 STS 0x213, R16
00003c e100                      LDI R16, ShipEnd
00003d 9300 0214                 STS 0x214, R16
00003f d110                      RCALL InitScreenState
                                 		
                                 
                                 ;2ND ROW
                                 SECOND_ROW: 
000040 e10f                      LDI R16, 0b00011111
000041 9300 0212                 STS 0x212, R16
000043 e10f                      LDI R16, 0b00011111
000044 9300 0213                 STS 0x213, R16
000046 e30e                      LDI R16, ShipMiddle
000047 9300 0214                 STS 0x214, R16
000049 940e 0150                 CALL InitScreenState
                                             
                                 
                                 
                                 ;3RD ROW
00004b e10f                      LDI R16, 0b00011111
00004c 9300 0212                 STS 0x212, R16
00004e ef09                      LDI R16, MonsterGunPat
00004f 9300 0213                 STS 0x213, R16
000051 e10f                      LDI R16, ShipGun
000052 9300 0214                 STS 0x214, R16
000054 940e 0150                 CALL InitScreenState
                                 
                                 ;4th ROW
000056 ef09                      LDI R16, MonsterGunPat
000057 9300 0212                 STS 0x212, R16
000059 ef09                      LDI R16, MonsterNotGunPat
00005a 9300 0213                 STS 0x213, R16
00005c e30e                      LDI R16, ShipMiddle
00005d 9300 0214                 STS 0x214, R16
00005f 940e 0150                 CALL InitScreenState
                                 
                                 ;5th ROW
000061 ef09                      LDI R16, MonsterNotGunPat
000062 9300 0212                 STS 0x212, R16
000064 e10f                      LDI R16, 0b00011111
000065 9300 0213                 STS 0x213, R16
000067 e100                      LDI R16, ShipEnd
000068 9300 0214                 STS 0x214, R16
00006a 940e 0150                 CALL InitScreenState
                                 
                                 ;6th ROW
00006c e10f                      LDI R16, 0b00011111
00006d 9300 0212                 STS 0x212, R16
00006f e10f                      LDI R16, 0b00011111
000070 9300 0213                 STS 0x213, R16
000072 e000                      LDI R16, 0b00000000
000073 9300 0214                 STS 0x214, R16
000075 940e 0150                 CALL InitScreenState
                                 
                                 ; 7th ROW
000077 e10f                      LDI R16, 0b00011111
000078 9300 0212                 STS 0x212, R16
00007a ef09                      LDI R16, MonsterGunPat
00007b 9300 0213                 STS 0x213, R16
00007d e000                      LDI R16, 0b00000000
00007e 9300 0214                 STS 0x214, R16
000080 940e 0150                 CALL InitScreenState 
                                  
000082 e0e0                      LDI ZL, 0x00 ; Reset
000083 e0f1                      LDI ZH, 0x01
                                 
000084 e071                      LDI R23, 0x01
                                 
000085 ebc0                      LDI YL, 0xB0
000086 e0d8                      LDI YH, 0x08
                                 
000087 940e 016e                 main: CALL DISPLAY
000089 940e 01cf                 	  CALL UPDATE_STATE
                                 
00008b c000                      	RJMP CHECK_STATE
                                 			 
                                 
                                 
00008c b129                      CHECK_STATE: IN R18,PIND ; Copy PIND into R18
00008d d0d6                      		     RCALL CONTEXT_SWITCH ; Call context switch (RCALL takes less instruction cycles than CALL)
00008e b139                      		     IN R19,PIND ; Copy PIND into R19
00008f d0d9                      		     RCALL RESET_CONTEXT ; Call reset context 
000090 2b23                      		     OR R18,R19 ; R18 OR R19 and store the result in R18
                                 
000091 3b27                      		     CPI R18,BTN4_PATTERN ; If button 4 is pressed
000092 f079                      		     BREQ MOVE_DOWN
                                 
000093 3d27                           		 CPI R18,BTN1_PATTERN ; If button 1 is pressed
000094 f1f9                      		     BREQ MOVE_UP
                                 
000095 3e27                      		     CPI R18,BTNA_PATTERN ; If button A is pressed
000096 f029                      		     BREQ SHOOT
                                 
000097 d0fd                      			 RCALL SHOOT_BOSS
                                 
000098 e051                      		     LDI R21, 0x01 ; reset to first row again
000099 e0e0                      		     LDI ZL, 0x00
00009a e0f1                      		     LDI ZH, 0x01
00009b cfeb                      		     RJMP main
                                 
00009c 940e 01ab                 SHOOT: CALL SHIP_SHOOT
00009e e051                      	   LDI R21, 0x01 ; reset to first row again
00009f e0e0                      	   LDI ZL, 0x00
0000a0 e0f1                      	   LDI ZH, 0x01
0000a1 cfe5                      	   RJMP main
                                 
                                 MOVE_DOWN:   
0000a2 9842                      		CBI PORTC,2 ; Turn on top led
                                 
                                 		
                                 	 ; --------------- MOVE TO INTERMEDIATE STATE OF THE SCREEN ---------
0000a3 d0a2                      			RCALL DISPLAY_INTERMEDIATE_STATE
                                 
                                 		; -------------- CHECK IF SHIP IS AT THE END ----------------
0000a4 e0e0                      		LDI ZL, 0x00 ; Start at 10
0000a5 e0f1                      		LDI ZH, 0x01
                                 
0000a6 d098                      		RCALL POINT65TH_BYTE ; can't read with ldd for over 63
0000a7 8100                      		LD R16, Z
                                 
0000a8 3100                      		CPI R16, ShipEnd
0000a9 f131                      		BREQ FinishMoveDown
                                 		    
                                        ; --------------- COPY PARTS OF THE SHIP TO POINTER X -----------
0000aa d05b                      	   RCALL COPY_SHIP
                                 
                                 		; -------------- MOVE DOWN ------------
                                 
                                 		; ------------ FIRST ROW OF BLOCKS --------------
0000ab e0e0                      		LDI ZL, 0x00 
0000ac e0f1                      		LDI ZH, 0x01
                                 
0000ad e2a0                      		LDI XL, 0x20
0000ae e0b2                      		LDI XH, 0x02
                                 		
0000af e000                      		LDI R16, 0x00 ; send 0 to the first row
0000b0 8701                      		STD Z+9, R16
                                 		
0000b1 910d                      		LD R16, X+
0000b2 8b03                      		STD Z+19, R16
                                 
0000b3 910d                      		LD R16, X+
0000b4 8f05                      		STD Z+29, R16
                                 
0000b5 910d                      		LD R16, X+
0000b6 a307                      		STD Z+39, R16
                                 
0000b7 910d                      		LD R16, X+
0000b8 ab01                      		STD Z+49, R16
                                 
0000b9 910d                      		LD R16, X+
0000ba af03                      		STD Z+59, R16
                                 
0000bb d07c                      		RCALL POINT70TH_BYTE
                                       
0000bc 910d                      	  LD R16, X+
0000bd 8300                      	  ST Z, R16
                                 
                                 	  ; ------------ SECOND ROW OF BLOCKS --------------
0000be e0e0                      	  LDI ZL, 0x00
0000bf e0f1                      	  LDI ZH, 0x01
                                 
0000c0 910d                      	  LD R16, X+
0000c1 8304                      		STD Z+4, R16
                                 		
0000c2 910d                      		LD R16, X+
0000c3 8706                      		STD Z+14, R16
                                 
0000c4 910d                      		LD R16, X+
0000c5 8f00                      		STD Z+24, R16
                                 
0000c6 910d                      		LD R16, X+
0000c7 a302                      		STD Z+34, R16
                                 
0000c8 910d                      		LD R16, X+
0000c9 a704                      		STD Z+44, R16
                                 
0000ca 910d                      		LD R16, X+
0000cb ab06                      		STD Z+54, R16
                                 
0000cc d072                      		RCALL POINT65TH_BYTE
                                       
0000cd 910d                      		LD R16, X+
0000ce 8300                      		ST Z, R16
                                 
                                 	   
0000cf d05b                      	   RCALL AWAIT_KEYRELEASE
                                 	   
0000d0 e051                      	  FinishMoveDown: LDI R21, 0x01 ; reset to first row again
0000d1 e0e0                      					  LDI ZL, 0x00
0000d2 e0f1                      					  LDI ZH, 0x01
0000d3 cfb3                      					  RJMP main
                                 MOVE_UP:   
0000d4 9842                      		CBI PORTC,2 ; Turn on top led
                                 		
                                 	 ; --------------- MOVE TO INTERMEDIATE STATE OF THE SCREEN ---------
0000d5 d070                      			RCALL DISPLAY_INTERMEDIATE_STATE
                                 
                                 
                                 		; -------------- CHECK IF SHIP IS AT THE END ----------------
0000d6 e0e0                      		LDI ZL, 0x00 ; Start at 10
0000d7 e0f1                      		LDI ZH, 0x01
                                 
0000d8 8501                      		LDD R16, Z+9
                                 
0000d9 3100                      		CPI R16, ShipEnd
0000da f139                      		BREQ FinishMoveUp
                                 		    
                                        ; --------------- COPY PARTS OF THE SHIP TO POINTER X -----------
0000db d02a                      	   RCALL COPY_SHIP
                                 	  
                                 
                                 		; -------------- MOVE UP ------------
                                 		; ------------ FIRST ROW OF BLOCKS --------------
0000dc e0e0                      	  LDI ZL, 0x00
0000dd e0f1                      	  LDI ZH, 0x01
                                 
0000de e2a0                      	  LDI XL, 0x20
0000df e0b2                      	  LDI XH, 0x02
                                 
0000e0 95a3                      	  INC XL ;skip the first segment
                                 
0000e1 910d                      	  LD R16, X+
0000e2 8701                      	  STD Z+9, R16
                                 
0000e3 910d                      	  LD R16, X+
0000e4 8b03                      	  STD Z+19, R16
                                 
0000e5 910d                      	  LD R16, X+
0000e6 8f05                      	  STD Z+29, R16
                                 
0000e7 910d                      	  LD R16, X+
0000e8 a307                      	  STD Z+39, R16
                                 
0000e9 910d                      	  LD R16, X+
0000ea ab01                      	  STD Z+49, R16
                                 
0000eb 910d                      	  LD R16, X+
0000ec af03                      	  STD Z+59, R16
                                 
0000ed d04a                      	  RCALL POINT70TH_BYTE
                                       
0000ee 910d                      	  LD R16, X+
0000ef 8300                      	  ST Z, R16
                                 		
                                 		; ------------ SECOND ROW OF BLOCKS --------------
0000f0 e0e0                      		LDI ZL, 0x00
0000f1 e0f1                      	  LDI ZH, 0x01
                                 
0000f2 910d                      	  LD R16, X+
0000f3 8304                      		STD Z+4, R16
                                 		
0000f4 910d                      		LD R16, X+
0000f5 8706                      		STD Z+14, R16
                                 
0000f6 910d                      		LD R16, X+
0000f7 8f00                      		STD Z+24, R16
                                 
0000f8 910d                      		LD R16, X+
0000f9 a302                      		STD Z+34, R16
                                 
0000fa 910d                      		LD R16, X+
0000fb a704                      		STD Z+44, R16
                                 
0000fc 910d                      		LD R16, X+
0000fd ab06                      		STD Z+54, R16
                                 	
                                 
0000fe d040                      	  RCALL POINT65TH_BYTE ; cant' write with std for over 63
0000ff e000                      	  LDI R16, 0x00 
000100 8300                      	  ST Z, R16
                                 	  
000101 d029                      	  RCALL AWAIT_KEYRELEASE
                                 	   
000102 e051                      	  FinishMoveUp: LDI R21, 0x01 ; reset to first row again
000103 e0e0                      					  LDI ZL, 0x00
000104 e0f1                      					  LDI ZH, 0x01
000105 cf81                      					  RJMP main
                                 
                                 COPY_SHIP: ; ------------ FIRST ROW OF BLOCKS --------------
000106 e0e0                      		LDI ZL, 0x00 ; Start at 10
000107 e0f1                      		LDI ZH, 0x01
                                 
000108 e2a0                      		LDI XL, 0x20
000109 e0b2                      		LDI XH, 0x02
                                 		
                                 		;LDI R16, 0x00
                                 		;ST X+, R16
                                 
00010a 8501                      		LDD R16, Z+9
00010b 930d                      		ST X+, R16
                                 
00010c 8903                      		LDD R16, Z+19
00010d 930d                      		ST X+, R16
                                 
00010e 8d05                      		LDD R16, Z+29
00010f 930d                      		ST X+, R16
                                 
000110 a107                      		LDD R16, Z+39
000111 930d                      		ST X+, R16
                                 
000112 a901                      		LDD R16, Z+49
000113 930d                      		ST X+, R16
                                 
000114 ad03                      		LDD R16, Z+59
000115 930d                      		ST X+, R16
                                 
000116 d021                      		RCALL POINT70TH_BYTE
000117 8100                      		LD R16, Z
000118 930d                      		ST X+, R16
                                 
                                 		; ------------ SECOND ROW OF BLOCKS --------------
000119 e0e0                      		LDI ZL, 0x00 
00011a e0f1                      		LDI ZH, 0x01
                                 
00011b 8104                      		LDD R16, Z+4
00011c 930d                      		ST X+, R16
                                 
00011d 8506                      		LDD R16, Z+14
00011e 930d                      		ST X+, R16
                                 
00011f 8d00                      		LDD R16, Z+24
000120 930d                      		ST X+, R16
                                 
000121 a102                      		LDD R16, Z+34
000122 930d                      		ST X+, R16
                                 
000123 a504                      		LDD R16, Z+44
000124 930d                      		ST X+, R16
                                 
000125 a906                      		LDD R16, Z+54
000126 930d                      		ST X+, R16
                                 
000127 d017                      		RCALL POINT65TH_BYTE
000128 8100                      		LD R16, Z
000129 930d                      		ST X+, R16
                                 
00012a 9508                      		RET
                                 
00012b ef4f                      AWAIT_KEYRELEASE: DELAY: LDI R20, 0xFF
00012c 0000                      				  LOOP:  NOP
00012d efcf                      						LDI R28, 0xFF
00012e 0000                      						NESTED: NOP
00012f e0d4                      								LDI R29, 0x04
000130 0000                      								NESTED2: NOP
000131 95da                      										 DEC R29
000132 f7e9                      										 BRNE NESTED2
000133 95ca                      								DEC R28
000134 f7c9                      								BRNE NESTED
000135 954a                      				   DEC R20
000136 f7a9                      				   BRNE LOOP
000137 9508                      				   RET
                                 
000138 e0e0                      POINT70TH_BYTE: LDI ZL, 0x00 
000139 e0f1                      			   LDI ZH, 0x01
00013a e415                      			   LDI R17, 69
00013b 9101                      			   READ70TH_LOOP: LD R16, Z+
00013c 951a                      					  DEC R17
00013d f7e9                      					  BRNE READ70TH_LOOP
                                 			
00013e 9508                      		        RET
                                 
00013f e0e0                      POINT65TH_BYTE:  LDI ZL, 0x00
000140 e0f1                      				LDI ZH, 0x01
000141 e410                      				LDI R17, 64
000142 9101                      				READ65TH_LOOP: LD R16, Z+
000143 951a                      					  DEC R17
000144 f7e9                      					  BRNE READ65TH_LOOP
                                 				
000145 9508                      				RET
                                 				   		    
000146 e518                      DISPLAY_INTERMEDIATE_STATE: LDI R17, 88
000147 982b                      				   CBI PORTB, 3
000148 982d                      				   SEND_DATA: CBI PORTB, 5
000149 9a2d                      							  SBI PORTB, 5
00014a 951a                      							  DEC R17
00014b f7e1                      							  BRNE SEND_DATA
00014c 982c                      					CBI PORTB, 4
00014d 9a2c                      					SBI PORTB, 4
00014e 982c                      					CBI PORTB, 4
                                 					
                                 				  
00014f 9508                      					RET
                                 				   
                                 
000150 9160 0212                 InitScreenState: LDS R22,  0x212
000152 9361                      				 ST Z+, R22
                                 
000153 e060                      				LDI R22, 0x00
000154 e014                      				LDI R17, 4
                                 
000155 9361                      				LOOP_BUFF: ST Z+, R22
000156 951a                      						   DEC R17
000157 f7e9                      						   BRNE LOOP_BUFF
                                 
000158 9160 0213                 				LDS R22, 0x213
00015a 9361                      				ST Z+, R22
                                 
00015b e060                      				LDI R22, 0x00
00015c e013                      				LDI R17, 3
                                 
00015d 9361                      				LOOP_BUFF1_: ST Z+, R22
00015e 951a                      						   DEC R17
00015f f7e9                      						   BRNE LOOP_BUFF1_
                                 		   
000160 9160 0214                 				LDS R22, 0x214
000162 9361                      				ST Z+, R22
                                 
000163 9508                      				RET ; Return to caller
                                 
000164 e700                      CONTEXT_SWITCH: LDI R16, 0b01110000  ; Copy 0b1111 0000 to R16
000165 e81f                      			    LDI R17, 0b10001111  ; Copy 0b0000 1111 to R17
                                 
                                 
                                 
000166 b90b                      			    OUT PORTD, R16 ; Set PORTD to R16
000167 b91a                      	            OUT DDRD, R17  ; Set DDRD to R17  	
000168 9508                      			    RET ; Return to caller
                                 
000169 e80f                      RESET_CONTEXT: LDI R16, 0b10001111 ; keyboard set
00016a e710                      			   LDI R17, 0b01110000
                                 
00016b b90b                      			   OUT PORTD, R16
00016c b91a                      		       OUT DDRD, R17
00016d 9508                      			   RET ; Return to caller
                                 
                                 
                                 
00016e 9a42                      DISPLAY: SBI PORTC, 2 ; test
00016f e04a                            LDI R20, 10 ; 10 bytes per row 
000170 e028                      	  LOAD_BYTE: LDI R18, 8 ;Iteration variable, 8 bits to serially shift
000171 9101                      			     LD R16, Z+ ; Read from loacation pointed by z and auto-increment z
000172 9488                      			     CLC ; Clear carry bit
                                 
000173 9a2b                      	   SEND_BYTE_COL: SBI PORTB,3 ; Clear column data input
000174 9507                      				  ROR R16
000175 f008                      				  BRCS CARRY_ISONE
000176 982b                      				  CBI PORTB,3
000177 982d                      				  CARRY_ISONE: CBI PORTB,5 ; clock edge
000178 9a2d                      							   SBI PORTB,5
000179 952a                      				  DEC R18
00017a f7c1                      				  BRNE SEND_BYTE_COL
                                 
00017b 954a                      	   DEC R20
00017c f799                      	   BRNE LOAD_BYTE ; load next byte
                                 	  
                                 		   
00017d e028                      	   LDI R18, 8
00017e 2f95                      	   MOV R25, R21
00017f 9488                             CLC
000180 982b                      	   SEND_BYTE_ROW: CBI PORTB,3 ; clear data input
000181 1f99                      					   ROL R25
000182 f408                      					   BRCC _CARRY_ISZERO
000183 9a2b                      					   SBI PORTB,3 ; set data input
000184 982d                      					   _CARRY_ISZERO: CBI PORTB,5 ; clock edge
000185 9a2d                      									 SBI PORTB,5
000186 952a                      					   DEC R18
000187 f7c1                      					   BRNE SEND_BYTE_ROW
                                 	
                                 
000188 982c                      	CBI PORTB,4 ; latch data to output
000189 9a2c                      	SBI PORTB,4
00018a 9ba8                      	AWAIT: SBIS TIFR0, TOV0 ; Delay
00018b cffe                      		   RJMP AWAIT
                                 	
                                 	;CLC
00018c 0f55                      	LSL R21 ; shift to next row
00018d 3850                      	CPI R21, 0x80
00018e f6f9                      	BRNE DISPLAY
                                 	
00018f e051                      	LDI R21, 0x01 ; reset to first row again
000190 e0e0                      	  LDI ZL, 0x00
000191 e0f1                      	  LDI ZH, 0x01
000192 e2a0                      	  LDI XL, 0x20
000193 e0b2                      	  LDI XH, 0x02
                                 
000194 9508                      	RET
                                 
                                 SHOOT_BOSS: 
000195 ebc4                      			LDI YL, 0xB4
000196 e0d8                      			LDI YH, 0x08
                                 
000197 e0e0                      			LDI ZL, 0x00
000198 e0f1                      			LDI ZH, 0x01
                                 
000199 e0aa                      			LDI R26, 10 ; 5 gun locations
00019a e129                      			LDI R18, 25 ; Start at 35
                                 
00019b e800                      			Bshootloop: LDI R16, 0x80
                                 		 	; -------- FIND WHERE THE GUN IS ---
00019c d05e                      			RCALL SHIFT_Z
00019d 8110                      			LD R17, Z
00019e 3f19                      			CPI R17, MonsterGunPat
                                 			 
00019f c006                      			RJMP BFIRE
                                 			;------ MOVE TO NEXT PATH ------
0001a0 e0ba                      			LDI R27, 10
0001a1 0f2b                      			ADD R18, R27
0001a2 e0e0                      			LDI ZL, 0x00
0001a3 91e9                      			LD R30, Y+
0001a4 95aa                      			DEC R26
0001a5 f7a9                      			BRNE Bshootloop
                                 
0001a6 e000                      			BFIRE:  LDI R16, 0x00
0001a7 8118                      					LD R17, Y
0001a8 e010                      				    LDI R17, 0x00
0001a9 9319                      				  SHOOT1: ST Y+, R17
                                 
                                 
0001aa 9508                      		  BEND_SHOOTING : RET
                                 			
                                 
                                 SHIP_SHOOT: 
                                 	    ; -------------- START SHOOTING -------------------
                                 
                                 		; -------------- -----------FIRST BLOC ------------------------------------------
0001ab ebc0                      		    LDI YL, 0xB0
0001ac e0d8                      			LDI YH, 0x08
                                 
0001ad e0e0                      			LDI ZL, 0x00
0001ae e0f1                      			LDI ZH, 0x01
                                 
0001af e0a2                      			LDI R26, 2 ; 5 gun locations
0001b0 e321                      			LDI R18, 49 ; Start at 30, to check the location of the gun
                                 
0001b1 e800                      			shootloop: LDI R16, 0x80
                                 		 				; -------- FIND WHERE THE GUN IS ---
0001b2 d048                      						RCALL SHIFT_Z
0001b3 8110                      						LD R17, Z
0001b4 311f                      						CPI R17, ShipGun
                                 			 
0001b5 f0a1                      						BREQ FIRE
                                 						;------ MOVE TO NEXT PATH ------
0001b6 e0ba                      						LDI R27, 10
0001b7 0f2b                      						ADD R18, R27
0001b8 e0e0                      						LDI ZL, 0x00
0001b9 91e9                      						LD R30, Y+
0001ba 95aa                      						DEC R26
0001bb f7a9                      						BRNE shootloop
                                 
                                 			; -------------- -----------SECOND BLOC ------------------------------------------
                                 			
0001bc e0a2                      			LDI R26, 2 ; 5 gun locations
0001bd e02e                      			LDI R18, 14 ; Start at 5, to check the location of the gun
                                 
0001be e800                      			shootloop2: LDI R16, 0x80
                                 		 				; ------ FIND WHERE THE GUN IS ----
0001bf d03b                      						RCALL SHIFT_Z
0001c0 8110                      						LD R17, Z
0001c1 311f                      						CPI R17, ShipGun 
0001c2 f039                      						BREQ FIRE
                                 						;------ MOVE TO NEXT PATH ----------
0001c3 e0ba                      						LDI R27, 10
0001c4 0f2b                      						ADD R18, R27
0001c5 e0e0                      						LDI ZL, 0x00
0001c6 91e9                      						LD R30, Y+
0001c7 95aa                      						DEC R26
0001c8 f7a9                      						BRNE shootloop2
0001c9 c002                      						RJMP END_SHOOTING
                                 			; --------------------------- FIRE -------------------------
0001ca e800                      			FIRE: LDI R16, 0x80
0001cb 8308                      				  ST Y, R16
                                 
0001cc 9508                      		  END_SHOOTING : RET
0001cd 9a3b                      		  test: SBI DDRC, 3
0001ce 9843                      				CBI PORTC,3
                                 
                                 
                                 
0001cf ebc0                      UPDATE_STATE: LDI YL, 0xB0
0001d0 e0d8                      			 LDI YH, 0x08 
0001d1 e0e0                      			 LDI ZL, 0x00
0001d2 e0f1                      			 LDI ZH, 0x01
                                 		
                                 		; ---------------------------------------FIRST BLOC ----------------------------
0001d3 e032                             LDI R19, 2 ; 5 BULLET PATHS
0001d4 e320                             LDI R18, 48 ; FIRST PATH ADDRESS
                                 
0001d5 d025                             TRACE_BULLET: RCALL SHIFT_Z
0001d6 d03f                                     RCALL BULLET_PATH
0001d7 e09a                                     LDI R25, 10
0001d8 0f29                                     ADD R18, R25
                                 
0001d9 e0e0                                     LDI ZL, 0x00
0001da 953a                                     DEC  R19
0001db f7c9                                     BRNE TRACE_BULLET
                                 
                                 
0001dc e0e0                             LDI ZL, 0x00
0001dd e0f1                             LDI ZH, 0x01
                                 
                                 
                                       ; ----------------- --------------SECOND BLOC -------------------------------------------
                                    
0001de e0e0                            LDI ZL, 0x00
0001df e032                            LDI R19, 2 ; 10 BULLET PATHS
0001e0 e02d                            LDI R18, 13 ; FIRST PATH ADDRESS
                                 
0001e1 d019                             TRACE_BULLET2: RCALL SHIFT_Z
0001e2 d033                                     RCALL BULLET_PATH
0001e3 e09a                                     LDI R25, 10
0001e4 0f29                                     ADD R18, R25
                                 
0001e5 e0e0                                     LDI ZL, 0x00
0001e6 953a                                     DEC  R19
0001e7 f7c9                                     BRNE TRACE_BULLET2
                                 
                                 	  ; -------------------- BOSS BULLETS -----------------------
                                        ;-------------- FIRST BLOC ----------------------
0001e8 e0e0                             LDI ZL, 0x00
0001e9 e032                             LDI R19, 2 ; 5 BULLET PATHS
0001ea e12a                             LDI R18, 26 ; FIRST PATH ADDRESS
                                 
0001eb d00f                             BTRACE_BULLET: RCALL SHIFT_Z
0001ec d017                                     RCALL BOSSBULLET_PATH
0001ed e09a                                     LDI R25, 10
0001ee 0f29                                     ADD R18, R25
                                 
0001ef e0e0                                     LDI ZL, 0x00
0001f0 953a                                     DEC  R19
0001f1 f7c9                                     BRNE BTRACE_BULLET
                                 
0001f2 ebc0                            LDI YL, 0xB0
0001f3 e0d8                             LDI YH, 0x08
                                 
0001f4 e000                             LDI R16, 0x00
0001f5 e114                             LDI R17, 20
0001f6 9309                             RESET: ST Y+, R16
0001f7 951a                                DEC R17
0001f8 f7e9                                BRNE RESET
                                 
0001f9 d030                      			 RCALL BULLET_DELAY
0001fa 9508                      			 RET
                                 
0001fb 0000                      SHIFT_Z:  NOP
0001fc 9320 0260                 		  STS 0x260, R18
0001fe 9190 0260                 		  LDS R25, 0x260
000200 95e3                      			SHIFT:  INC ZL
000201 959a                      					DEC R25
000202 f7e9                      					BRNE SHIFT
000203 9508                      			RET
                                 
                                 
000204 8100                      BOSSBULLET_PATH: LD R16, Z
000205 9119                      			  LD R17, Y+
000206 2b01                      			  OR R16, R17
                                 
000207 0f00                      			  LSL R16
000208 9301                      			  ST Z+, R16
000209 f410                      			BRCC BNextByte
                                 
00020a e001                      			LDI R16, 0x01
00020b 8300                      			ST Z, R16
                                 
00020c 8100                      			BNextByte: LD R16, Z
00020d 0f00                      					LSL R16
00020e 9301                      					ST Z+, R16
00020f f410                      			BRCC BNextByte2
                                 
000210 e001                      			LDI R16, 0x01
000211 8300                      			ST Z, R16
                                 			
000212 8100                      		BNextByte2: LD R16, Z
000213 0f00                      					LSL R16
000214 8300                      					ST Z, R16
                                 
                                 
000215 9508                      			  RET
                                 
000216 8100                      BULLET_PATH:  LD R16, Z
000217 9119                      			  LD R17, Y+
000218 2b01                      			  OR R16, R17
                                 
000219 9506                      			  LSR R16
00021a 8300                      			  ST Z, R16	  
00021b 95ea                      			  DEC ZL
00021c f410                      			  BRCC NextByte
                                 
00021d e800                      			LDI R16, 0x80
00021e 8300                      			ST Z, R16
                                 
00021f 8100                      			NextByte:  LD R16, Z
000220 9506                      					LSR R16
000221 8300                      					ST Z, R16
000222 95ea                      					DEC ZL
000223 f410                      			BRCC NextByte2
                                 
000224 e800                      			LDI R16, 0x80
000225 8300                      			ST Z, R16
                                 			
000226 8100                      		NextByte2: LD R16, Z
000227 9506                      					LSR R16
000228 8300                      					ST Z, R16
                                 			  
000229 9508                      			  RET
                                 
00022a e04f                      BULLET_DELAY: LDI R20, 0x0F
00022b 0000                      	BLOOP:  NOP
00022c efcf                      		LDI R28, 0xFF
00022d 0000                      		BNESTED: NOP
00022e 95ca                      				DEC R28
00022f f7e9                      				BRNE BNESTED
000230 954a                      	DEC R20
000231 f7c9                      	BRNE BLOOP
000232 9508                      	RET
                                 
000233 ef0a                      TimerInterrupt: LDI R16, 250
000234 bd06                      				OUT TCNT0,R16
000235 982c                      				CBI PORTB, 4
000236 9518                      				RETI
                                 


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega328P" register use summary:
x  :  40 y  :   9 z  :  71 r0 :   0 r1 :   0 r2 :   0 r3 :   0 r4 :   0 
r5 :   0 r6 :   0 r7 :   0 r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 
r13:   0 r14:   0 r15:   0 r16: 188 r17:  31 r18:  22 r19:   8 r20:   6 
r21:   9 r22:  10 r23:   1 r24:   0 r25:  10 r26:  11 r27:  10 r28:   9 
r29:   7 r30:  35 r31:  21 
Registers used: 18 out of 35 (51.4%)

"ATmega328P" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   0 add   :   6 adiw  :   0 and   :   0 
andi  :   0 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   5 brcs  :   1 break :   0 breq  :   7 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 brlt  :   0 brmi  :   0 
brne  :  22 brpl  :   0 brsh  :   0 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :   9 cbi   :  13 cbr   :   0 
clc   :   2 clh   :   0 cli   :   0 cln   :   0 clr   :   0 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :   0 cpc   :   0 
cpi   :   9 cpse  :   0 dec   :  23 eor   :   0 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :   0 ijmp  :   0 in    :   2 inc   :   2 jmp   :   0 
ld    :  47 ldd   :  13 ldi   : 155 lds   :   4 lpm   :   0 lsl   :   4 
lsr   :   3 mov   :   1 movw  :   0 mul   :   0 muls  :   0 mulsu :   0 
neg   :   0 nop   :   6 or    :   3 ori   :   0 out   :  11 pop   :   0 
push  :   0 rcall :  27 ret   :  16 reti  :   1 rjmp  :  10 rol   :   1 
ror   :   1 sbc   :   0 sbci  :   0 sbi   :  11 sbic  :   0 sbis  :   1 
sbiw  :   0 sbr   :   0 sbrc  :   0 sbrs  :   0 sec   :   0 seh   :   0 
sei   :   1 sen   :   0 ser   :   0 ses   :   0 set   :   0 sev   :   0 
sez   :   0 sleep :   0 spm   :   0 st    :  36 std   :  24 sts   :  23 
sub   :   0 subi  :   0 swap  :   0 tst   :   0 wdr   :   0 
Instructions used: 34 out of 113 (30.1%)

"ATmega328P" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00046e   1072      0   1072   32768   3.3%
[.dseg] 0x000100 0x000100      0      0      0    2048   0.0%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 0 warnings
